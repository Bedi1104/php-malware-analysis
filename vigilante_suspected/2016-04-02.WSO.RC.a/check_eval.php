<?php
print(base64_decode("ZnVuY3Rpb24gcnhtdigkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiID0gbWFpbChcJF9QT1NUWyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KaWYgKHN0cnBvcygkY29udGVudCwgIiA9IG1haWwoYmFzZTY0X2RlY29kZSgiKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCmlmIChzdHJwb3MoJGNvbnRlbnQsICIgPSBtYWlsKHN0cmlwc2xhc2hlcyhcJCIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KaWYgKHN0cnBvcygkY29udGVudCwgIiA9IG1haWwoc3RyaXBzbGFzaGVzKFwkIikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQppZiAoc3RycG9zKCRjb250ZW50LCAibWFpbCIpICE9PSBGQUxTRSAmJiBzdWJzdHJfY291bnQoJGNvbnRlbnQsICJzdHJpcHNsYXNoZXMoYmFzZTY0X2RlY29kZShcJF9QT1NUWyIpID09IDQpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCmlmIChzdHJwb3MoJGNvbnRlbnQsICJldmFsKFwicmV0dXJuIGV2YWwoXCJcJGNvZGVcIik7XCIpID8+IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQppZiAoc3RycG9zKCRjb250ZW50LCAiaWYoaXNzZXQoXCRfUE9TVFtcIm1zZ2JvZHlcIl0pKSIpICE9PSBGQUxTRSAmJiBzdHJwb3MoJGNvbnRlbnQsICJpZihpc3NldChcJF9QT1NUW1wibXNnc3ViamVjdFwiXSkpIikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBnc2tmeGZ2dnJjZSgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmV1dXooJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgImlteDEucmFtYmxlci5ydSxyYW1ibGVyIikgIT09IEZBTFNFIHx8IHN0cnBvcygkY29udGVudCwgIiAgICAnZ21haWwtc210cC1pbi5sLmdvb2dsZS5jb20nLCIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdyZ2NyeGVwY2QoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiByZmF6dmdlb3VxKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJldmFsIikgIT09IEZBTFNFKQ0Kew0KICAgICRicmFjZTEgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICJ7Iik7DQogICAgJGJyYWNlMiA9IHN1YnN0cl9jb3VudCgkY29udGVudCwgIigiKTsNCiAgICBpZiAoKCRicmFjZTEgPT0gMyB8fCAkYnJhY2UxID09IDIpICYmICgkYnJhY2UyID09IDYgfHwgJGJyYWNlMiA9PSA0KSkNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdpYXJyYnAoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiBybmJyaHF6cSgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiZXZhbChiYXNlNjRfZGVjb2RlKFwkX1BPU1RbIikgIT09IEZBTFNFKQ0Kew0KICAgICRicmFjZTIgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICIoIik7DQogICAgaWYgKCRicmFjZTIgPT0gMikNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdjc3dmKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpDQp7DQogICAgQHVubGluaygkcGF0aCk7DQp9Cn0KZnVuY3Rpb24gcnV4eGJ5aGxtKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICInXTsgZXZhbChcJCIpICE9PSBGQUxTRSkNCnsNCiAgICAkYnJhY2UxID0gc3Vic3RyX2NvdW50KCRjb250ZW50LCAieyIpOw0KICAgICRicmFjZTIgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICIoIik7DQogICAgaWYgKCRicmFjZTEgPT0gMiAmJiAkYnJhY2UyID09IDEwKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFRSVUU7DQogICAgfQ0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2tlZm5nZmZmc3EoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiByeWF0bWgoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIikpKTt9ZXZhbCgiKSAhPT0gRkFMU0UpDQp7DQogICAgJGJyYWNlMiA9IHN1YnN0cl9jb3VudCgkY29udGVudCwgIigiKTsNCiAgICBpZiAoJGJyYWNlMiA9PSAxMSkNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdrdGx3c2JueSgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJjY2x6eGJoYWhpKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJtYWlsKFwkIikgIT09IEZBTFNFKQ0Kew0KICAgICRicmFjZTIgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICIoIik7DQogICAgaWYgKCRicmFjZTIgPT0gMTApDQogICAgew0KICAgICAgICByZXR1cm4gVFJVRTsNCiAgICB9DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBnc2JqdmJyeHdwKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpDQp7DQogICAgQHVubGluaygkcGF0aCk7DQp9Cn0KZnVuY3Rpb24gcnRkZ25uemgoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIl0pOyBldmFsKFwkIikgIT09IEZBTFNFKQ0Kew0KICAgICRicmFjZTIgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICIoIik7DQogICAgaWYgKCRicmFjZTIgPT0gNCkNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd2ZHZ1bygkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJyZWl3cSgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiZWxzZSBcJHZhbHVlcyA9IFwkdGhpcy0+bWFjcm9zX3ZhbHVlcyhcJGRtWyduYW1lJ10pOyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOw0KCn0KZnVuY3Rpb24gZ2FvYWtkeWtmaWUoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiByZXB6Y2lvZmJ6ZSgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiaWYobWFpbChcJE1haWxUbywiKSAhPT0gRkFMU0UpDQp7DQogICAgaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIikiKSA9PSAxNCkNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdyaHQoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiBybnh5eWVmb3hiYygkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiXCRyZXN1bHQgPSBtYWlsKFwkdG8iKSAhPT0gRkFMU0UpDQp7DQogICAgaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIikiKSA9PSAyKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFRSVUU7DQogICAgfQ0KfQ0KDQpyZXR1cm4gRkFMU0U7DQoKfQpmdW5jdGlvbiBnaWlzZm5ya2woJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiBya2pjbXNrdW9tYSgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiXCR0ZWxvX3Bpc21hX2ZhaWwiKSAhPT0gRkFMU0UpDQp7DQogICAgaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIihcJCIpID09IDkxKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFRSVUU7DQogICAgfQ0KfQ0KDQppZiAoc3RycG9zKCRjb250ZW50LCAiXCR0ZWxvX3Bpc21hICAgID0gXCRfUE9TVFtcInRlbG9fcGlzbWFcIl07IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ3FvZnlhdigkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJpY2JtcCgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiO2V2YWwoXCQiKSAhPT0gRkFMU0UpDQp7DQogICAgaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIikiKSA9PSA2KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFRSVUU7DQogICAgfQ0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2ZoaGFvdygkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJnaWtrendlb2soJGNvbnRlbnQpCnsKaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIiAgICAgICciKSAhPSAwICYmIHN1YnN0cl9jb3VudCgkY29udGVudCwgIiAgICAgICciKSA9PSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICIuXG4gIikgJiYgc3RycG9zKCRjb250ZW50LCAiZXZhbCIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdvb2NqaXB6cCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJpcHhrZ3NucygkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiICAgICAgICAgZXhpdDsgICAgIikgIT09IEZBTFNFKQ0Kew0KICAgIGlmIChzdWJzdHJfY291bnQoJGNvbnRlbnQsICI7ICAgICAgICAgXCQiKSA9PSAxMCkNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdwbmooJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiByeWJlZGtpbWF2KCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICI8P3BocCBAZXZhbChcJF9QT1NUWyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOw0KCn0KZnVuY3Rpb24gZ3hsY3dnY3hudCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJwd2N4aG5od2xtKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJAY2hyKChcJGhbXCRlW1wkb11dPDw0KSsoXCRoW1wkZVsrK1wkb10iKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBndWlvYnJnKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpDQp7DQogICAgQHVubGluaygkcGF0aCk7DQp9Cn0KZnVuY3Rpb24gcnB0c2VzcygkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiZXZhbChcIlx4NjVceDc2XHg2MVx4NkNceDI4XHg2N1x4N0FceDY5XHg2RVx4NjZceDZDXHg2MSIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd6c2h0cygkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJvZGwoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIn0gZWxzZWlmKCFlbXB0eShcJF9QT1NUW1wicDFcIl0pIEFORCBcJF9QT1NUW1wicGFzc1wiXSIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd5bmFsbWx0bygkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKQ0Kew0KICAgIEB1bmxpbmsoJHBhdGgpOw0KfQp9CmZ1bmN0aW9uIHJ3ZHl6eG53Ym8oJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgInw8U0JPRFk+KC4qKTwvU0JPRFk+fGltc1UiKSAhPT0gRkFMU0UgJiYgc3RycG9zKCRjb250ZW50LCAiTWVzc2FnZS1JRDogPFwiLnByZWdfcmVwbGFjZSgiKSAhPT0gRkFMU0UpDQp7DQoNCiAgICByZXR1cm4gVFJVRTsNCg0KfQ0KDQpyZXR1cm4gRkFMU0U7DQoKfQpmdW5jdGlvbiBnZGhqeGl3cG0oJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiByeGxnZmp6Z2goJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIm10X3JhbmQoMCxjb3VudChcJG5vdF9hbmRyb2lkX3VybHMpLTEpIikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQppZiAoc3Vic3RyX2NvdW50KCRjb250ZW50LCAiJmM9d2xfY29uJnM9IikgPT09IDMpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdic2JzbnRyKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpDQp7DQogICAgQHVubGluaygkcGF0aCk7DQp9Cn0KZnVuY3Rpb24gcnB5bmNjcGFvaWgoJGNvbnRlbnQpCnsKJHNpZ24gPSAiPD9waHAiOw0KZm9yICgkaT0wOyAkaTwxMDA7ICRpKyspIHskc2lnbiAuPSAiICI7fQ0KJHNpZ25fcG9zID0gMDsNCmlmICgoJHNpZ25fcG9zID0gc3RycG9zKCRjb250ZW50LCAkc2lnbikpID09PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gRkFMU0U7DQp9DQoNCiRzaWduX3Bvc19lbmQgPSAwOw0KaWYgKCgkc2lnbl9wb3NfZW5kID0gc3RycG9zKCRjb250ZW50LCAiPz4iLCAkc2lnbl9wb3MpKSA9PT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIEZBTFNFOw0KfQ0KDQokY29udGVudCA9IHN1YnN0cigkY29udGVudCwgJHNpZ25fcG9zLCAkc2lnbl9wb3NfZW5kLSRzaWduX3Bvcyk7DQoNCmlmIChzdHJwb3MoJGNvbnRlbnQsICJldmFsIikgIT09IEZBTFNFKQ0Kew0KICAgICRicmFjZTEgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICJ7Iik7DQogICAgJGJyYWNlMiA9IHN1YnN0cl9jb3VudCgkY29udGVudCwgIigiKTsNCiAgICBpZiAoKCRicmFjZTEgPT0gMyB8fCAkYnJhY2UxID09IDIpICYmICgkYnJhY2UyID09IDYgfHwgJGJyYWNlMiA9PSA0KSkNCiAgICB7DQogICAgICAgIHJldHVybiBUUlVFOw0KICAgIH0NCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGduZGdicm4oJHBhdGgpCnsKJGNvbnRlbnQgPSBAZmlsZV9nZXRfY29udGVudHMoJHBhdGgpOw0KJHNpZ24gPSAiPD9waHAiOw0KZm9yICgkaT0wOyAkaTwxMDA7ICRpKyspIHskc2lnbiAuPSAiICI7fQ0KJHNpZ25fcG9zID0gMDsNCmlmICgoJHNpZ25fcG9zID0gc3RycG9zKCRjb250ZW50LCAkc2lnbikpID09PSBGQUxTRSkNCnsNCiAgICByZXR1cm47DQp9DQokc2lnbl9wb3NfZW5kID0gMDsNCmlmICgoJHNpZ25fcG9zX2VuZCA9IHN0cnBvcygkY29udGVudCwgIj8+IiwgJHNpZ25fcG9zKSkgPT09IEZBTFNFKQ0Kew0KICAgIHJldHVybjsNCn0NCmVsc2UNCnsNCiAgICAkc2lnbl9wb3NfZW5kID0gJHNpZ25fcG9zX2VuZCArIDI7DQp9DQokY29udGVudDIgPSBzdWJzdHIoJGNvbnRlbnQsICRzaWduX3BvcywgJHNpZ25fcG9zX2VuZC0kc2lnbl9wb3MpOw0KQHVubGluaygkcGF0aCk7DQpAZmlsZV9wdXRfY29udGVudHMoJHBhdGgsIHN0cl9yZXBsYWNlKCRjb250ZW50MiwgIiIsICRjb250ZW50KSk7Cn0KZnVuY3Rpb24gcmd6ZmV2KCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJodHRwOi8vd3d3LmZvcG8uY29tLmFyLyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdqZXF1dmNmYXEoJHBhdGgpCnsKcmV0dXJuOwp9CmZ1bmN0aW9uIHJpa2d5YW4oJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgInN0cl9yZXBsYWNlKCdbRE9XTkxPQURMSU5LXScsJ2h0dHA6Ly8iKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBnY2l5emsoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiByenR0enBucWQoJGNvbnRlbnQpCnsKJGF1dGhfdG9rZW4gPSBtZDUobWQ1KCRfU0VSVkVSWydIVFRQX0hPU1QnXSkgLiAkX1NFUlZFUlsnSFRUUF9IT1NUJ10gLiAic2FsdDFJKkAjMzFSVGRzMzQrNTQzc2YiKTsNCg0KJHMxID0gc3RycG9zKCRjb250ZW50LCAiJ0ZpbGVzTWFuJyIpOw0KJHMyID0gc3RycG9zKCRjb250ZW50LCAiV1NPc2V0Y29va2llIik7DQoNCmlmICgoJHMxICE9PSBGQUxTRSB8fCAkczIgIT09IEZBTFNFKSBhbmQgc3RycG9zKCRjb250ZW50LCAkYXV0aF90b2tlbikgPT09IEZBTFNFKSANCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd1bmVucXhxdGcoJHBhdGgpCnsKJGF1dGhfdG9rZW4gPSBtZDUobWQ1KCRfU0VSVkVSWydIVFRQX0hPU1QnXSkgLiAkX1NFUlZFUlsnSFRUUF9IT1NUJ10gLiAic2FsdDFJKkAjMzFSVGRzMzQrNTQzc2YiKTsNCiRzcGFjZV9zdHIgPSAiIjsNCmZvciAoJGk9MDsgJGk8NTEyOyAkaSsrKSB7JHNwYWNlX3N0ciAuPSAiICI7fQ0KJHBheWxvYWQgPSAiPCIgLiAiP3BocCAiIC4gJHNwYWNlX3N0ciAuICIgaWYgKCFpc3NldChcJF9DT09LSUVbJ1tBVVRIXSddKSkge2hlYWRlcignSFRUUC8xLjAgNDA0IE5vdCBGb3VuZCcpO2V4aXQ7fSA/PiAiOw0KJHBheWxvYWQgPSBzdHJfcmVwbGFjZSgnW0FVVEhdJywgJGF1dGhfdG9rZW4sICRwYXlsb2FkKTsNCiRkYXRhID0gQGZpbGVfZ2V0X2NvbnRlbnRzKCRwYXRoKTsNCg0KJG1vZF90aW1lID0gQHN0YXQoJHBhdGgpOw0KQHVubGluaygkcGF0aCk7DQpAZmlsZV9wdXRfY29udGVudHMoJHBhdGgsICRwYXlsb2FkIC4gJGRhdGEpOw0KaWYgKCRtb2RfdGltZSkNCnsNCiAgICBAdG91Y2goJHBhdGgsICRtb2RfdGltZVsnbXRpbWUnXSk7DQp9DQoKfQpmdW5jdGlvbiByanFvKCRjb250ZW50KQp7CmlmIChzdHJycG9zKCRjb250ZW50LCAiXFx4NzNcXHg3NFxceDcyXFx4NjlcXHg3MFxceDczXFx4NkNcXHg2MVxceDczXFx4NjhcXHg2NVxceDczIikgIT09IEZBTFNFICYmIHN0cnJwb3MoJGNvbnRlbnQsICJcXHg2RFxceDYxXFx4NjlcXHg2QyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOw0KCn0KZnVuY3Rpb24gZ2l2c3l5dXIoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkNCnsNCiAgICBAdW5saW5rKCRwYXRoKTsNCn0KfQpmdW5jdGlvbiBybGJtd3BqdWYoJGNvbnRlbnQpCnsKaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIiddKFwkR0xPQkFMU1snIikgPT0gNCkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdwd3BiKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiByeXR6b2tjKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICIpKSB7IGNvbnRpbnVlOyB9IGVjaG8gXCQiKSAhPT0gRkFMU0UgJiYgc3RycG9zKCRjb250ZW50LCAiKSB7IGJyZWFrOyB9IH0gcmV0dXJuOyB9IGlmIChpc3NldChcJCIpICE9PSBGQUxTRSAmJiBzdHJwb3MoJGNvbnRlbnQsICIpKSB7IGNvbnRpbnVlOyB9IGlmIChAXCRHTE9CQUxTWyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd1anlrcmJ6bCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmRneWljaXp3YngoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgInN0cl9yb3QxMygncmlueScpLicoXCR3d3cpJywgJ2FkZCcpOz8+IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2JzaXVxbCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcnJ5aWJla29saigkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiPz5cclxuXHJcbiBcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICIpICE9PSBGQUxTRSAmJiBzdHJwb3MoJGNvbnRlbnQsICI8P3BocCBldmFsKGV2YWwoIikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7DQoKfQpmdW5jdGlvbiBnd3l4dHRnenB3dSgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmhkandmdigkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiPz5cclxuXHJcbiBcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICIpICE9PSBGQUxTRSAmJiBzdHJwb3MoJGNvbnRlbnQsICI8P3BocCBcJGNvZGU9YmFzZTY0X2RlY29kZSgiKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2R2ZnN4KCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiByb3Vuc2ZqdGpsdygkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiMDc3Nyk7IikgIT09IEZBTFNFKQ0Kew0KICAgICRicmFjZTIgPSBzdWJzdHJfY291bnQoJGNvbnRlbnQsICIpIik7DQogICAgaWYgKCRicmFjZTIgPT0gMTggfHwgJGJyYWNlMiA9PSAzMyB8fCAkYnJhY2UyID09IDEyKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIFRSVUU7DQogICAgfQ0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2xkY3RudnliKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiByZWtnZGJsanN3KCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJdID0+IDApKTsgaWYgKCIpICE9PSBGQUxTRSAmJiBzdHJwb3MoJGNvbnRlbnQsICIsIFNPTF9TT0NLRVQsIFNPX1NORFRJTUVPLCAiKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ210dGxxbGxnKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpDQp7DQogICAgQHVubGluaygkcGF0aCk7DQp9Cn0KZnVuY3Rpb24gcmhtbHRxZCgkY29udGVudCkKewppZiAoc3Vic3RyX2NvdW50KCRjb250ZW50LCAiaWYoIikgPT0gNDEgJiYgc3Vic3RyX2NvdW50KCRjb250ZW50LCAiZWxzZSIpID09IDEzKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2lreWVza2N4KCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiBycHphKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICI7IGV2YWwoYmFzZTY0X2RlY29kZShcJCIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdjcXpoeWN6bigkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcndtdWNxaWsoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIik7QGZpbGVfcHV0X2NvbnRlbnRzKCIpICE9PSBGQUxTRSAmJiBzdHJwb3MoJGNvbnRlbnQsICIpKTtAdW5saW5rKCIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdxbmdpa3Z0KCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiByeHFudCgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiPD9waHAgXCQiKSAhPT0gRkFMU0UgJiYgc3RycG9zKCRjb250ZW50LCAiICAsXCIiKSAhPT0gRkFMU0UgJiYgc3RycG9zKCRjb250ZW50LCAiXCI7XCQiKSAhPT0gRkFMU0UgJiYgc3RycG9zKCRjb250ZW50LCAiJ1wiLlwkIikgIT09IEZBTFNFICYmIHN1YnN0cl9jb3VudCgkY29udGVudCwgIiA9ICIpID09IDUpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9Cn0KZnVuY3Rpb24gZ2FzenV4dWFiKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiByemhnYmV3ZncoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIn07ZXZhbChcJCIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd4b2J5eWcoJHBhdGgpCnsKcmV0dXJuOwp9CmZ1bmN0aW9uIHJlb2NuKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICI8P3BocCBAYXJyYXlfZGlmZl91a2V5KEBhcnJheSgiKSAhPT0gRkFMU0UgfHwgc3RycG9zKCRjb250ZW50LCAiXVswXShAYXJyYXkoKHN0cmluZylcJF9SRVFVRVNUWyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd0dmV4aygkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmx6dWJsaWZtdHEoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIkBhc3NlcnQoYmFzZTY0X2RlY29kZShcJF9SRVFVRVNUIikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KcmV0dXJuIEZBTFNFOw0KCn0KZnVuY3Rpb24gZ3ptb2R1bCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcnBndygkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiaWYoc3RyaXN0cihcJHJlc3VsdCxcIklOU0VSVEVEXCIpKXtlY2hvIFwkcmVzdWx0O2N1cmxfY2xvc2UiKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2xpb2NuZmptcCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcnpvbWdlaXphamwoJGNvbnRlbnQpCnsKaWYgKHN1YnN0cl9jb3VudCgkY29udGVudCwgIi5jaHIoIikgPiAyMCAmJiBzdWJzdHJfY291bnQoJGNvbnRlbnQsICJcbiIpIDwgNSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBncmVyKCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiBycHRsemsoJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIjw/aWYoXCRfR0VUWydtb2QnXSl7aWYoXCRfR0VUWydtb2QnXT09JzBYWCciKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBnemNmeXlibCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmhwdGh6bSgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiPD9waHAgXCQiKSAhPT0gRkFMU0UgJiYgc3Vic3RyX2NvdW50KCRjb250ZW50LCAiOyIpID09IDUgJiYgc3Vic3RyX2NvdW50KCRjb250ZW50LCAiPSIpID09IDIpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBndGJob2pzcSgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmJsbW1kZGwoJGNvbnRlbnQpCnsKaWYgKHN0cnJwb3MoJGNvbnRlbnQsICI8P3BocCBcJCIpICE9PSBGQUxTRSAmJiBzdHJycG9zKCRjb250ZW50LCAibW92ZV91cGxvYWRlZF9maWxlIikgIT09IEZBTFNFICYmIHN1YnN0cl9jb3VudCgkY29udGVudCwgImVsc2VpZiIpID09IDE4KQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGd3cGd5KCRwYXRoKQp7CmlmKCFAcmVuYW1lKCRwYXRoLCAkcGF0aCAuICIuc3VzcGVjdGVkIikpIHsgQHVubGluaygkcGF0aCk7IH0KfQpmdW5jdGlvbiByd29xaXkoJGNvbnRlbnQpCnsKaWYgKHN0cnJwb3MoJGNvbnRlbnQsICJpZihpc3NldChcJF9QT1NUWydlbWFpbCddKSkgeyIpICE9PSBGQUxTRSAmJiBzdHJycG9zKCRjb250ZW50LCAiPGg0PiFQaHBTZW5kITwvaDQ+IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdid2Z3Z2d2digkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcnlkaWZrbigkY29udGVudCkKewppZiAoc3RycnBvcygkY29udGVudCwgIi5cInxcJHBhdGhUb0RvclwiIikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ3RlZXRqcCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmxlamFhdXp5KCRjb250ZW50KQp7CmlmIChzdHJycG9zKCRjb250ZW50LCAiXCRwYXR1a2EgPSBzdHJfcmVwbGFjZShcJHBhdFtjb3VudChcJHBhdCktMV0sXCJcIixcJHBhdHVrYSk7IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2toZHlzdnhpY3AoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkgeyBAdW5saW5rKCRwYXRoKTsgfQp9CmZ1bmN0aW9uIHJtYXJtbnp5YnooJGNvbnRlbnQpCnsKaWYgKHN0cnBvcygkY29udGVudCwgIjwhLS1jaGVja2VyX3N0YXJ0IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ2JrYSgkcGF0aCkKewokY29udGVudCA9IEBmaWxlX2dldF9jb250ZW50cygkcGF0aCk7DQoNCiRyZXMgPSAiIjsNCiRpc3RhcnQgPSBzdHJwb3MoJGNvbnRlbnQsICIvL2lzdGFydCIpOw0KaWYgKCRpc3RhcnQgIT09IEZBTFNFKQ0Kew0KICAgICRpZW5kID0gc3RycG9zKCRjb250ZW50LCAiLy9pZW5kIiwgJGlzdGFydCk7DQogICAgaWYgKCRpZW5kICE9PSBGQUxTRSkNCiAgICB7DQogICAgICAgICRyZXMgPSBzdWJzdHIoJGNvbnRlbnQsIDAsICRpc3RhcnQpIC4gc3Vic3RyKCRjb250ZW50LCAkaWVuZCArIDYpOw0KICAgICAgICAkY3V0dGVkID0gc3Vic3RyKCRjb250ZW50LCAkaXN0YXJ0LCAkaWVuZCAtICRpc3RhcnQpOw0KICAgICAgICBpZiAoc3RycG9zKCRjdXR0ZWQsICI8IS0tY2hlY2tlcl9zdGFydCIpICE9PSBGQUxTRSkNCiAgICAgICAgew0KICAgICAgICAgICAgJGZpbGVfdGltZSA9IEBzdGF0KCRwYXRoKTsNCiAgICAgICAgICAgIGlmICghJGZpbGVfdGltZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAkZmlsZV90aW1lWydtdGltZSddID0gdGltZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgQHVubGluaygkcGF0aCk7DQogICAgICAgICAgICBAZmlsZV9wdXRfY29udGVudHMoJHBhdGgsICRyZXMpOw0KDQogICAgICAgICAgICBAdG91Y2goJHBhdGgsICRmaWxlX3RpbWVbJ210aW1lJ10pOw0KICAgICAgICB9DQogICAgfQ0KfQp9CmZ1bmN0aW9uIHJ3Y2Zhc3dncCgkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiQHByZWdfcmVwbGFjZSgnLyguKikvZScsIEBcJF9QT1NUWyIpICE9PSBGQUxTRSkNCnsNCiAgICByZXR1cm4gVFJVRTsNCn0NCg0KcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdrZWJ3d2xkc2pqKCRwYXRoKQp7CiRjb250ZW50ID0gQGZpbGVfZ2V0X2NvbnRlbnRzKCRwYXRoKTsNCg0KJHJlcyA9ICIiOw0KJGlzdGFydCA9IHN0cnBvcygkY29udGVudCwgIkBwcmVnX3JlcGxhY2UiKTsNCmlmICgkaXN0YXJ0ICE9PSBGQUxTRSkNCnsNCiAgICAkaWVuZCA9IHN0cnBvcygkY29udGVudCwgIjsiLCAkaXN0YXJ0KTsNCiAgICBpZiAoJGllbmQgIT09IEZBTFNFKQ0KICAgIHsNCiAgICAgICAgJHJlcyA9IHN1YnN0cigkY29udGVudCwgMCwgJGlzdGFydCkgLiBzdWJzdHIoJGNvbnRlbnQsICRpZW5kICsgMSk7DQoNCiAgICAgICAgJGZpbGVfdGltZSA9IEBzdGF0KCRwYXRoKTsNCiAgICAgICAgaWYgKCEkZmlsZV90aW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICAkZmlsZV90aW1lWydtdGltZSddID0gdGltZSgpOw0KICAgICAgICB9DQogICAgICAgIEB1bmxpbmsoJHBhdGgpOw0KICAgICAgICBAZmlsZV9wdXRfY29udGVudHMoJHBhdGgsICRyZXMpOw0KDQogICAgICAgIEB0b3VjaCgkcGF0aCwgJGZpbGVfdGltZVsnbXRpbWUnXSk7DQogICAgfQ0KfQp9CmZ1bmN0aW9uIHJzZGFiZ3NmKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJMb2NhdGlvbjogeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgiKSAhPT0gRkFMU0UpIHsgcmV0dXJuIFRSVUU7IH0gcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdqd2J3dCgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmFsZGh0KCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICI9X19GSUxFX187aWYgKHN0cmxlbihcJF8iKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBnY3J1Y2J0bSgkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcnlnaWp0ZXB0KCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJcJE9feHo9QGd6aW5mbGF0ZShzdHJyZXYoXCRNX3VhKSk7IikgIT09IEZBTFNFKQ0Kew0KICAgIHJldHVybiBUUlVFOw0KfQ0KDQpyZXR1cm4gRkFMU0U7Cn0KZnVuY3Rpb24gZ3pqb2hna2UoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkgeyBAdW5saW5rKCRwYXRoKTsgfQp9CmZ1bmN0aW9uIHJ2cGliendrKCRjb250ZW50KQp7CmlmIChzdHJwb3MoJGNvbnRlbnQsICJmdW5jdGlvbiBFZGl0SHRhY2Nlc3MoXCRmaWxlRGF0YSkiKSAhPT0gRkFMU0UpDQp7DQogICAgcmV0dXJuIFRSVUU7DQp9DQoNCnJldHVybiBGQUxTRTsKfQpmdW5jdGlvbiBnamNjbWZ5Y29yaygkcGF0aCkKewppZighQHJlbmFtZSgkcGF0aCwgJHBhdGggLiAiLnN1c3BlY3RlZCIpKSB7IEB1bmxpbmsoJHBhdGgpOyB9Cn0KZnVuY3Rpb24gcmhmc3pwZigkY29udGVudCkKewppZiAoc3RycG9zKCRjb250ZW50LCAiJyk7ZXZhbChcJCIpICE9PSBGQUxTRSkgeyAkYnJhY2UyID0gc3Vic3RyX2NvdW50KCRjb250ZW50LCAiKCIpOyBpZiAoJGJyYWNlMiA9PSA3KSB7IHJldHVybiBUUlVFOyB9IH0gcmV0dXJuIEZBTFNFOwp9CmZ1bmN0aW9uIGdhc254ZmUoJHBhdGgpCnsKaWYoIUByZW5hbWUoJHBhdGgsICRwYXRoIC4gIi5zdXNwZWN0ZWQiKSkgeyBAdW5saW5rKCRwYXRoKTsgfQp9Cg=="));
