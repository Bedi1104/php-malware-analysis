#!/bin/bash

# 1. Extract the single lines with eval(base64_decode(..*));
# or containing the serialized array. Write code to decode
# or deserialize those lines.
rm -rf extracted
mkdir extracted
find . -name '*php.file' | xargs grep -l '^eval(base64_decode("' | while read FNAME                                            # /home/bediger/src/php/malware/vigilante_suspected
do
	# Find timestamp of original attack.
	TIMESTAMP=$(stat $FNAME | grep Modify: | awk '{print $2}')

	# Serialized array
	echo '<?php' >  extracted/defs.$TIMESTAMP
	fgrep '$defs =' $FNAME >> extracted/defs.$TIMESTAMP
	
cat << 'ENDIT' >>  extracted/defs.$TIMESTAMP
foreach ($defs as $i => $entry) {
	print("{$entry[0]}	{$entry[1]}	{$entry[2]}\n");
}
ENDIT
	# Encoded functions
	echo '<?php' >  extracted/eval.$TIMESTAMP
	grep '^eval(base64_decode("' $FNAME | sed 's/eval/print/' >> extracted/eval.$TIMESTAMP
done

# 2. Print the elements of the reserialized arrays
DST=extracted_defs
SRC=extracted
rm -rf $DST
mkdir $DST
for FNAME in $SRC/defs.*
do
	TIMESTAMP=$(basename $FNAME | sed 's/defs.//')
	php $FNAME > $DST/def.$TIMESTAMP
done

# Complicated steps to get to 1 function per file,
# files organized by timestamp of original attack
DST=extracted_evals
SRC=extracted
rm -rf $DST
mkdir $DST
for FNAME in $SRC/eval.*
do
	TIMESTAMP=$(basename $FNAME | sed 's/eval.//')
	echo '<?php' >  $DST/eval.$TIMESTAMP
	php $FNAME >> $DST/eval.$TIMESTAMP
done

# Pretty print the r- and g-functions
DST=formatted_evals
SRC=extracted_evals
rm -rf $DST
mkdir $DST
for FNAME in $SRC/eval.*
do
	TIMESTAMP=$(basename $FNAME | sed 's/eval.//')
	$HOME/src/php/reverse-php-malware/pp.php $FNAME > $DST/eval.$TIMESTAMP
done

# Substitute the serial number from the re-serialized array
# entry for the function in question. Random names are
# hard to remember.
SRC=formatted_evals
rm -rf EDITS
mkdir EDITS
for FNAME in $SRC/eval.*
do
	TIMESTAMP=$(basename $FNAME | sed 's/eval.//')
	# Make the ex commands from the deserialized array
	# corresponding to a file of decoded functions
	touch EDITS/edits.$TIMESTAMP
	while read NUMBER RFUNC GFUNC
	do
		echo "%s/^function $RFUNC/function R$NUMBER/" >> EDITS/edits.$TIMESTAMP
		echo "%s/^function $GFUNC/function G$NUMBER/" >> EDITS/edits.$TIMESTAMP
	done < extracted_defs/def.$TIMESTAMP
	echo "w!" >> EDITS/edits.$TIMESTAMP
	echo "q" >> EDITS/edits.$TIMESTAMP

	ex -s $FNAME < EDITS/edits.$TIMESTAMP
done

# Break each renamed function into its own file
DST=renamed_functions
SRC=formatted_evals
rm -rf $DST
mkdir $DST
for FNAME in $SRC/eval.*
do
	echo $FNAME
	TIMESTAMP=$(basename $FNAME | sed 's/eval.//')
	DIR=$DST/$TIMESTAMP
	mkdir $DIR
	while read LINE
	do
		if [[ $LINE =~ ^function\ ..* ]]
		then
			FUNC=$(echo $LINE | sed -e 's/function //' -e 's/(..*//')
			OUTPUT=$DIR/$FUNC.php
			touch $OUTPUT
		fi
        if [[ $OUTPUT != "" ]]
        then
            echo $LINE >> $OUTPUT
        fi
	done < $FNAME
done
